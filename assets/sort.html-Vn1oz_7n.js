import{_ as i,r as p,o as d,c as r,f as c,a as t,b as s,d as n,w as e,e as u}from"./app-5VBZs9Uu.js";const _="/assets/3-8-1-iT-WwoJ7.png",k="/assets/3-8-2-QfXJz8bw.png",h="/assets/3-8-3-a_6Sr1pw.png",g="/assets/3-8-4-z3t45buZ.png",m="/assets/3-8-5-fdOtm4YE.png",f="/assets/3-8-6-N3GEHDda.png",y="/assets/3-8-7-9X6nt6Rg.png",b={},v=u('<h1 id="_3-8-排序算法" tabindex="-1"><a class="header-anchor" href="#_3-8-排序算法" aria-hidden="true">#</a> 3.8 排序算法</h1><h2 id="评价排序算法的指标" tabindex="-1"><a class="header-anchor" href="#评价排序算法的指标" aria-hidden="true">#</a> 评价排序算法的指标</h2><h4 id="_1-执行效率" tabindex="-1"><a class="header-anchor" href="#_1-执行效率" aria-hidden="true">#</a> 1. 执行效率</h4><p>在分析排序算法的时间复杂度时，要分别给出<strong>最好情况</strong>、<strong>最坏情况</strong>、<strong>平均情况下的时间复杂度</strong>。</p><h4 id="_2-内存消耗" tabindex="-1"><a class="header-anchor" href="#_2-内存消耗" aria-hidden="true">#</a> 2. 内存消耗</h4><p>算法的内存消耗可以通过<strong>空间复杂度</strong>来衡量。</p><p>空间复杂度是 O(1)的排序算法，称为<strong>原地排序（Sorted in place）</strong>。</p><h4 id="_3-稳定性" tabindex="-1"><a class="header-anchor" href="#_3-稳定性" aria-hidden="true">#</a> 3. 稳定性</h4><p><strong>稳定性</strong>是指，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p><p>很多数据结构和算法课程，在讲排序的时候，都是用整数来举例，但在真正软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个 key 来排序。当需要先按 key1 排序，key1 值相同的再按照 key2 排序时，就需要使用稳定的排序算法。</p><hr><p>常见排序算法的各项指标如下：</p><table style="width:100%;"><tr><th style="width:15%;">排序算法</th><th style="width:15%;">平均时间复杂度</th><th style="width:13%;">最好情况</th><th style="width:15%;">最坏情况</th><th style="width:12%;">空间复杂度</th><th style="width:15%;">排序方式</th><th style="width:15%;">稳定性</th></tr><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(nlogn)</td><td>O(nlog^2n)</td><td>O(nlog^2n)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>out-place</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td><td>in-place</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n^2)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td><td>out-place</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr></table><h2 id="冒泡排序-bubble-sort" tabindex="-1"><a class="header-anchor" href="#冒泡排序-bubble-sort" aria-hidden="true">#</a> 冒泡排序（Bubble Sort）</h2><p>冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对<strong>相邻的两个元素进行比较</strong>，看是否满足大小关系要求。如果不满足就让它俩互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作。 <img src="'+_+'" alt="" loading="lazy"><img src="'+k+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 相邻数据比较</span>
				<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冒泡排序的平均时间复杂度是 O(n^2)，冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><h2 id="选择排序-selection-sort" tabindex="-1"><a class="header-anchor" href="#选择排序-selection-sort" aria-hidden="true">#</a> 选择排序（Selection Sort）</h2><p>选择排序将数组中的数据分为两个区间，已排序区间和未排序区间。每次会从未排序区间中<strong>找到最小的元素</strong>，将其放到已排序区间的末尾，共执行 n - 1 轮。</p><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> temp<span class="token punctuation">,</span> minIndex<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 寻找最小值</span>
				minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 暂存最小值的索引</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将最小值和第一个未排序的数交换</span>
		arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
		arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择排序空间复杂度为 O(1)，是一种原地排序算法。选择排序的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O(n2)。选择排序是一种不稳定的排序算法。选择排序每次都要找剩余未排序元素中的最小值，并和前面的元素交换位置，这样破坏了稳定性。</p><h2 id="插入排序-insertion-sort" tabindex="-1"><a class="header-anchor" href="#插入排序-insertion-sort" aria-hidden="true">#</a> 插入排序（Insertion Sort）</h2><p>插入排序将数组中的数据分为两个区间，已排序区间和未排序区间。初始已排序区间只有一个元素，就是数组的第一个元素。插入算法的核心思想是取未排序区间中的元素，在已排序区间中<strong>找到合适的插入位置将其插入</strong>，并保证已排序区间数据一直有序。重复这个过程，直到未排序区间中元素为空，算法结束。 <img src="`+g+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 当前要处理的数</span>
		<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果前一个数大于后一个数,将前一个数往后移一位</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			j<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 此时的j是要处理的数排序后应该在的位置</span>
		arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入排序的平均时间复杂度是 O(n^2)，冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><h2 id="希尔排序-shell-sort" tabindex="-1"><a class="header-anchor" href="#希尔排序-shell-sort" aria-hidden="true">#</a> 希尔排序（Shell Sort）</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
				j<span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希尔排序的平均时间复杂度是 O(nlogn)，空间复杂度为 O(1)，希尔排序是非稳定排序算法。</p><h2 id="归并排序-merge-sort" tabindex="-1"><a class="header-anchor" href="#归并排序-merge-sort" aria-hidden="true">#</a> 归并排序（Merge Sort）</h2><p>归并排序的核心思想是分治思想。分治，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。</p><p>如果要排序一个数组，先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。</p><ul><li><p>分：把数组分成两半，递归子数组,进行分割操作，直到分成一个数</p></li><li><p>合：把两个字数组合并成一个有序数组，直到全部子数组合并完毕，合并前先准备一个空数组，存放合并之后的结果，然后不断取出两个子数组的第一个元素，比较他们的大小，小的先进入之前准备的空数组中，然后继续遍历其他元素，直到子数组中的元素都完成遍历</p></li></ul><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//采用自上而下的递归方法</span>
	<span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度 O(nlogn)，分的时间复杂度 O(logn)，合并的过程的复杂度是 O(n)。</p><p>尽管每次合并操作都需要申请额外的内存空间，但在合并完成之后，临时开辟的内存空间就被释放掉了。在任意时刻，CPU 只会有一个函数在执行，也就只会有一个临时的内存空间在使用。临时内存空间最大也不会超过 n 个数据的大小，所以空间复杂度是 O(n)。</p><p>归并排序不是原地排序算法，归并排序是一个稳定的排序算法。</p><h2 id="快速排序-quick-sort" tabindex="-1"><a class="header-anchor" href="#快速排序-quick-sort" aria-hidden="true">#</a> 快速排序（Quick Sort）</h2><p>快排利用的也是分治思想。</p><ul><li>分区：从数组中选一个基准值，比基准值小的放在它的前面，比基准值大的放在它的后面</li><li>递归：对基准值前后的子数组进行第一步的递归操作</li></ul><p>快排是一种原地、不稳定的排序算法。时间复杂度 O(nlogn)，递归复杂度是 O(logn),分区复杂度 O(n)；空间复杂度是 O(1)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		partitionIndex<span class="token punctuation">,</span>
		left <span class="token operator">=</span> <span class="token keyword">typeof</span> left <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token keyword">typeof</span> right <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> right<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		partitionIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//分区操作</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 设定基准值位置 pivot</span>
	<span class="token comment">// 当然也可以选择最右边的元素为基准</span>
	<span class="token comment">// 也可以随机选择然后和最左或最右元素交换</span>
	<span class="token keyword">var</span> pivot <span class="token operator">=</span> left<span class="token punctuation">,</span>
		index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>快排和归并用的都是分治思想，递推公式和递归代码也非常相似，它们的区别是：</p><ul><li>归并排序的处理过程是由下到上的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是由上到下的，先分区，然后再处理子问题。</li><li>归并排序虽然是稳定的、时间复杂度为 O(nlogn)的排序算法，但是它是非原地排序算法，它的合并函数无法在原地执行。快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题。</li></ul><h2 id="桶排序-bucket-sort" tabindex="-1"><a class="header-anchor" href="#桶排序-bucket-sort" aria-hidden="true">#</a> 桶排序（Bucket sort）</h2><p>桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>桶排序的时间复杂度是 O(n)。如果要排序的数据有 n 个，我们把它们均匀地划分到 m 个桶内，每个桶里就有 k=n/m 个元素。每个桶内部使用快速排序，时间复杂度为 O(k _ logk)。m 个桶排序的时间复杂度就是 O(m _ k * logk)，因为 k=n/m，所以整个桶排序的时间复杂度就是 O(n*log(n/m))。当桶的个数 m 接近数据个数 n 时，log(n/m)就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。</p><p>桶排序对要排序数据的要求是非常苛刻的。要求数据在各个桶之间的分布是比较均匀的。如果数据经过桶的划分之后，有些桶里的数据非常多，有些非常少，很不平均，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到一个桶里，那就退化为 O(nlogn)的排序算法了。</p><p>桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p><p>比如有 10GB 的订单数据，希望按订单金额（假设金额都是正整数）进行排序，但是内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。</p><p>可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后得到，订单金额最小是 1 元，最大是 10 万元。将所有订单根据金额划分到 100 个桶里，第一个桶存储金额在 1 元到 1000 元之内的订单，第二桶存储金额在 1001 元到 2000 元之内的订单，以此类推。每一个桶对应一个文件，并且按照金额范围的大小顺序编号命名（00，01，02…99）。</p><p>不过，订单按照金额在 1 元到 10 万元之间并不一定是均匀分布的 ，所以 10GB 订单数据无法均匀地被划分到 100 个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会很大，没法一次性读入内存。这时可以继续划分，比如，订单金额在 1 元到 1000 元之间的比较多，就将这个区间继续划分为 10 个小区间，1 元到 100 元，101 元到 200 元，201 元到 300 元…901 元到 1000 元。如果划分之后，101 元到 200 元之间的订单还是太多，无法一次性读入内存，那就继续再划分，直到所有的文件都能读入内存为止。</p><ul><li>平均时间复杂度：O(n + k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n^2)；</li><li>最佳时间复杂度：O(n + k)；</li><li>空间复杂度：O(n + k)，需要额外的计数数组和结果数组；</li><li>稳定性：桶排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><h2 id="计数排序-counting-sort" tabindex="-1"><a class="header-anchor" href="#计数排序-counting-sort" aria-hidden="true">#</a> 计数排序（Counting sort）</h2><p>计数排序是一种非比较排序算法，其核心思想是通过计数每个元素的出现次数来进行排序，适用于整数或有限范围内的非负整数排序。这个算法的特点是速度快且稳定，适用于某些特定场景。</p><p>计数排序其实是桶排序的一种特殊情况。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。每个桶内的数据值都是相同的，省掉了桶内排序的时间。</p><p>比如高考查分数系统，查分数的时候，系统会显示成绩以及所在省的排名。如果所在省有 50 万考生，如何通过成绩快速排序得出名次。</p><p>考生的满分是 900 分，最小是 0 分，这个数据的范围很小，可以分成 901 个桶，对应分数从 0 分到 900 分。根据考生的成绩，将这 50 万考生划分到这 901 个桶里。桶内的数据都是分数相同的考生，所以并不需要再进行排序。只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了 50 万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是 O(k)。</p><ul><li>平均时间复杂度：O(n + k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n + k)；</li><li>最佳时间复杂度：O(n + k)；</li><li>空间复杂度：O(k)；</li><li>稳定性：计数排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><h2 id="基数排序-radix-sort" tabindex="-1"><a class="header-anchor" href="#基数排序-radix-sort" aria-hidden="true">#</a> 基数排序（Radix sort）</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><ul><li>平均时间复杂度：O(n * k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n * k)；</li><li>最佳时间复杂度：O(n * k)；</li><li>空间复杂度：O(n + k)，需要额外的计数数组和结果数组；</li><li>稳定性：基数排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><p>上述三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>桶排序：每个桶存储一定范围的数值；</li><li>计数排序：每个桶只存储单一键值；</li><li>基数排序：根据键值的每位数字来分配桶；</li></ul>',72),x=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),j=t("h4",{id:"数组排序",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#数组排序","aria-hidden":"true"},"#"),s(" 数组排序")],-1),w=t("ul",null,[t("li",null,"冒泡排序")],-1),O=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),S=t("td",{style:{"text-align":"center"}},"剑指 Offer 45",-1),E={style:{"text-align":"left"}},I={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"},q=t("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},z=t("code",null,"贪心",-1),T=t("code",null,"字符串",-1),B=t("code",null,"排序",-1),N={style:{"text-align":"left"}},R=t("td",{style:{"text-align":"center"}},"283",-1),C={style:{"text-align":"left"}},D={href:"https://leetcode.com/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},H={style:{"text-align":"center"}},L={style:{"text-align":"left"}},V=t("code",null,"数组",-1),A=t("code",null,"双指针",-1),G={style:{"text-align":"left"}},P=t("ul",null,[t("li",null,"选择排序")],-1),U=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),J=t("td",{style:{"text-align":"center"}},"215",-1),K={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},X={style:{"text-align":"center"}},W={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),Z=t("code",null,"分治",-1),F=t("code",null,"快速选择",-1),$=t("code",null,"2+",-1),tt={style:{"text-align":"left"}},nt=t("ul",null,[t("li",null,"插入排序")],-1),st=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),et=t("td",{style:{"text-align":"center"}},"75",-1),at={style:{"text-align":"left"}},ot={href:"https://leetcode.com/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},lt={style:{"text-align":"center"}},ct={style:{"text-align":"left"}},pt=t("code",null,"数组",-1),it=t("code",null,"双指针",-1),dt=t("code",null,"排序",-1),rt={style:{"text-align":"left"}},ut=t("ul",null,[t("li",null,"希尔排序")],-1),_t=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),kt=t("td",{style:{"text-align":"center"}},"912",-1),ht={style:{"text-align":"left"}},gt={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},mt=t("td",{style:{"text-align":"center"}},null,-1),ft={style:{"text-align":"left"}},yt=t("code",null,"数组",-1),bt=t("code",null,"分治",-1),vt=t("code",null,"桶排序",-1),xt=t("code",null,"5+",-1),jt={style:{"text-align":"left"}},wt=t("td",{style:{"text-align":"center"}},"506",-1),Ot={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/relative-ranks",target:"_blank",rel:"noopener noreferrer"},Et={style:{"text-align":"center"}},It={style:{"text-align":"left"}},qt=t("code",null,"数组",-1),Mt=t("code",null,"排序",-1),zt=t("code",null,"堆（优先队列）",-1),Tt={style:{"text-align":"left"}},Bt=t("ul",null,[t("li",null,"归并排序")],-1),Nt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Rt=t("td",{style:{"text-align":"center"}},"912",-1),Ct={style:{"text-align":"left"}},Dt={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Ht=t("td",{style:{"text-align":"center"}},null,-1),Lt={style:{"text-align":"left"}},Vt=t("code",null,"数组",-1),At=t("code",null,"分治",-1),Gt=t("code",null,"桶排序",-1),Pt=t("code",null,"5+",-1),Ut={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"88",-1),Kt={style:{"text-align":"left"}},Qt={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"center"}},Wt={style:{"text-align":"left"}},Yt=t("code",null,"数组",-1),Zt=t("code",null,"双指针",-1),Ft=t("code",null,"排序",-1),$t={style:{"text-align":"left"}},tn=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),nn={style:{"text-align":"left"}},sn={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},en=t("td",{style:{"text-align":"center"}},null,-1),an={style:{"text-align":"left"}},on=t("code",null,"树状数组",-1),ln=t("code",null,"线段树",-1),cn=t("code",null,"数组",-1),pn=t("code",null,"4+",-1),dn={style:{"text-align":"left"}},rn=t("td",{style:{"text-align":"center"}},"315",-1),un={style:{"text-align":"left"}},_n={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},kn=t("td",{style:{"text-align":"center"}},null,-1),hn={style:{"text-align":"left"}},gn=t("code",null,"树状数组",-1),mn=t("code",null,"线段树",-1),fn=t("code",null,"数组",-1),yn=t("code",null,"4+",-1),bn={style:{"text-align":"left"}},vn=t("ul",null,[t("li",null,"快速排序")],-1),xn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),jn=t("td",{style:{"text-align":"center"}},"912",-1),wn={style:{"text-align":"left"}},On={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Sn=t("td",{style:{"text-align":"center"}},null,-1),En={style:{"text-align":"left"}},In=t("code",null,"数组",-1),qn=t("code",null,"分治",-1),Mn=t("code",null,"桶排序",-1),zn=t("code",null,"5+",-1),Tn={style:{"text-align":"left"}},Bn=t("td",{style:{"text-align":"center"}},"169",-1),Nn={style:{"text-align":"left"}},Rn={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},Cn={style:{"text-align":"center"}},Dn={style:{"text-align":"left"}},Hn=t("code",null,"数组",-1),Ln=t("code",null,"哈希表",-1),Vn=t("code",null,"分治",-1),An=t("code",null,"2+",-1),Gn={style:{"text-align":"left"}},Pn=t("ul",null,[t("li",null,"堆排序")],-1),Un=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Jn=t("td",{style:{"text-align":"center"}},"912",-1),Kn={style:{"text-align":"left"}},Qn={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Xn=t("td",{style:{"text-align":"center"}},null,-1),Wn={style:{"text-align":"left"}},Yn=t("code",null,"数组",-1),Zn=t("code",null,"分治",-1),Fn=t("code",null,"桶排序",-1),$n=t("code",null,"5+",-1),ts={style:{"text-align":"left"}},ns=t("td",{style:{"text-align":"center"}},"215",-1),ss={style:{"text-align":"left"}},es={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},as={style:{"text-align":"center"}},os={style:{"text-align":"left"}},ls=t("code",null,"数组",-1),cs=t("code",null,"分治",-1),ps=t("code",null,"快速选择",-1),is=t("code",null,"2+",-1),ds={style:{"text-align":"left"}},rs=t("td",{style:{"text-align":"center"}},"剑指 Offer 40",-1),us={style:{"text-align":"left"}},_s={href:"https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof",target:"_blank",rel:"noopener noreferrer"},ks=t("td",{style:{"text-align":"center"}},null,-1),hs={style:{"text-align":"left"}},gs=t("code",null,"数组",-1),ms=t("code",null,"分治",-1),fs=t("code",null,"快速选择",-1),ys=t("code",null,"2+",-1),bs={style:{"text-align":"left"}},vs=t("ul",null,[t("li",null,"计数排序")],-1),xs=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),js=t("td",{style:{"text-align":"center"}},"912",-1),ws={style:{"text-align":"left"}},Os={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Ss=t("td",{style:{"text-align":"center"}},null,-1),Es={style:{"text-align":"left"}},Is=t("code",null,"数组",-1),qs=t("code",null,"分治",-1),Ms=t("code",null,"桶排序",-1),zs=t("code",null,"5+",-1),Ts={style:{"text-align":"left"}},Bs=t("td",{style:{"text-align":"center"}},"1122",-1),Ns={style:{"text-align":"left"}},Rs={href:"https://leetcode.com/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},Cs=t("td",{style:{"text-align":"center"}},null,-1),Ds={style:{"text-align":"left"}},Hs=t("code",null,"数组",-1),Ls=t("code",null,"哈希表",-1),Vs=t("code",null,"计数排序",-1),As=t("code",null,"1+",-1),Gs={style:{"text-align":"left"}},Ps=t("ul",null,[t("li",null,"桶排序")],-1),Us=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Js=t("td",{style:{"text-align":"center"}},"912",-1),Ks={style:{"text-align":"left"}},Qs={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Xs=t("td",{style:{"text-align":"center"}},null,-1),Ws={style:{"text-align":"left"}},Ys=t("code",null,"数组",-1),Zs=t("code",null,"分治",-1),Fs=t("code",null,"桶排序",-1),$s=t("code",null,"5+",-1),te={style:{"text-align":"left"}},ne=t("td",{style:{"text-align":"center"}},"220",-1),se={style:{"text-align":"left"}},ee={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},ae=t("td",{style:{"text-align":"center"}},null,-1),oe={style:{"text-align":"left"}},le=t("code",null,"数组",-1),ce=t("code",null,"桶排序",-1),pe=t("code",null,"有序集合",-1),ie=t("code",null,"2+",-1),de={style:{"text-align":"left"}},re=t("td",{style:{"text-align":"center"}},"164",-1),ue={style:{"text-align":"left"}},_e={href:"https://leetcode.com/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},ke=t("td",{style:{"text-align":"center"}},null,-1),he={style:{"text-align":"left"}},ge=t("code",null,"数组",-1),me=t("code",null,"桶排序",-1),fe=t("code",null,"基数排序",-1),ye=t("code",null,"1+",-1),be={style:{"text-align":"left"}},ve=t("ul",null,[t("li",null,"基数排序")],-1),xe=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),je=t("td",{style:{"text-align":"center"}},"164",-1),we={style:{"text-align":"left"}},Oe={href:"https://leetcode.com/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},Se=t("td",{style:{"text-align":"center"}},null,-1),Ee={style:{"text-align":"left"}},Ie=t("code",null,"数组",-1),qe=t("code",null,"桶排序",-1),Me=t("code",null,"基数排序",-1),ze=t("code",null,"1+",-1),Te={style:{"text-align":"left"}},Be=t("td",{style:{"text-align":"center"}},"561",-1),Ne={style:{"text-align":"left"}},Re={href:"https://leetcode.com/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},Ce=t("td",{style:{"text-align":"center"}},null,-1),De={style:{"text-align":"left"}},He=t("code",null,"贪心",-1),Le=t("code",null,"数组",-1),Ve=t("code",null,"计数排序",-1),Ae=t("code",null,"1+",-1),Ge={style:{"text-align":"left"}},Pe=t("ul",null,[t("li",null,"其他排序")],-1),Ue=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Je=t("td",{style:{"text-align":"center"}},"217",-1),Ke={style:{"text-align":"left"}},Qe={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Xe={style:{"text-align":"center"}},We={style:{"text-align":"left"}},Ye=t("code",null,"数组",-1),Ze=t("code",null,"哈希表",-1),Fe=t("code",null,"排序",-1),$e={style:{"text-align":"left"}},ta=t("td",{style:{"text-align":"center"}},"136",-1),na={style:{"text-align":"left"}},sa={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},ea={style:{"text-align":"center"}},aa={style:{"text-align":"left"}},oa=t("code",null,"位运算",-1),la=t("code",null,"数组",-1),ca={style:{"text-align":"left"}},pa=t("td",{style:{"text-align":"center"}},"56",-1),ia={style:{"text-align":"left"}},da={href:"https://leetcode.com/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},ra={style:{"text-align":"center"}},ua={style:{"text-align":"left"}},_a=t("code",null,"数组",-1),ka=t("code",null,"排序",-1),ha={style:{"text-align":"left"}},ga=t("td",{style:{"text-align":"center"}},"179",-1),ma={style:{"text-align":"left"}},fa={href:"https://leetcode.com/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},ya=t("td",{style:{"text-align":"center"}},null,-1),ba={style:{"text-align":"left"}},va=t("code",null,"贪心",-1),xa=t("code",null,"数组",-1),ja=t("code",null,"字符串",-1),wa=t("code",null,"1+",-1),Oa={style:{"text-align":"left"}},Sa=t("td",{style:{"text-align":"center"}},"384",-1),Ea={style:{"text-align":"left"}},Ia={href:"https://leetcode.com/problems/shuffle-an-array",target:"_blank",rel:"noopener noreferrer"},qa=t("td",{style:{"text-align":"center"}},null,-1),Ma={style:{"text-align":"left"}},za=t("code",null,"数组",-1),Ta=t("code",null,"数学",-1),Ba=t("code",null,"随机化",-1),Na={style:{"text-align":"left"}},Ra=t("td",{style:{"text-align":"center"}},"剑指 Offer 45",-1),Ca={style:{"text-align":"left"}},Da={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"},Ha=t("td",{style:{"text-align":"center"}},null,-1),La={style:{"text-align":"left"}},Va=t("code",null,"贪心",-1),Aa=t("code",null,"字符串",-1),Ga=t("code",null,"排序",-1),Pa={style:{"text-align":"left"}};function Ua(Ja,Ka){const o=p("ExternalLinkIcon"),a=p("RouterLink"),l=p("font");return d(),r("div",null,[v,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),x,j,w,c(" prettier-ignore "),t("table",null,[O,t("tbody",null,[t("tr",null,[S,t("td",E,[t("a",I,[s("把数组排成最小的数"),n(o)])]),q,t("td",M,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[z]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[T]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[B]),_:1})]),t("td",N,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[R,t("td",C,[t("a",D,[s("移动零"),n(o)])]),t("td",H,[n(a,{to:"/leetcode-js/problem/0283.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",L,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[V]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[A]),_:1})]),t("td",G,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])]),P,c(" prettier-ignore "),t("table",null,[U,t("tbody",null,[t("tr",null,[J,t("td",K,[t("a",Q,[s("数组中的第K个最大元素"),n(o)])]),t("td",X,[n(a,{to:"/leetcode-js/problem/0215.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",W,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Y]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[Z]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/quickselect.html"},{default:e(()=>[F]),_:1}),s(),$]),t("td",tt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])]),nt,c(" prettier-ignore "),t("table",null,[st,t("tbody",null,[t("tr",null,[et,t("td",at,[t("a",ot,[s("颜色分类"),n(o)])]),t("td",lt,[n(a,{to:"/leetcode-js/problem/0075.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",ct,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[pt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[it]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[dt]),_:1})]),t("td",rt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])]),ut,c(" prettier-ignore "),t("table",null,[_t,t("tbody",null,[t("tr",null,[kt,t("td",ht,[t("a",gt,[s("排序数组"),n(o)])]),mt,t("td",ft,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[yt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[bt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[vt]),_:1}),s(),xt]),t("td",jt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[wt,t("td",Ot,[t("a",St,[s("相对名次"),n(o)])]),t("td",Et,[n(a,{to:"/leetcode-js/problem/0506.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",It,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[qt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[Mt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/heap-priority-queue.html"},{default:e(()=>[zt]),_:1})]),t("td",Tt,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])]),Bt,c(" prettier-ignore "),t("table",null,[Nt,t("tbody",null,[t("tr",null,[Rt,t("td",Ct,[t("a",Dt,[s("排序数组"),n(o)])]),Ht,t("td",Lt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Vt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[At]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[Gt]),_:1}),s(),Pt]),t("td",Ut,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Jt,t("td",Kt,[t("a",Qt,[s("合并两个有序数组"),n(o)])]),t("td",Xt,[n(a,{to:"/leetcode-js/problem/0088.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",Wt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Yt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[Zt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[Ft]),_:1})]),t("td",$t,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),t("tr",null,[tn,t("td",nn,[t("a",sn,[s("数组中的逆序对"),n(o)])]),en,t("td",an,[n(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[on]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[ln]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[cn]),_:1}),s(),pn]),t("td",dn,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),t("tr",null,[rn,t("td",un,[t("a",_n,[s("计算右侧小于当前元素的个数"),n(o)])]),kn,t("td",hn,[n(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[gn]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[mn]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[fn]),_:1}),s(),yn]),t("td",bn,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])])])]),vn,c(" prettier-ignore "),t("table",null,[xn,t("tbody",null,[t("tr",null,[jn,t("td",wn,[t("a",On,[s("排序数组"),n(o)])]),Sn,t("td",En,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[In]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[qn]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[Mn]),_:1}),s(),zn]),t("td",Tn,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Bn,t("td",Nn,[t("a",Rn,[s("多数元素"),n(o)])]),t("td",Cn,[n(a,{to:"/leetcode-js/problem/0169.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",Dn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Hn]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[Ln]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[Vn]),_:1}),s(),An]),t("td",Gn,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])]),Pn,c(" prettier-ignore "),t("table",null,[Un,t("tbody",null,[t("tr",null,[Jn,t("td",Kn,[t("a",Qn,[s("排序数组"),n(o)])]),Xn,t("td",Wn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Yn]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[Zn]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[Fn]),_:1}),s(),$n]),t("td",ts,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[ns,t("td",ss,[t("a",es,[s("数组中的第K个最大元素"),n(o)])]),t("td",as,[n(a,{to:"/leetcode-js/problem/0215.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",os,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[ls]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[cs]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/quickselect.html"},{default:e(()=>[ps]),_:1}),s(),is]),t("td",ds,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[rs,t("td",us,[t("a",_s,[s("最小的k个数"),n(o)])]),ks,t("td",hs,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[gs]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[ms]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/quickselect.html"},{default:e(()=>[fs]),_:1}),s(),ys]),t("td",bs,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])]),vs,c(" prettier-ignore "),t("table",null,[xs,t("tbody",null,[t("tr",null,[js,t("td",ws,[t("a",Os,[s("排序数组"),n(o)])]),Ss,t("td",Es,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Is]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[qs]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[Ms]),_:1}),s(),zs]),t("td",Ts,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Bs,t("td",Ns,[t("a",Rs,[s("数组的相对排序"),n(o)])]),Cs,t("td",Ds,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Hs]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[Ls]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/counting-sort.html"},{default:e(()=>[Vs]),_:1}),s(),As]),t("td",Gs,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])]),Ps,c(" prettier-ignore "),t("table",null,[Us,t("tbody",null,[t("tr",null,[Js,t("td",Ks,[t("a",Qs,[s("排序数组"),n(o)])]),Xs,t("td",Ws,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ys]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:e(()=>[Zs]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[Fs]),_:1}),s(),$s]),t("td",te,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[ne,t("td",se,[t("a",ee,[s("存在重复元素 III"),n(o)])]),ae,t("td",oe,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[le]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[ce]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/ordered-set.html"},{default:e(()=>[pe]),_:1}),s(),ie]),t("td",de,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),t("tr",null,[re,t("td",ue,[t("a",_e,[s("最大间距"),n(o)])]),ke,t("td",he,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[ge]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[me]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/radix-sort.html"},{default:e(()=>[fe]),_:1}),s(),ye]),t("td",be,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])]),ve,c(" prettier-ignore "),t("table",null,[xe,t("tbody",null,[t("tr",null,[je,t("td",we,[t("a",Oe,[s("最大间距"),n(o)])]),Se,t("td",Ee,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ie]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/bucket-sort.html"},{default:e(()=>[qe]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/radix-sort.html"},{default:e(()=>[Me]),_:1}),s(),ze]),t("td",Te,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Be,t("td",Ne,[t("a",Re,[s("数组拆分"),n(o)])]),Ce,t("td",De,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[He]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Le]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/counting-sort.html"},{default:e(()=>[Ve]),_:1}),s(),Ae]),t("td",Ge,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])]),Pe,c(" prettier-ignore "),t("table",null,[Ue,t("tbody",null,[t("tr",null,[Je,t("td",Ke,[t("a",Qe,[s("存在重复元素"),n(o)])]),t("td",Xe,[n(a,{to:"/leetcode-js/problem/0217.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",We,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ye]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[Ze]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[Fe]),_:1})]),t("td",$e,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),t("tr",null,[ta,t("td",na,[t("a",sa,[s("只出现一次的数字"),n(o)])]),t("td",ea,[n(a,{to:"/leetcode-js/problem/0136.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",aa,[n(a,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:e(()=>[oa]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[la]),_:1})]),t("td",ca,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),t("tr",null,[pa,t("td",ia,[t("a",da,[s("合并区间"),n(o)])]),t("td",ra,[n(a,{to:"/leetcode-js/problem/0056.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",ua,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[_a]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[ka]),_:1})]),t("td",ha,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[ga,t("td",ma,[t("a",fa,[s("最大数"),n(o)])]),ya,t("td",ba,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[va]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[xa]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[ja]),_:1}),s(),wa]),t("td",Oa,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Sa,t("td",Ea,[t("a",Ia,[s("打乱数组"),n(o)])]),qa,t("td",Ma,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[za]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:e(()=>[Ta]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/randomized.html"},{default:e(()=>[Ba]),_:1})]),t("td",Na,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Ra,t("td",Ca,[t("a",Da,[s("把数组排成最小的数"),n(o)])]),Ha,t("td",La,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[Va]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[Aa]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[Ga]),_:1})]),t("td",Pa,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const Xa=i(b,[["render",Ua],["__file","sort.html.vue"]]);export{Xa as default};
