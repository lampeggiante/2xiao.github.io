import{_ as i,r as c,o as d,c as r,a as e,b as n,d as t,w as s,f as p,e as u}from"./app-mvY9N9Pc.js";const _={},h={id:"_203-移除链表元素",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#_203-移除链表元素","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/remove-linked-list-elements",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"递归",-1),g=e("code",null,"链表",-1),v={href:"https://leetcode.com/problems/remove-linked-list-elements",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return <em>the new head</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [1,2,6,3,4,5,6], val = 6</p><p>Output: [1,2,3,4,5]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: head = [], val = 1</p><p>Output: []</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: head = [7,7,7,7], val = 7</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is in the range <code>[0, 10^4]</code>.</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>删除链表中所有指定值的结点。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>按照题意做即可。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">val</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">removeElements</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> prev <span class="token operator">=</span> res<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),x=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),w=e("td",{style:{"text-align":"center"}},"27",-1),E={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/remove-element",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},L={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0027",target:"_blank",rel:"noopener noreferrer"},j={style:{"text-align":"left"}},q=e("code",null,"数组",-1),C=e("code",null,"双指针",-1),V={style:{"text-align":"left"}},M=e("td",{style:{"text-align":"center"}},"237",-1),B={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/delete-node-in-a-linked-list",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},T={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0237",target:"_blank",rel:"noopener noreferrer"},z={style:{"text-align":"left"}},G=e("code",null,"链表",-1),S={style:{"text-align":"left"}},A=e("td",{style:{"text-align":"center"}},"2095",-1),D={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list",target:"_blank",rel:"noopener noreferrer"},H=e("td",{style:{"text-align":"center"}},null,-1),J={style:{"text-align":"left"}},K=e("code",null,"链表",-1),P=e("code",null,"双指针",-1),Q={style:{"text-align":"left"}},U=e("td",{style:{"text-align":"center"}},"3217",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/delete-nodes-from-linked-list-present-in-array",target:"_blank",rel:"noopener noreferrer"},Y=e("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=e("code",null,"数组",-1),ee=e("code",null,"哈希表",-1),te=e("code",null,"链表",-1),ne={style:{"text-align":"left"}},se=e("td",{style:{"text-align":"center"}},"3263",-1),ae={style:{"text-align":"left"}},oe={href:"https://leetcode.com/problems/convert-doubly-linked-list-to-array-i",target:"_blank",rel:"noopener noreferrer"},le=e("td",{style:{"text-align":"center"}},null,-1),ce={style:{"text-align":"left"}},ie=e("code",null,"数组",-1),de=e("code",null,"链表",-1),re=e("code",null,"双向链表",-1),pe={style:{"text-align":"left"}},ue=e("td",{style:{"text-align":"center"}},"3294",-1),_e={style:{"text-align":"left"}},he={href:"https://leetcode.com/problems/convert-doubly-linked-list-to-array-ii",target:"_blank",rel:"noopener noreferrer"},ke=e("td",{style:{"text-align":"center"}},null,-1),me={style:{"text-align":"left"}},fe=e("code",null,"数组",-1),ge=e("code",null,"链表",-1),ve=e("code",null,"双向链表",-1),be={style:{"text-align":"left"}};function ye(xe,we){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return d(),r("div",null,[e("h1",h,[k,n(),e("a",m,[n("203. 移除链表元素"),t(o)])]),e("p",null,[n("🟢 "),t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),t(a,{to:"/leetcode/outline/tag/recursion.html"},{default:s(()=>[f]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[g]),_:1}),n("  🔗 "),e("a",v,[b,t(o)])]),y,p(" prettier-ignore "),e("table",null,[x,e("tbody",null,[e("tr",null,[w,e("td",E,[e("a",N,[n("移除元素"),t(o)])]),e("td",I,[e("a",L,[n("[✓]"),t(o)])]),e("td",j,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[q]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[C]),_:1})]),e("td",V,[t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),e("tr",null,[M,e("td",B,[e("a",O,[n("删除链表中的节点"),t(o)])]),e("td",R,[e("a",T,[n("[✓]"),t(o)])]),e("td",z,[t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[G]),_:1})]),e("td",S,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),e("tr",null,[A,e("td",D,[e("a",F,[n("删除链表的中间节点"),t(o)])]),H,e("td",J,[t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[K]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[P]),_:1})]),e("td",Q,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),e("tr",null,[U,e("td",W,[e("a",X,[n("从链表中移除在数组中存在的节点"),t(o)])]),Y,e("td",Z,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[$]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[ee]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[te]),_:1})]),e("td",ne,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),e("tr",null,[se,e("td",ae,[e("a",oe,[n("将双链表转换为数组 I"),t(o)])]),le,e("td",ce,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[ie]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[de]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/doubly-linked-list.html"},{default:s(()=>[re]),_:1})]),e("td",pe,[t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),e("tr",null,[ue,e("td",_e,[e("a",he,[n("将双链表转换为数组 II"),t(o)])]),ke,e("td",me,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[fe]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[ge]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/doubly-linked-list.html"},{default:s(()=>[ve]),_:1})]),e("td",be,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])])])])])}const Ne=i(_,[["render",ye],["__file","0203.html.vue"]]);export{Ne as default};
