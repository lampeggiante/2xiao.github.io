import{_ as i,r as c,o as r,c as _,f as a,a as t,b as l,d as e,w as o,e as h}from"./app-qrCIIj1V.js";const u={},f=h(`<h1 id="_3-2-递归算法" tabindex="-1"><a class="header-anchor" href="#_3-2-递归算法" aria-hidden="true">#</a> 3.2 递归算法</h1><p>递归是一种应用非常广泛的算法，很多数据结构和算法的编码实现都要用到递归，比如 DFS 深度优先搜索、前中后序二叉树遍历等等。</p><h4 id="递归需要满足的三个条件" tabindex="-1"><a class="header-anchor" href="#递归需要满足的三个条件" aria-hidden="true">#</a> 递归需要满足的三个条件</h4><ol><li>一个问题的解可以分解为几个子问题的解</li><li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</li><li>存在递归终止条件</li></ol><h4 id="写递归代码的关键" tabindex="-1"><a class="header-anchor" href="#写递归代码的关键" aria-hidden="true">#</a> 写递归代码的关键</h4><ol><li>找到将大问题分解为小问题的规律，并且基于此写出<strong>递推公式</strong>，再推敲<strong>终止条件</strong>，最后将递推公式和终止条件翻译成代码。</li><li>遇到递归，就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 终止条件</span>
	<span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 递推公式</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的递归代码都可以改写为迭代循环的非递归写法。</p><h4 id="弊端" tabindex="-1"><a class="header-anchor" href="#弊端" aria-hidden="true">#</a> 弊端</h4><ol><li>警惕栈溢出：可以声明一个全局变量来控制递归的深度，从而避免栈溢出。</li><li>警惕重复计算：通过某种数据结构来保存已经求解过的值，从而避免重复计算。</li></ol>`,10),m=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),l(" 相关题目")],-1),g=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),p=t("td",{style:{"text-align":"center"}},"344",-1),y={style:{"text-align":"left"}},x={href:"https://leetcode.com/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},b={style:{"text-align":"center"}},k={style:{"text-align":"left"}},j=t("code",null,"双指针",-1),v=t("code",null,"字符串",-1),E={style:{"text-align":"left"}},w=t("td",{style:{"text-align":"center"}},"24",-1),I={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},z={style:{"text-align":"left"}},S=t("code",null,"递归",-1),D=t("code",null,"链表",-1),L={style:{"text-align":"left"}},M=t("td",{style:{"text-align":"center"}},"118",-1),R={style:{"text-align":"left"}},V={href:"https://leetcode.com/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"center"}},B={style:{"text-align":"left"}},C=t("code",null,"数组",-1),O=t("code",null,"动态规划",-1),P={style:{"text-align":"left"}},q=t("td",{style:{"text-align":"center"}},"119",-1),H={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},F=t("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},G=t("code",null,"数组",-1),J=t("code",null,"动态规划",-1),Q={style:{"text-align":"left"}},W=t("td",{style:{"text-align":"center"}},"206",-1),X={style:{"text-align":"left"}},Y={href:"https://leetcode.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},Z={style:{"text-align":"center"}},$={style:{"text-align":"left"}},tt=t("code",null,"递归",-1),et=t("code",null,"链表",-1),lt={style:{"text-align":"left"}},ot=t("td",{style:{"text-align":"center"}},"92",-1),nt={style:{"text-align":"left"}},st={href:"https://leetcode.com/problems/reverse-linked-list-ii",target:"_blank",rel:"noopener noreferrer"},dt={style:{"text-align":"center"}},at={style:{"text-align":"left"}},ct=t("code",null,"链表",-1),it={style:{"text-align":"left"}},rt=t("td",{style:{"text-align":"center"}},"21",-1),_t={style:{"text-align":"left"}},ht={href:"https://leetcode.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},ut={style:{"text-align":"center"}},ft={style:{"text-align":"left"}},mt=t("code",null,"递归",-1),gt=t("code",null,"链表",-1),pt={style:{"text-align":"left"}},yt=t("td",{style:{"text-align":"center"}},"509",-1),xt={style:{"text-align":"left"}},bt={href:"https://leetcode.com/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"},kt={style:{"text-align":"center"}},jt={style:{"text-align":"left"}},vt=t("code",null,"递归",-1),Et=t("code",null,"记忆化搜索",-1),wt=t("code",null,"数学",-1),It=t("code",null,"1+",-1),Tt={style:{"text-align":"left"}},Nt=t("td",{style:{"text-align":"center"}},"70",-1),zt={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},Dt={style:{"text-align":"center"}},Lt={style:{"text-align":"left"}},Mt=t("code",null,"记忆化搜索",-1),Rt=t("code",null,"数学",-1),Vt=t("code",null,"动态规划",-1),At={style:{"text-align":"left"}},Bt=t("td",{style:{"text-align":"center"}},"104",-1),Ct={style:{"text-align":"left"}},Ot={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Pt={style:{"text-align":"center"}},qt={style:{"text-align":"left"}},Ht=t("code",null,"树",-1),Ut=t("code",null,"深度优先搜索",-1),Ft=t("code",null,"广度优先搜索",-1),Kt=t("code",null,"1+",-1),Gt={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"124",-1),Qt={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"center"}},Yt={style:{"text-align":"left"}},Zt=t("code",null,"树",-1),$t=t("code",null,"深度优先搜索",-1),te=t("code",null,"动态规划",-1),ee=t("code",null,"1+",-1),le={style:{"text-align":"left"}},oe=t("td",{style:{"text-align":"center"}},"226",-1),ne={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},de={style:{"text-align":"center"}},ae={style:{"text-align":"left"}},ce=t("code",null,"树",-1),ie=t("code",null,"深度优先搜索",-1),re=t("code",null,"广度优先搜索",-1),_e=t("code",null,"1+",-1),he={style:{"text-align":"left"}},ue=t("td",{style:{"text-align":"center"}},"50",-1),fe={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},ge={style:{"text-align":"center"}},pe={style:{"text-align":"left"}},ye=t("code",null,"递归",-1),xe=t("code",null,"数学",-1),be={style:{"text-align":"left"}},ke=t("td",{style:{"text-align":"center"}},"779",-1),je={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/k-th-symbol-in-grammar",target:"_blank",rel:"noopener noreferrer"},Ee=t("td",{style:{"text-align":"center"}},null,-1),we={style:{"text-align":"left"}},Ie=t("code",null,"位运算",-1),Te=t("code",null,"递归",-1),Ne=t("code",null,"数学",-1),ze={style:{"text-align":"left"}},Se=t("td",{style:{"text-align":"center"}},"95",-1),De={style:{"text-align":"left"}},Le={href:"https://leetcode.com/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},Me={style:{"text-align":"center"}},Re={style:{"text-align":"left"}},Ve=t("code",null,"树",-1),Ae=t("code",null,"二叉搜索树",-1),Be=t("code",null,"动态规划",-1),Ce=t("code",null,"2+",-1),Oe={style:{"text-align":"left"}},Pe=t("td",{style:{"text-align":"center"}},"剑指 Offer 62",-1),qe={style:{"text-align":"left"}},He={href:"https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"},Ue={style:{"text-align":"center"}},Fe={style:{"text-align":"left"}},Ke=t("code",null,"递归",-1),Ge=t("code",null,"数学",-1),Je={style:{"text-align":"left"}};function Qe(We,Xe){const s=c("ExternalLinkIcon"),n=c("RouterLink"),d=c("font");return r(),_("div",null,[f,a(" START TABLE "),a(" Please keep comment here to allow auto update "),a(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),m,a(" prettier-ignore "),t("table",null,[g,t("tbody",null,[t("tr",null,[p,t("td",y,[t("a",x,[l("反转字符串"),e(s)])]),t("td",b,[e(n,{to:"/leetcode-js/problem/0344.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",k,[e(n,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/string.html"},{default:o(()=>[v]),_:1})]),t("td",E,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[w,t("td",I,[t("a",T,[l("两两交换链表中的节点"),e(s)])]),t("td",N,[e(n,{to:"/leetcode-js/problem/0024.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",z,[e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:o(()=>[D]),_:1})]),t("td",L,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[M,t("td",R,[t("a",V,[l("杨辉三角"),e(s)])]),t("td",A,[e(n,{to:"/leetcode-js/problem/0118.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",B,[e(n,{to:"/leetcode-js/outline/tag/array.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:o(()=>[O]),_:1})]),t("td",P,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[q,t("td",H,[t("a",U,[l("杨辉三角 II"),e(s)])]),F,t("td",K,[e(n,{to:"/leetcode-js/outline/tag/array.html"},{default:o(()=>[G]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:o(()=>[J]),_:1})]),t("td",Q,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[W,t("td",X,[t("a",Y,[l("反转链表"),e(s)])]),t("td",Z,[e(n,{to:"/leetcode-js/problem/0206.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",$,[e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:o(()=>[et]),_:1})]),t("td",lt,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[ot,t("td",nt,[t("a",st,[l("反转链表 II"),e(s)])]),t("td",dt,[e(n,{to:"/leetcode-js/problem/0092.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",at,[e(n,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:o(()=>[ct]),_:1})]),t("td",it,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[rt,t("td",_t,[t("a",ht,[l("合并两个有序链表"),e(s)])]),t("td",ut,[e(n,{to:"/leetcode-js/problem/0021.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",ft,[e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[mt]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:o(()=>[gt]),_:1})]),t("td",pt,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[yt,t("td",xt,[t("a",bt,[l("斐波那契数"),e(s)])]),t("td",kt,[e(n,{to:"/leetcode-js/problem/0509.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",jt,[e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/memoization.html"},{default:o(()=>[Et]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/math.html"},{default:o(()=>[wt]),_:1}),l(),It]),t("td",Tt,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Nt,t("td",zt,[t("a",St,[l("爬楼梯"),e(s)])]),t("td",Dt,[e(n,{to:"/leetcode-js/problem/0070.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Lt,[e(n,{to:"/leetcode-js/outline/tag/memoization.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/math.html"},{default:o(()=>[Rt]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:o(()=>[Vt]),_:1})]),t("td",At,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Bt,t("td",Ct,[t("a",Ot,[l("二叉树的最大深度"),e(s)])]),t("td",Pt,[e(n,{to:"/leetcode-js/problem/0104.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",qt,[e(n,{to:"/leetcode-js/outline/tag/tree.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:o(()=>[Ut]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:o(()=>[Ft]),_:1}),l(),Kt]),t("td",Gt,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Jt,t("td",Qt,[t("a",Wt,[l("二叉树中的最大路径和"),e(s)])]),t("td",Xt,[e(n,{to:"/leetcode-js/problem/0124.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Yt,[e(n,{to:"/leetcode-js/outline/tag/tree.html"},{default:o(()=>[Zt]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:o(()=>[$t]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:o(()=>[te]),_:1}),l(),ee]),t("td",le,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[oe,t("td",ne,[t("a",se,[l("翻转二叉树"),e(s)])]),t("td",de,[e(n,{to:"/leetcode-js/problem/0226.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",ae,[e(n,{to:"/leetcode-js/outline/tag/tree.html"},{default:o(()=>[ce]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:o(()=>[ie]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:o(()=>[re]),_:1}),l(),_e]),t("td",he,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[ue,t("td",fe,[t("a",me,[l("Pow(x, n)"),e(s)])]),t("td",ge,[e(n,{to:"/leetcode-js/problem/0050.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",pe,[e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[ye]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/math.html"},{default:o(()=>[xe]),_:1})]),t("td",be,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ke,t("td",je,[t("a",ve,[l("第K个语法符号"),e(s)])]),Ee,t("td",we,[e(n,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:o(()=>[Ie]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[Te]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/math.html"},{default:o(()=>[Ne]),_:1})]),t("td",ze,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Se,t("td",De,[t("a",Le,[l("不同的二叉搜索树 II"),e(s)])]),t("td",Me,[e(n,{to:"/leetcode-js/problem/0095.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Re,[e(n,{to:"/leetcode-js/outline/tag/tree.html"},{default:o(()=>[Ve]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:o(()=>[Ae]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:o(()=>[Be]),_:1}),l(),Ce]),t("td",Oe,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Pe,t("td",qe,[t("a",He,[l("圆圈中最后剩下的数字"),e(s)])]),t("td",Ue,[e(n,{to:"/leetcode-js/problem/jz_offer_62_1.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Fe,[e(n,{to:"/leetcode-js/outline/tag/recursion.html"},{default:o(()=>[Ke]),_:1}),l(),e(n,{to:"/leetcode-js/outline/tag/math.html"},{default:o(()=>[Ge]),_:1})]),t("td",Je,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])])])])])}const Ze=i(u,[["render",Qe],["__file","recursion.html.vue"]]);export{Ze as default};
