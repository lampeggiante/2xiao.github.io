import{_ as r,r as i,o as u,c as d,a as n,b as s,d as o,w as e,e as c}from"./app-b4s7f53x.js";const k="/assets/react-4-KdX66W_G.png",m="/assets/react-5-DFOqdfQK.png",b={},v=n("h1",{id:"_4-实现更新机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-实现更新机制","aria-hidden":"true"},"#"),s(" 4. 实现更新机制")],-1),w={class:"hint-container info"},g=n("p",{class:"hint-container-title"},"摘要",-1),y=n("ul",null,[n("li",null,"React 更新流程"),n("li",null,"实现 UpdateQueue"),n("li",null,"实现触发更新")],-1),h={href:"https://github.com/2xiao/my-react/tree/v1.4",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"git tag v1.4",-1),R=c('<h2 id="_1-react-更新流程" tabindex="-1"><a class="header-anchor" href="#_1-react-更新流程" aria-hidden="true">#</a> 1. React 更新流程</h2><p>React 中的更新流程大致可以分为以下几个阶段：</p><ol><li><p><strong>触发更新（Update Trigger）：</strong> 更新可以由组件的状态变化、属性变化、父组件的重新渲染、用户事件等触发，如：</p><ul><li>创建 React 应用的根对象 <code>ReactDOM.creatRoot().render()</code>；</li><li>类组件 <code>this.setState()</code>；</li><li>函数组件 <code>useState useEffect</code>；</li></ul></li><li><p><strong>调度阶段（Schedule Phase）：</strong> 调度器根据更新任务的优先级，将更新任务添加到相应的更新队列中，这个阶段决定了何时以及以何种优先级执行更新任务。</p></li><li><p><strong>协调阶段（Reconciliation Phase）：</strong> 也可称为 Render 阶段， <code>Reconciler</code> 负责构建 Fiber 树，处理新旧虚拟 DOM 树之间的差异，生成更新计划，确定需要进行的操作。</p></li><li><p><strong>提交阶段（Commit Phase）：</strong> 提交阶段将更新同步到实际的 DOM 中，React 执行 DOM 操作，例如创建、更新或删除 DOM 元素，反映组件树的最新状态。</p></li></ol><h2 id="_2-实现-updatequeue" tabindex="-1"><a class="header-anchor" href="#_2-实现-updatequeue" aria-hidden="true">#</a> 2. 实现 UpdateQueue</h2><p>为了实现上述更新流程，首先需要定义两个数据结构：<code>Update</code> 和 <code>UpdateQueue</code>，它们一起组成了 React 中管理组件状态更新的机制。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="update-更新" tabindex="-1"><a class="header-anchor" href="#update-更新" aria-hidden="true">#</a> Update（更新）</h4><ul><li><code>Update</code> 表示对组件状态的一次更新操作。</li><li>当组件状态发生变化时（例如由 <code>setState</code> 触发），React 会创建一个 <code>Update</code> 对象，其中包含了新的状态或者状态的更新部分。</li><li><code>Update</code> 对象描述了如何修改组件的状态，如添加新的状态、更新现有的状态、删除状态等，以及与此更新相关的一些元数据，如优先级等。</li><li>Update 对象记录了组件状态的变化，但实际的状态更新并不会立即执行，而是会被添加到更新队列中等待处理。</li></ul><h4 id="updatequeue-更新队列" tabindex="-1"><a class="header-anchor" href="#updatequeue-更新队列" aria-hidden="true">#</a> UpdateQueue（更新队列）</h4><ul><li><code>UpdateQueue</code> 是一个队列数据结构，用于存储组件的更新操作。</li><li>当组件的状态发生变化时，会生成一个新的 <code>Update</code> 对象，并将其添加到组件的 <code>UpdateQueue</code> 中。</li><li><code>UpdateQueue</code> 管理着组件的状态更新顺序，确保更新操作能够按照正确的顺序和优先级被应用到组件上。</li><li>更新队列通常是以链表的形式实现的，每个 Update 对象都链接到下一个更新对象，形成一个更新链表。在 React 的更新过程中，会遍历更新队列，并根据其中的更新操作来更新组件的状态以及更新 DOM。</li></ul><p>在 <code>packages/react-reconciler/src/</code> 目录下新建 <code>updateQueue.ts</code> 文件：</p>',11),_=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/updateQueue.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Action "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'shared/ReactTypes'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Update "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./fiberFlags'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 定义 Update 数据结构"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},[s("Update"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
	action`),n("span",{class:"token operator"},":"),s(" Action"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 定义 UpdateQueue 数据结构"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},[s("UpdateQueue"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
	shared`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
		pending`),n("span",{class:"token operator"},":"),s(" Update"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 创建 Update 实例的方法"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" createUpdate "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("action"),n("span",{class:"token operator"},":"),s(" Action"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Update"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
		action
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 创建 UpdateQueue 实例的方法"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" createUpdateQueue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" UpdateQueue"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
		shared`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
			pending`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 将 Update 添加到 UpdateQueue 中的方法"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" enqueueUpdate "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s(`
	updateQueue`),n("span",{class:"token operator"},":"),s(" UpdateQueue"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
	update`),n("span",{class:"token operator"},":"),s(" Update"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	updateQueue`),n("span",{class:"token punctuation"},"."),s("shared"),n("span",{class:"token punctuation"},"."),s("pending "),n("span",{class:"token operator"},"="),s(" update"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 从 UpdateQueue 中消费 Update 的方法"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" processUpdateQueue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s(`
	baseState`),n("span",{class:"token operator"},":"),s(" State"),n("span",{class:"token punctuation"},","),s(`
	pendingUpdate`),n("span",{class:"token operator"},":"),s(" Update"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),s(`
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" memoizedState"),n("span",{class:"token operator"},":"),s(" State "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" result"),n("span",{class:"token operator"},":"),s(" ReturnType"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"typeof"),s(" processUpdateQueue"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
		memoizedState`),n("span",{class:"token operator"},":"),s(` baseState
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("pendingUpdate "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" action "),n("span",{class:"token operator"},"="),s(" pendingUpdate"),n("span",{class:"token punctuation"},"."),s("action"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("action "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},[n("span",{class:"token builtin"},"Function")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 若 action 是回调函数：(baseState = 1, update = (i) => 5i)) => memoizedState = 5"),s(`
			result`),n("span",{class:"token punctuation"},"."),s("memoizedState "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"action"),n("span",{class:"token punctuation"},"("),s("baseState"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 若 action 是状态值：(baseState = 1, update = 2) => memoizedState = 2"),s(`
			result`),n("span",{class:"token punctuation"},"."),s("memoizedState "),n("span",{class:"token operator"},"="),s(" action"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/shared/ReactTypes.ts"),s(`
`),n("span",{class:"token comment"},"// ..."),s(`

`),n("span",{class:"token comment"},"// 定义 Action type"),s(`
`),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"export")]),s(),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("Action"),n("span",{class:"token operator"},"<"),s("State"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(" State "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("prevState"),n("span",{class:"token operator"},":"),s(" State"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" State"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=c('<h2 id="_3-实现触发更新" tabindex="-1"><a class="header-anchor" href="#_3-实现触发更新" aria-hidden="true">#</a> 3. 实现触发更新</h2><p>上面我们提到，更新 React 应用可以由多种触发方式引发，包括组件的状态变化、属性变化、父组件的重新渲染以及用户事件等。</p><p>先来处理创建 React 应用的根对象这种情况，也就是 <code>ReactDOM.createRoot(rootElement).render(&lt;App/&gt;)</code> 这条语句：</p><ul><li><code>ReactDOM.createRoot()</code> 函数生成一个新的 <code>Root</code> 对象，它在源码中是 <code>FiberRootNode</code> 类型，充当了 React 应用的根节点。</li><li><code>rootElement</code> 则是要渲染到的 DOM 节点，它在源码中是 <code>hostRootFiber</code> 类型，作为 React 应用的根 DOM 节点。</li><li><code>render()</code> 方法将组件 <code>&lt;App/&gt;</code> 渲染到根节点上。在这个过程中，React 会创建一个代表 <code>&lt;App/&gt;</code> 组件的 <code>FiberNode</code>，并将其添加到 <code>Root</code> 对象的 Fiber 树上。</li></ul><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据上图，我们先来实现 <code>FiberRootNode</code> 类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiber.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FiberRootNode</span> <span class="token punctuation">{</span>
	container<span class="token operator">:</span> Container<span class="token punctuation">;</span>
	current<span class="token operator">:</span> FiberNode<span class="token punctuation">;</span>
	finishedWork<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>container<span class="token operator">:</span> Container<span class="token punctuation">,</span> hostRootFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> hostRootFiber<span class="token punctuation">;</span>
		<span class="token comment">// 将根节点的 stateNode 属性指向 FiberRootNode，用于表示整个 React 应用的根节点</span>
		hostRootFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
		<span class="token comment">// 指向更新完成之后的 hostRootFiber</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>finishedWork <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来实现 <code>ReactDOM.createRoot().render()</code> 过程中调用的 API:</p><ul><li><p><strong>createContainer 函数:</strong> 用于创建一个新的容器（container），该容器包含了 React 应用的根节点以及与之相关的一些配置信息。<code>createContainer</code> 函数会创建一个新的 <code>Root</code> 对象，该对象用于管理整个 React 应用的状态和更新。</p></li><li><p><strong>updateContainer 函数:</strong> 用于更新已经存在的容器中的内容。在内部，<code>updateContainer</code> 函数会调用 <code>scheduleUpdateOnFiber</code> 等方法，通过 Fiber 架构中的协调更新过程，将新的 React 元素（<code>element</code>）渲染到容器中，并更新整个应用的状态。</p></li></ul><p>新建文件 <code>fiberReconciler.ts</code>，里面有 <code>createContainer</code> 和 <code>updateContainer</code> 两个函数，在 <code>workLoop.ts</code> 文件中实现 <code>scheduleUpdateOnFiber</code>函数：</p>`,10),S=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/fiberReconciler.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Container "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'hostConfig'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(" FiberRootNode "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./fiber'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" HostRoot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./workTags'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(`
	UpdateQueue`),n("span",{class:"token punctuation"},","),s(`
	createUpdate`),n("span",{class:"token punctuation"},","),s(`
	createUpdateQueue`),n("span",{class:"token punctuation"},","),s(`
	enqueueUpdate
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./updateQueue'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ReactElementType "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'shared/ReactTypes'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" scheduleUpdateOnFiber "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./workLoop'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createContainer"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token operator"},":"),s(" Container"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" hostRootFiber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FiberNode"),n("span",{class:"token punctuation"},"("),s("HostRoot"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" root "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FiberRootNode"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token punctuation"},","),s(" hostRootFiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	hostRootFiber`),n("span",{class:"token punctuation"},"."),s("updateQueue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createUpdateQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" root"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"updateContainer"),n("span",{class:"token punctuation"},"("),s(`
	element`),n("span",{class:"token operator"},":"),s(" ReactElementType "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
	root`),n("span",{class:"token operator"},":"),s(` FiberRootNode
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" hostRootFiber "),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s("current"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" update "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"createUpdate"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("ReactElementType "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"enqueueUpdate"),n("span",{class:"token punctuation"},"("),s(`
		hostRootFiber`),n("span",{class:"token punctuation"},"."),s("updateQueue "),n("span",{class:"token keyword"},"as"),s(" UpdateQueue"),n("span",{class:"token operator"},"<"),s("ReactElementType "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
		update
	`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"scheduleUpdateOnFiber"),n("span",{class:"token punctuation"},"("),s("hostRootFiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" element"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/workLoop.ts"),s(`
`),n("span",{class:"token comment"},"// ..."),s(`

`),n("span",{class:"token comment"},"// 调度功能"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"scheduleUpdateOnFiber"),n("span",{class:"token punctuation"},"("),s("fiber"),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" root "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"markUpdateFromFiberToRoot"),n("span",{class:"token punctuation"},"("),s("fiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"renderRoot"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 从触发更新的节点向上遍历到 FiberRootNode"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"markUpdateFromFiberToRoot"),n("span",{class:"token punctuation"},"("),s("fiber"),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" node "),n("span",{class:"token operator"},"="),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("return"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("tag "),n("span",{class:"token operator"},"=="),s(" HostRoot"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token punctuation"},"."),s("stateNode"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=c("<p>另外，在上一节中，我们在实现 <code>prepareFreshStack</code> 函数时，直接将 <code>root</code> 作为参数赋值给了 <code>workInProgress</code>，但现在我们知道了，<code>root</code> 其实是 <code>FiberRootNode</code> 类型的，不能直接赋值给 <code>FiberNode</code> 类型的 <code>workInProgress</code>，所以需要写一个 <code>createWorkInProgress</code> 函数处理一下：</p>",1),P=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/workLoop.ts"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"renderRoot"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},":"),s(" FiberRootNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"prepareFreshStack"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"do"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token function"},"workLoop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'workLoop发生错误：'"),n("span",{class:"token punctuation"},","),s(" e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			workInProgress `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 初始化 workInProgress 变量"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"prepareFreshStack"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},":"),s(" FiberRootNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	workInProgress `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createWorkInProgress"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("current"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ..."),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/fiber.ts"),s(`
`),n("span",{class:"token comment"},"// ..."),s(`

`),n("span",{class:"token comment"},"// 根据 FiberRootNode.current 创建 workInProgress"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" createWorkInProgress "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s(`
	current`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
	pendingProps`),n("span",{class:"token operator"},":"),s(` Props
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" workInProgress "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("alternate"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("workInProgress "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 首屏渲染时（mount）"),s(`
		workInProgress `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FiberNode"),n("span",{class:"token punctuation"},"("),s("current"),n("span",{class:"token punctuation"},"."),s("tag"),n("span",{class:"token punctuation"},","),s(" pendingProps"),n("span",{class:"token punctuation"},","),s(" current"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		workInProgress`),n("span",{class:"token punctuation"},"."),s("stateNode "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("stateNode"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// 双缓冲机制"),s(`
		workInProgress`),n("span",{class:"token punctuation"},"."),s("alternate "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},";"),s(`
		current`),n("span",{class:"token punctuation"},"."),s("alternate "),n("span",{class:"token operator"},"="),s(" workInProgress"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 非首屏渲染时（update）"),s(`
		workInProgress`),n("span",{class:"token punctuation"},"."),s("pendingProps "),n("span",{class:"token operator"},"="),s(" pendingProps"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token comment"},"// 将 effect 链表重置为空，以便在更新过程中记录新的副作用"),s(`
		workInProgress`),n("span",{class:"token punctuation"},"."),s("flags "),n("span",{class:"token operator"},"="),s(" NoFlags"),n("span",{class:"token punctuation"},";"),s(`
		workInProgress`),n("span",{class:"token punctuation"},"."),s("subtreeFlags "),n("span",{class:"token operator"},"="),s(" NoFlags"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// 复制当前节点的大部分属性"),s(`
	workInProgress`),n("span",{class:"token punctuation"},"."),s("type "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("type"),n("span",{class:"token punctuation"},";"),s(`
	workInProgress`),n("span",{class:"token punctuation"},"."),s("updateQueue "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("updateQueue"),n("span",{class:"token punctuation"},";"),s(`
	workInProgress`),n("span",{class:"token punctuation"},"."),s("child "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("child"),n("span",{class:"token punctuation"},";"),s(`
	workInProgress`),n("span",{class:"token punctuation"},"."),s("memoizedProps "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("memoizedProps"),n("span",{class:"token punctuation"},";"),s(`
	workInProgress`),n("span",{class:"token punctuation"},"."),s("memoizedState "),n("span",{class:"token operator"},"="),s(" current"),n("span",{class:"token punctuation"},"."),s("memoizedState"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"return"),s(" workInProgress"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=c("<hr><p>至此，我们已经实现了 React 应用在首次渲染或后续更新时的大致更新流程，一起来回顾一下：</p><ul><li><p>首先，我们通过 <code>createContainer</code> 函数创建了 React 应用的根节点 <code>FiberRootNode</code>，并将其与 DOM 节点（<code>hostFiberRoot</code>）连接起来；</p></li><li><p>然后，通过 <code>updateContainer</code> 函数创建了一个更新（<code>update</code>），并将其加入到更新队列（<code>updateQueue</code>）中，启动了首屏渲染或后续更新的机制；</p></li><li><p>接着会调用 <code>scheduleUpdateOnFiber</code> 函数开始调度更新，从触发更新的节点开始向上遍历，直到达到根节点 <code>FiberRootNode</code>；</p></li><li><p>接着会调用 <code>renderRoot</code> 函数，初始化 <code>workInProgress</code> 变量，生成与 <code>hostRootFiber</code> 对应的 <code>workInProgress hostRootFiber</code>；</p></li><li><p>接着就开始 <code>Reconciler</code> 的更新流程，即 <code>workLoop</code> 函数，对 Fiber 树进行深度优先遍历（DFS）；</p></li><li><p>在向下遍历阶段会调用 <code>beginWork</code> 方法，在向上返回阶段会调用 <code>completeWork</code> 方法，这两个方法负责 Fiber 节点的创建、更新和处理，具体实现会在下一节会讲到。</p></li></ul>",3),A=n("code",null,"git tag v1.4",-1),C={href:"https://github.com/2xiao/my-react/tree/v1.4",target:"_blank",rel:"noopener noreferrer"};function O(T,D){const l=i("ExternalLinkIcon"),p=i("CodeTabs");return u(),d("div",null,[v,n("div",w,[g,y,n("p",null,[s("相关代码可在 "),n("a",h,[f,o(l)]),s(" 查看")])]),R,o(p,{id:"132",data:[{id:"updateQueue.ts"},{id:"ReactTypes.ts"}]},{title0:e(({value:a,isActive:t})=>[s("updateQueue.ts")]),title1:e(({value:a,isActive:t})=>[s("ReactTypes.ts")]),tab0:e(({value:a,isActive:t})=>[_]),tab1:e(({value:a,isActive:t})=>[F]),_:1},8,["data"]),U,o(p,{id:"191",data:[{id:"fiberReconciler.ts"},{id:"workLoop.ts"}]},{title0:e(({value:a,isActive:t})=>[s("fiberReconciler.ts")]),title1:e(({value:a,isActive:t})=>[s("workLoop.ts")]),tab0:e(({value:a,isActive:t})=>[S]),tab1:e(({value:a,isActive:t})=>[x]),_:1},8,["data"]),N,o(p,{id:"202",data:[{id:"workLoop.ts"},{id:"fiber.ts"}]},{title0:e(({value:a,isActive:t})=>[s("workLoop.ts")]),title1:e(({value:a,isActive:t})=>[s("fiber.ts")]),tab0:e(({value:a,isActive:t})=>[P]),tab1:e(({value:a,isActive:t})=>[Q]),_:1},8,["data"]),I,n("p",null,[s("相关代码可在 "),A,s(" 查看，地址："),n("a",C,[s("https://github.com/2xiao/my-react/tree/v1.4"),o(l)])])])}const z=r(b,[["render",O],["__file","4.html.vue"]]);export{z as default};
