import{_ as n,o as a,c as s,e}from"./app-b4s7f53x.js";const t={},o=e(`<h1 id="dom-常见的操作有哪些" tabindex="-1"><a class="header-anchor" href="#dom-常见的操作有哪些" aria-hidden="true">#</a> DOM 常见的操作有哪些？</h1><h2 id="_1-dom-基础" tabindex="-1"><a class="header-anchor" href="#_1-dom-基础" aria-hidden="true">#</a> 1. DOM 基础</h2><p><strong>DOM（Document Object Model）</strong> 是 HTML 和 XML 文档的编程接口，允许开发者以编程方式操作文档结构、样式和内容。</p><p>DOM 的层级结构由 <strong>节点（Node）</strong> 构成，主要包括以下三类：</p><ol><li><strong>元素节点</strong>（<code>Element</code>）：如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>。</li><li><strong>文本节点</strong>（<code>Text</code>）：元素中的文本内容。</li><li><strong>属性节点</strong>（<code>Attribute</code>）：如 <code>id=&quot;example&quot;</code>。</li></ol><hr><h2 id="_2-常见-dom-操作分类" tabindex="-1"><a class="header-anchor" href="#_2-常见-dom-操作分类" aria-hidden="true">#</a> 2. 常见 DOM 操作分类</h2><h3 id="创建节点" tabindex="-1"><a class="header-anchor" href="#创建节点" aria-hidden="true">#</a> 创建节点</h3><ol><li><strong><code>document.createElement(tagName)</code></strong>：创建元素节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>document.createTextNode(data)</code></strong>：创建文本节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>document.createDocumentFragment()</code></strong>：创建文档片段，用于批量插入节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr><h3 id="查询节点" tabindex="-1"><a class="header-anchor" href="#查询节点" aria-hidden="true">#</a> 查询节点</h3><ol><li><strong><code>document.querySelector(selector)</code></strong>：按 CSS 选择器返回第一个匹配的节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>document.querySelectorAll(selector)</code></strong>：返回所有匹配的节点，生成静态 <code>NodeList</code>。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>其他常见方法： <ul><li><strong><code>getElementById(id)</code></strong>：按 <code>id</code> 查询。</li><li><strong><code>getElementsByClassName(className)</code></strong>：按类名查询，返回实时集合。</li><li><strong><code>getElementsByTagName(tagName)</code></strong>：按标签名查询，返回实时集合。</li><li><strong><code>parentNode</code>、<code>childNodes</code>、<code>nextSibling</code>、<code>previousSibling</code></strong>：节点关系遍历。</li></ul></li></ol><hr><h3 id="更新节点" tabindex="-1"><a class="header-anchor" href="#更新节点" aria-hidden="true">#</a> 更新节点</h3><ol><li><strong>修改内容</strong><ul><li><strong><code>innerHTML</code></strong>：设置/获取节点的 HTML 内容（会解析 HTML）。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;p&gt;Hello&lt;/p&gt;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>textContent</code> / <code>innerText</code></strong>：设置/获取纯文本内容（不解析 HTML）。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;&lt;b&gt;Hello&lt;/b&gt;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 显示原样文本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><strong>修改样式</strong><ul><li><strong><code>element.style.property</code></strong>：直接设置样式。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>setAttribute(name, value)</code></strong>：设置属性值。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-custom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><hr><h3 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点" aria-hidden="true">#</a> 添加节点</h3><ol><li><strong><code>appendChild(child)</code></strong>：将节点添加为父节点的最后一个子节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>insertBefore(newNode, referenceNode)</code></strong>：在指定节点前插入新节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> referenceNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点" aria-hidden="true">#</a> 删除节点</h3><ol><li><strong><code>parentNode.removeChild(child)</code></strong>：删除子节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong><code>element.remove()</code></strong>（现代浏览器支持）：直接删除节点。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr><h2 id="_3-注意点" tabindex="-1"><a class="header-anchor" href="#_3-注意点" aria-hidden="true">#</a> 3. 注意点</h2><ul><li><strong>批量插入节点时使用文档片段</strong>：减少 DOM 重绘与回流。</li><li><strong><code>innerHTML</code> 的性能问题</strong>：直接修改 HTML 会造成页面重绘，影响性能；避免直接插入用户输入以防 XSS 攻击。</li><li><strong>静态 vs 动态集合</strong>： <ul><li><code>querySelectorAll</code> 返回静态列表（快照）。</li><li><code>getElementsBy*</code> 返回动态集合（实时更新）。</li></ul></li></ul><hr><h2 id="_4-应用场景举例" tabindex="-1"><a class="header-anchor" href="#_4-应用场景举例" aria-hidden="true">#</a> 4. 应用场景举例</h2><h3 id="动态添加列表项" tabindex="-1"><a class="header-anchor" href="#动态添加列表项" aria-hidden="true">#</a> 动态添加列表项</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;New Item&#39;</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="替换节点" tabindex="-1"><a class="header-anchor" href="#替换节点" aria-hidden="true">#</a> 替换节点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> oldNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#old&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;I am new&#39;</span><span class="token punctuation">;</span>
oldNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除节点-1" tabindex="-1"><a class="header-anchor" href="#删除节点-1" aria-hidden="true">#</a> 删除节点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#toDelete&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
node<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,32),c=[o];function i(p,l){return a(),s("div",null,c)}const r=n(t,[["render",i],["__file","dom.html.vue"]]);export{r as default};
