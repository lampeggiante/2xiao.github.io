import{_ as n,o as a,c as s,e}from"./app-b4s7f53x.js";const t={},o=e(`<h1 id="说说-javascript-中的数据类型与存储差异" tabindex="-1"><a class="header-anchor" href="#说说-javascript-中的数据类型与存储差异" aria-hidden="true">#</a> 说说 JavaScript 中的数据类型与存储差异</h1><p>JavaScript 的数据类型分为两大类：</p><ol><li><strong>基本类型</strong>：存储在<strong>栈</strong>内存中。</li><li><strong>引用类型</strong>：存储在<strong>堆</strong>内存中，栈中存放的是堆内存的地址。</li></ol><h2 id="一、基本类型" tabindex="-1"><a class="header-anchor" href="#一、基本类型" aria-hidden="true">#</a> 一、基本类型</h2><p>基本类型包括以下 7 种：</p><ul><li><strong>Number</strong>：数字类型</li><li><strong>String</strong>：字符串类型</li><li><strong>Boolean</strong>：布尔类型</li><li><strong>Undefined</strong>：未定义</li><li><strong>Null</strong>：空值</li><li><strong>Symbol</strong>：唯一值（ES6）</li><li><strong>BigInt</strong>：大整数类型（ES2020）</li></ul><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>支持整数和浮点数，并允许使用八进制（<code>0</code> 开头）、十六进制（<code>0x</code> 开头）及科学计数法表示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment">// 十进制</span>
<span class="token keyword">let</span> octNum <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment">// 八进制 -&gt; 56</span>
<span class="token keyword">let</span> hexNum <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制 -&gt; 10</span>
<span class="token keyword">let</span> sciNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment">// 科学计数法 -&gt; 31250000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊数值 <code>NaN</code> 表示非数值操作的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>字符串用单引号 (<code>&#39;</code>)、双引号 (<code>&quot;</code>) 或模板字符串（<code>\`</code>）包裹，且不可变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
str <span class="token operator">+=</span> <span class="token string">&#39; World&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 新创建了字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p>只有两个值：<code>true</code> 和 <code>false</code>。以下规则用于其他类型转换为布尔值：</p><table><thead><tr><th>数据类型</th><th>转换为 <code>true</code> 的值</th><th>转换为 <code>false</code> 的值</th></tr></thead><tbody><tr><td>String</td><td>非空字符串</td><td>空字符串 <code>&quot;&quot;</code></td></tr><tr><td>Number</td><td>非零数值（含 <code>Infinity</code>）</td><td><code>0</code>、<code>NaN</code></td></tr><tr><td>Object</td><td>任意对象</td><td><code>null</code></td></tr><tr><td>Undefined</td><td>N/A</td><td><code>undefined</code></td></tr></tbody></table><h3 id="undefined-和-null" tabindex="-1"><a class="header-anchor" href="#undefined-和-null" aria-hidden="true">#</a> Undefined 和 Null</h3><ul><li><strong>Undefined</strong>：变量已声明但未赋值时的默认值。</li><li><strong>Null</strong>：表示空对象指针或无效值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;（历史遗留问题）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h3><p>Symbol 是唯一且不可变的标识符，用于对象属性，避免命名冲突。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sym1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sym2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sym1 <span class="token operator">===</span> sym2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> BigInt</h3><p>支持大于 <code>Number.MAX_SAFE_INTEGER</code> 的整数，后缀为 <code>n</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> bigInt <span class="token operator">=</span> <span class="token number">9007199254740991n</span> <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、引用类型" tabindex="-1"><a class="header-anchor" href="#二、引用类型" aria-hidden="true">#</a> 二、引用类型</h2><p>引用类型（复杂类型）统称为 <code>Object</code>，包括：</p><ol><li><strong>Object</strong>：键值对集合。</li><li><strong>Array</strong>：有序数据集合。</li><li><strong>Function</strong>：可调用对象。</li></ol><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><p>对象由键值对组成，键可以是字符串或 Symbol。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">170</span><span class="token punctuation">;</span> <span class="token comment">// 动态添加属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><p>数组是动态大小的有序集合，元素可为任意类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h3><p>函数是特殊的对象，是 <code>Function</code> 构造函数的实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// 箭头函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、存储差异" tabindex="-1"><a class="header-anchor" href="#三、存储差异" aria-hidden="true">#</a> 三、存储差异</h2><h3 id="基本类型-存储在栈中" tabindex="-1"><a class="header-anchor" href="#基本类型-存储在栈中" aria-hidden="true">#</a> 基本类型：存储在栈中</h3><p>基本类型的数据直接存储在栈内存中，赋值时会复制值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 复制值</span>
b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值过程：</p><ul><li><code>a</code> 和 <code>b</code> 各自存储独立的值，互不影响。</li></ul><h3 id="引用类型-堆中存储-栈中存放引用" tabindex="-1"><a class="header-anchor" href="#引用类型-堆中存储-栈中存放引用" aria-hidden="true">#</a> 引用类型：堆中存储，栈中存放引用</h3><p>引用类型的数据存储在堆内存中，变量保存的是指向堆内存的地址。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> <span class="token comment">// 复制引用</span>
obj2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值过程：</p><ul><li><code>obj1</code> 和 <code>obj2</code> 指向同一个内存地址，因此修改其中一个会影响另一个。</li></ul><hr><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ol><li><p><strong>存储位置</strong></p><ul><li>基本类型存储在栈中，值不可变。</li><li>引用类型存储在堆中，栈中保存引用地址。</li></ul></li><li><p><strong>赋值行为</strong></p><ul><li>基本类型赋值会复制值，两个变量互不影响。</li><li>引用类型赋值会复制引用，多个变量共享同一对象。</li></ul></li></ol><p>通过区分这两类数据的存储特点，能更好地理解 JavaScript 的内存管理和行为特性。</p>`,55),p=[o];function c(l,i){return a(),s("div",null,p)}const d=n(t,[["render",c],["__file","data_type.html.vue"]]);export{d as default};
