import{_ as i,r as l,o as k,c as r,a as n,b as s,d as a,w as p,e as c}from"./app-_0nWi2_b.js";const d={},v=n("h1",{id:"_9-接入测试框架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-接入测试框架","aria-hidden":"true"},"#"),s(" 9. 接入测试框架")],-1),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"摘要",-1),f=n("ul",null,[n("li",null,"实现 test-utils"),n("li",null,"接入测试框架"),n("li",null,"编写测试用例")],-1),g={href:"https://github.com/2xiao/my-react/tree/v1.9",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"git tag v1.9",-1),h=n("p",null,[s("之前我们实现了 "),n("code",null,"npm link"),s(" 和 "),n("code",null,"vite serve demos"),s(" 两种调试方式，本节我们将实现第三种调试方式 -- 测试用例。")],-1),w=n("h2",{id:"_1-实现-test-utils",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-实现-test-utils","aria-hidden":"true"},"#"),s(" 1. 实现 test-utils")],-1),E=n("code",null,"test-utils",-1),_={href:"https://github.com/facebook/react/blob/main/packages/react-dom/src/test-utils/ReactTestUtils.js",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[n("code",null,"test-utils"),s(" 主要用于测试 React 组件的渲染和行为，而 React DOM 是负责处理 React 组件的渲染和底层 DOM 操作的核心库。因此可以将测试工具放在 react-dom 包中，使得测试工具与渲染过程密切相关，更容易与 React DOM 的功能集成。")],-1),R=n("p",null,[s("新建 "),n("code",null,"packages/react-dom/test-utils.ts"),s(" 文件，它对外暴露一个 "),n("code",null,"renderIntoContainer"),s(" 方法，然后在 "),n("code",null,"scripts/rollup/react-dom.config.js"),s(" 增加 "),n("code",null,"test-utils.ts"),s(" 的打包配置：")],-1),j=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-dom/test-utils.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ReactElementType "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'shared/ReactTypes'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createRoot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'react-dom/client'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"renderIntoDocument"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token operator"},":"),s(" ReactElementType"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" div "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createElement"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'div'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"createRoot"),n("span",{class:"token punctuation"},"("),s("div"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// scripts/rollup/react-dom.config.js"),s(`
`),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token comment"},"// test-utils"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    input`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("pkgPath"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"/test-utils.ts"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),s(`
    output`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            file`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("pkgDistPath"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"/test-utils.js"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),s(`
            name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'testUtils'"),n("span",{class:"token punctuation"},","),s(`
            format`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'umd'"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    externals`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'react-dom'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'react'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    plugins`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"getBaseRollupPlugins"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=c(`<p>再给项目增加 babel 编译，将 jsx 编译成 javascript。</p><p>先安装 babel 相关的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span> @babel/core @babel/preset-env @babel/plugin-transform-react-jsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>@babel/core</code>： 是 Babel 工具链的核心模块，负责整体的转换流程和对代码进行 AST（抽象语法树）转换；</li><li><code>@babel/preset-env</code>： 是一个 Babel 预设（preset），用于根据目标环境（浏览器、Node.js 等）自动确定需要应用的转换插件。它根据配置中的目标环境，选择并启用一组插件，以确保代码能在目标环境中正常运行；</li><li><code>@babel/plugin-transform-react-jsx</code>：是用于将 JSX 语法转换为普通的 JavaScript 函数调用的插件。JSX 是 React 中用于声明 UI 的语法糖，而这个插件使得浏览器或 Node.js 可以理解并执行 JSX 语法；</li></ul><p>然后在根目录新建 <code>babel.config.js</code> 文件，里面是 babel 的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// babel.config.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> defaults <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jest-config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>defaults<span class="token punctuation">,</span>
	<span class="token literal-property property">rootDir</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment">// 寻找测试用例忽略的文件夹</span>
	<span class="token literal-property property">modulePathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;rootDir&gt;/.history&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// 依赖包的解析地址</span>
	<span class="token literal-property property">moduleDirectories</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">// React 和 ReactDOM 包的地址</span>
		<span class="token string">&#39;dist/node_modules&#39;</span><span class="token punctuation">,</span>
		<span class="token comment">// 第三方依赖的地址</span>
		<span class="token operator">...</span>defaults<span class="token punctuation">.</span>moduleDirectories
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">&#39;jsdom&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-接入测试框架" tabindex="-1"><a class="header-anchor" href="#_2-接入测试框架" aria-hidden="true">#</a> 2. 接入测试框架</h2>`,7),B={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},T=c(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span> jest
<span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span> jest-config
<span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span> jest-enviroment-jsdom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>jest-config</code>：提供了 Jest 的默认配置，以及一些常用的配置选项和预设；</li><li><code>jest-enviroment-jsdom</code>：提供了一个使用 jsdom 实现的模拟 DOM 环境，用于运行测试时模拟浏览器环境；</li></ul><p>再新建 <code>scripts/jest/jest.config.js</code> 文件，为 Jest 添加配置参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// scripts/jest/jest.config.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> defaults <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jest-config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>defaults<span class="token punctuation">,</span>
	<span class="token literal-property property">rootDir</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment">// 寻找测试用例忽略的文件夹</span>
	<span class="token literal-property property">modulePathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;rootDir&gt;/.history&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// 依赖包的解析地址</span>
	<span class="token literal-property property">moduleDirectories</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">// React 和 ReactDOM 包的地址</span>
		<span class="token string">&#39;dist/node_modules&#39;</span><span class="token punctuation">,</span>
		<span class="token comment">// 第三方依赖的地址</span>
		<span class="token operator">...</span>defaults<span class="token punctuation">.</span>moduleDirectories
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">&#39;jsdom&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在 <code>package.json</code> 的 <code>&quot;scripts&quot;</code> 中增加 jest 的执行脚本：</p><p><code>&quot;test&quot;: &quot;jest --config scripts/jest/jest.config.js&quot;</code></p><p>这时执行 <code>pnpm test</code> 就可以运行 Jest 进行测试。</p><h2 id="_3-编写测试用例" tabindex="-1"><a class="header-anchor" href="#_3-编写测试用例" aria-hidden="true">#</a> 3. 编写测试用例</h2>`,8),q={href:"https://github.com/facebook/react/tree/main/packages/react/src/__tests__",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"packages/react/src/__tests__/",-1),O=c(`<p>下面，我们来实现几个 <code>ReactElement</code> 的测试用例，新建 <code>packages/react/__tests__/ReactElement-test.js</code> 文件，内容如下：</p><details class="hint-container details"><summary>👉 查看代码 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/react/__tests__/ReactElement-test.js</span>
<span class="token doc-comment comment">/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * <span class="token keyword">@emails</span> react-core
 */</span>

<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> React<span class="token punctuation">;</span>
<span class="token keyword">let</span> ReactDOM<span class="token punctuation">;</span>
<span class="token keyword">let</span> ReactTestUtils<span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;ReactElement&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> ComponentFC<span class="token punctuation">;</span>
	<span class="token keyword">let</span> originalSymbol<span class="token punctuation">;</span>

	<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		jest<span class="token punctuation">.</span><span class="token function">resetModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Delete the native Symbol if we have one to ensure we test the</span>
		<span class="token comment">// unpolyfilled environment.</span>
		originalSymbol <span class="token operator">=</span> global<span class="token punctuation">.</span>Symbol<span class="token punctuation">;</span>
		global<span class="token punctuation">.</span>Symbol <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

		React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		ReactDOM <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		ReactTestUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom/test-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// NOTE: We&#39;re explicitly not using JSX here. This is intended to test</span>
		<span class="token comment">// classic JS without JSX.</span>
		<span class="token function-variable function">ComponentFC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		global<span class="token punctuation">.</span>Symbol <span class="token operator">=</span> originalSymbol<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;uses the fallback value when in an environment without Symbol&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0xeac7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;returns a complete element according to spec&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;allows a string to be passed as the type&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;returns an immutable element&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;does not reuse the original config object&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		config<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;does not fail if config has no prototype&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> config <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;extracts key and ref from the config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">&#39;34&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;56&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;34&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;56&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;extracts null key and ref&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
			<span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;12&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;12&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;ignores undefined key and ref&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;56&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;56&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;ignores key and ref warning getters&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> elementA <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> elementB <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> elementA<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>elementB<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>elementB<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;coerces the key to a string&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;56&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;56&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;merges an additional argument onto the children prop&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
			ComponentFC<span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			a
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;does not override children if no rest args are provided&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;overrides children if null is provided as an argument&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
			ComponentFC<span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token keyword">null</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;merges rest arguments onto the children prop in an array&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ComponentFC<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// // NOTE: We&#39;re explicitly not using JSX here. This is intended to test</span>
	<span class="token comment">// // classic JS without JSX.</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;allows static methods to be called using the type property&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">function</span> <span class="token function">StaticMethodComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		StaticMethodComponent<span class="token punctuation">.</span><span class="token function-variable function">someStaticMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;someReturnValue&#39;</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>StaticMethodComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">someStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;someReturnValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// // NOTE: We&#39;re explicitly not using JSX here. This is intended to test</span>
	<span class="token comment">// // classic JS without JSX.</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;identifies valid elements&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> jsonElement <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// // NOTE: We&#39;re explicitly not using JSX here. This is intended to test</span>
	<span class="token comment">// // classic JS without JSX.</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;is indistinguishable from a plain object&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;does not warn for NaN props&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">const</span> test <span class="token operator">=</span> ReactTestUtils<span class="token punctuation">.</span><span class="token function">renderIntoDocument</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// // NOTE: We&#39;re explicitly not using JSX here. This is intended to test</span>
	<span class="token comment">// // classic JS without JSX.</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;identifies elements, but not JSON, if Symbols are supported&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// Rudimentary polyfill</span>
		<span class="token comment">// @eslint-</span>
		<span class="token comment">// Once all jest engines support Symbols natively we can swap this to test</span>
		<span class="token comment">// WITH native Symbols by default.</span>
		<span class="token comment">/*eslint-disable */</span>
		<span class="token keyword">const</span> <span class="token function-variable function">REACT_ELEMENT_TYPE</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// fake Symbol</span>
		<span class="token comment">// eslint-disable-line no-use-before-define</span>
		<span class="token keyword">const</span> <span class="token function-variable function">OTHER_SYMBOL</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// another fake Symbol</span>
		<span class="token comment">/*eslint-enable */</span>
		global<span class="token punctuation">.</span><span class="token function-variable function">Symbol</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token constant">OTHER_SYMBOL</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		global<span class="token punctuation">.</span>Symbol<span class="token punctuation">.</span><span class="token function-variable function">for</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;react.element&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token constant">OTHER_SYMBOL</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		jest<span class="token punctuation">.</span><span class="token function">resetModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> jsonElement <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>至此，我们就完成了测试环境搭建，并编写了 20 个 ReactElement 的测试用例。现在执行 <code>pnpm build-dev</code> 打包最新代码，再执行 <code>pnpm test</code> 即可运行测试，如果发现测试用例运行失败，可以查看测试输出以获取失败的测试用例的详细信息和堆栈跟踪，然后分析出现问题的原因。</p><p>搭建测试环境、编写测试用例以及定期运行测试，可以帮开发者发现代码中潜在的问题，对于提高代码质量、稳定性和可维护性有着积极的影响。</p><p>在测试过程中，关注测试覆盖率、运行时性能等方面也是重要的。使用持续集成（CI）工具，确保测试在每次提交或拉取请求时都能运行，有助于及时发现问题。</p>`,5),D=n("code",null,"git tag v1.9",-1),N={href:"https://github.com/2xiao/my-react/tree/v1.9",target:"_blank",rel:"noopener noreferrer"};function V(M,F){const t=l("ExternalLinkIcon"),u=l("CodeTabs");return k(),r("div",null,[v,n("div",m,[b,f,n("p",null,[s("相关代码可在 "),n("a",g,[y,a(t)]),s(" 查看")])]),h,w,n("p",null,[E,s(" 是 React 提供的一个"),n("a",_,[s("官方测试工具库"),a(t)]),s("，用于帮助开发者编写和执行 React 组件的单元测试。该工具库提供了一组用于测试 React 组件的工具和实用函数，使得编写测试变得更加容易和高效。")]),x,R,a(u,{id:"40",data:[{id:"test-utils.ts"},{id:"react-dom.config.js"}]},{title0:p(({value:e,isActive:o})=>[s("test-utils.ts")]),title1:p(({value:e,isActive:o})=>[s("react-dom.config.js")]),tab0:p(({value:e,isActive:o})=>[j]),tab1:p(({value:e,isActive:o})=>[C]),_:1},8,["data"]),S,n("p",null,[s("测试环境使用 "),n("a",B,[s("Jest"),a(t)]),s(" 测试框架搭建，使用包管理器安装 Jest 及其相关的包：")]),T,n("p",null,[s("React 官方的测试用例都保存在 "),n("a",q,[J,a(t)]),s("，可以自行查看。")]),O,n("p",null,[s("相关代码可在 "),D,s(" 查看，地址："),n("a",N,[s("https://github.com/2xiao/my-react/tree/v1.9"),a(t)])])])}const X=i(d,[["render",V],["__file","9.html.vue"]]);export{X as default};
