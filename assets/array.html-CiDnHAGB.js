import{_ as p,r as i,o as r,c as d,f as c,a as t,b as e,d as n,w as s,e as u}from"./app-mvY9N9Pc.js";const _="/leetcode-js/assets/2-1-1-EC9Y9eyF.png",h="/leetcode-js/assets/2-1-2-EptcMRuS.png",m="/leetcode-js/assets/2-1-3-pHoKvxc_.png",k="/leetcode-js/assets/2-1-4-t-iF7k31.png",g={},f=u('<h1 id="_2-1-数组" tabindex="-1"><a class="header-anchor" href="#_2-1-数组" aria-hidden="true">#</a> 2.1 数组</h1><h2 id="数组的定义" tabindex="-1"><a class="header-anchor" href="#数组的定义" aria-hidden="true">#</a> 数组的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>数组（Array）</strong> 是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p></div><p>但在 JavaScript 里，数组中可以保存不同类型的值（大多数语言都没这个能力）。但我们还是要遵守最佳实践，别这么做。</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一维数组：</span>
<span class="token comment">// 数组的每一个元素是一个数据类型</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment">// 二维数组：</span>
<span class="token comment">// 数组的每一个元素是一个一维数组</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span>

<span class="token comment">// 三维数组：</span>
<span class="token comment">// 数组的每一个元素是一个二维数组</span>
<span class="token punctuation">[</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以从两个方面来解释一下数组的定义。</p><ul><li>「<strong>线性表</strong>」</li><li>「<strong>连续的内存空间</strong>」</li></ul><h2 id="线性表与非线性表" tabindex="-1"><a class="header-anchor" href="#线性表与非线性表" aria-hidden="true">#</a> 线性表与非线性表</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>线性表（Linear List）</strong> 就是数据排成像一条线一样的结构，线性表上的数据元素都是相同类型。每个线性表上的数据最多只有前和后两个方向。</p></div><p><strong>数组、链表、队列、栈都是是线性表结构</strong>。</p><p>线性表有两种存储结构：「顺序存储结构」和「链式存储结构」。</p><p>其中，「<strong>顺序存储结构</strong>」是指占用的内存空间是连续的，相邻数据元素之间，物理内存上的存储位置也相邻。</p><p>数组也是采用了顺序存储结构，并且存储的数据都是相同类型的。</p><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>与它相对立的是<strong>非线性表</strong>，比如<strong>二叉树、堆、图</strong>等。</p><p>在非线性表中，数据之间并不是简单的前后关系。</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="数组的操作" tabindex="-1"><a class="header-anchor" href="#数组的操作" aria-hidden="true">#</a> 数组的操作</h2><p>数据结构的操作一般涉及到增、删、改、查共 4 种情况，下面我们一起来看一下数组的这 4 种基本操作。</p><h3 id="_1-访问和查找元素" tabindex="-1"><a class="header-anchor" href="#_1-访问和查找元素" aria-hidden="true">#</a> 1. 访问和查找元素</h3><p>因为数组有<strong>连续的内存空间和相同类型的数据</strong>，所以数组支持 <strong>“随机访问”</strong>。</p><p>但这两个限制也让数组的很多操作变得非常低效，比如在数组中删除、插入一个数据，为了内存数据的保证连续性，就需要做大量的数据搬移工作。</p><p>在面试的时候，面试官常常会问数组和链表的区别？很多人都回答说，“链表适合插入、删除，时间复杂度 <code>O(1)</code>；数组适合查找，查找时间复杂度为 <code>O(1)</code>”。实际上，这种表述是不准确的。</p><p>数组适合查找操作，但是查找的时间复杂度并不为 <code>O(1)</code>。即便是排好序的数组，用<strong>二分查找</strong>，时间复杂度也是 <code>O(logn)</code>。</p><p>所以，正确的表述应该是，数组支持随机访问，<strong>根据下标随机访问</strong>的时间复杂度为 <code>O(1)</code>。</p><h3 id="_2-修改元素" tabindex="-1"><a class="header-anchor" href="#_2-修改元素" aria-hidden="true">#</a> 2. 修改元素</h3><ul><li>修改指定索引位置的元素 <code>array.splice(index, 1, item)</code><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myArray3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 修改 索引 1 的位置的元素为 AA</span>
myArray2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//--&gt; [1, &quot;AA&quot;, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>修改指定索引位置的几个元素 <code>array.splice(index, number, item)</code><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myArray4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span>
myArray2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//--&gt; [1, 2, &quot;AA&quot;, &quot;BB&quot;, 5, 6, 7]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>改变元素的操作跟访问元素操作类似，访问操作不依赖于数组中元素个数，因此，「改变元素」的时间复杂度为 <code>O(1)</code>。</p><h3 id="_3-插入元素" tabindex="-1"><a class="header-anchor" href="#_3-插入元素" aria-hidden="true">#</a> 3. 插入元素</h3><ul><li>添加一个元素到数组的最后位置 <code>array.push(item)</code></li><li>在数组首位插入一个元素 <code>array.unshift(item)</code></li><li>在指定索引位置插入元素 <code>array.splice(index, 0, item)</code><blockquote><p>splice() 第二个参数为 0 时，表示插入数据。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 在 索引 0 的位置，插入 A</span>
myArray<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//--&gt; [&#39;A&#39;, 1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>假设数组的长度为 n，将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾给新来的数据，要将第 k ～ n 这部分的元素都顺序地往后挪一位。</p><ul><li>如果在数组的<strong>末尾插入</strong>元素，不需要移动数据，时间复杂度为 <code>O(1)</code>。</li><li>但如果在数组的<strong>开头插入</strong>元素，那所有的数据都要依次往后移动一位，所以最坏时间复杂度是<code>O(n)</code>。</li><li>因为每个位置插入元素的概率一样，所以<strong>平均情况</strong>时间复杂度为<code>(1 + 2 + … + n) / n = O(n)</code>。</li></ul><p>如果数组中的数据是有序的，在插入新元素时就必须搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，将某个新元素插入到第 k 个位置时，为了避免大规模的数据搬移，有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p><p>例如：数组 a 中存储了如下 5 个元素：a，b，c，d，e。要将元素 x 插入到第 3 个位置。只需将 c 放入到 a[5]，将 a[2]赋值为 x 即可。最后数组中的元素如下： a，b，x，d，e，c。</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>利用这种处理技巧，在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)。这个处理思想在<strong>快排</strong>中也会用到。</p><h3 id="_4-删除元素" tabindex="-1"><a class="header-anchor" href="#_4-删除元素" aria-hidden="true">#</a> 4. 删除元素</h3><ul><li>删除数组最后的元素 <code>array.pop()</code></li><li>删除数组首位的元素 <code>array.shift()</code></li><li>删除指定索引位置的元素 <code>array.splice(start, deleteCount)</code> 例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myArray2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 删除索引 3 位置起，2 个元素</span>
myArray2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//--&gt; [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p><p>和插入类似：</p><ul><li>如果<strong>删除数组末尾</strong>的数据，则最好情况时间复杂度为 <code>O(1)</code>；</li><li>如果<strong>删除开头</strong>的数据，则最坏情况时间复杂度为 <code>O(n)</code>；</li><li><strong>平均情况</strong>时间复杂度也为 <code>O(n)</code>。</li></ul><p>实际上，在某些特殊场景下，并不一定非得追求数组中数据的连续性。如果每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，再触发执行一次真正的删除操作，就可以大大减少了删除操作导致的数据搬移。这也是<strong>JVM 标记清除垃圾回收算法</strong>的核心思想。</p>`,43),b=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),y=t("h4",{id:"数组操作",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#数组操作","aria-hidden":"true"},"#"),e(" 数组操作")],-1),x=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),v=t("td",{style:{"text-align":"center"}},"189",-1),A={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/rotate-array",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},O={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0189",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"left"}},T=t("code",null,"数组",-1),B=t("code",null,"数学",-1),M=t("code",null,"双指针",-1),N={style:{"text-align":"left"}},w=t("td",{style:{"text-align":"center"}},"66",-1),I={style:{"text-align":"left"}},L={href:"https://leetcode.com/problems/plus-one",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"center"}},C={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0066",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"left"}},V=t("code",null,"数组",-1),z=t("code",null,"数学",-1),D={style:{"text-align":"left"}},F=t("td",{style:{"text-align":"center"}},"724",-1),H={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/find-pivot-index",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"center"}},U={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0724",target:"_blank",rel:"noopener noreferrer"},K={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),G=t("code",null,"前缀和",-1),Q={style:{"text-align":"left"}},W=t("td",{style:{"text-align":"center"}},"485",-1),X={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/max-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},$={style:{"text-align":"center"}},tt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0485",target:"_blank",rel:"noopener noreferrer"},nt={style:{"text-align":"left"}},et=t("code",null,"数组",-1),st={style:{"text-align":"left"}},at=t("td",{style:{"text-align":"center"}},"238",-1),ot={style:{"text-align":"left"}},lt={href:"https://leetcode.com/problems/product-of-array-except-self",target:"_blank",rel:"noopener noreferrer"},ct={style:{"text-align":"center"}},it={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0238",target:"_blank",rel:"noopener noreferrer"},pt={style:{"text-align":"left"}},rt=t("code",null,"数组",-1),dt=t("code",null,"前缀和",-1),ut={style:{"text-align":"left"}},_t=t("h4",{id:"二维数组",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二维数组","aria-hidden":"true"},"#"),e(" 二维数组")],-1),ht=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),mt=t("td",{style:{"text-align":"center"}},"498",-1),kt={style:{"text-align":"left"}},gt={href:"https://leetcode.com/problems/diagonal-traverse",target:"_blank",rel:"noopener noreferrer"},ft={style:{"text-align":"center"}},bt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0498",target:"_blank",rel:"noopener noreferrer"},yt={style:{"text-align":"left"}},xt=t("code",null,"数组",-1),vt=t("code",null,"矩阵",-1),At=t("code",null,"模拟",-1),jt={style:{"text-align":"left"}},qt=t("td",{style:{"text-align":"center"}},"48",-1),Ot={style:{"text-align":"left"}},Et={href:"https://leetcode.com/problems/rotate-image",target:"_blank",rel:"noopener noreferrer"},Tt={style:{"text-align":"center"}},Bt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0048",target:"_blank",rel:"noopener noreferrer"},Mt={style:{"text-align":"left"}},Nt=t("code",null,"数组",-1),wt=t("code",null,"数学",-1),It=t("code",null,"矩阵",-1),Lt={style:{"text-align":"left"}},St=t("td",{style:{"text-align":"center"}},"73",-1),Ct={style:{"text-align":"left"}},Rt={href:"https://leetcode.com/problems/set-matrix-zeroes",target:"_blank",rel:"noopener noreferrer"},Vt={style:{"text-align":"center"}},zt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0073",target:"_blank",rel:"noopener noreferrer"},Dt={style:{"text-align":"left"}},Ft=t("code",null,"数组",-1),Ht=t("code",null,"哈希表",-1),Jt=t("code",null,"矩阵",-1),Pt={style:{"text-align":"left"}},Ut=t("td",{style:{"text-align":"center"}},"54",-1),Kt={style:{"text-align":"left"}},Yt={href:"https://leetcode.com/problems/spiral-matrix",target:"_blank",rel:"noopener noreferrer"},Gt={style:{"text-align":"center"}},Qt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0054",target:"_blank",rel:"noopener noreferrer"},Wt={style:{"text-align":"left"}},Xt=t("code",null,"数组",-1),Zt=t("code",null,"矩阵",-1),$t=t("code",null,"模拟",-1),tn={style:{"text-align":"left"}},nn=t("td",{style:{"text-align":"center"}},"59",-1),en={style:{"text-align":"left"}},sn={href:"https://leetcode.com/problems/spiral-matrix-ii",target:"_blank",rel:"noopener noreferrer"},an={style:{"text-align":"center"}},on={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0059",target:"_blank",rel:"noopener noreferrer"},ln={style:{"text-align":"left"}},cn=t("code",null,"数组",-1),pn=t("code",null,"矩阵",-1),rn=t("code",null,"模拟",-1),dn={style:{"text-align":"left"}},un=t("td",{style:{"text-align":"center"}},"289",-1),_n={style:{"text-align":"left"}},hn={href:"https://leetcode.com/problems/game-of-life",target:"_blank",rel:"noopener noreferrer"},mn={style:{"text-align":"center"}},kn={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0289",target:"_blank",rel:"noopener noreferrer"},gn={style:{"text-align":"left"}},fn=t("code",null,"数组",-1),bn=t("code",null,"矩阵",-1),yn=t("code",null,"模拟",-1),xn={style:{"text-align":"left"}};function vn(An,jn){const o=i("ExternalLinkIcon"),a=i("RouterLink"),l=i("font");return r(),d("div",null,[f,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),b,y,c(" prettier-ignore "),t("table",null,[x,t("tbody",null,[t("tr",null,[v,t("td",A,[t("a",j,[e("轮转数组"),n(o)])]),t("td",q,[t("a",O,[e("[✓]"),n(o)])]),t("td",E,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[T]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[B]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[M]),_:1})]),t("td",N,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[w,t("td",I,[t("a",L,[e("加一"),n(o)])]),t("td",S,[t("a",C,[e("[✓]"),n(o)])]),t("td",R,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[V]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[z]),_:1})]),t("td",D,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[F,t("td",H,[t("a",J,[e("寻找数组的中心下标"),n(o)])]),t("td",P,[t("a",U,[e("[✓]"),n(o)])]),t("td",K,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Y]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:s(()=>[G]),_:1})]),t("td",Q,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[W,t("td",X,[t("a",Z,[e("最大连续 1 的个数"),n(o)])]),t("td",$,[t("a",tt,[e("[✓]"),n(o)])]),t("td",nt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[et]),_:1})]),t("td",st,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[at,t("td",ot,[t("a",lt,[e("除自身以外数组的乘积"),n(o)])]),t("td",ct,[t("a",it,[e("[✓]"),n(o)])]),t("td",pt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:s(()=>[dt]),_:1})]),t("td",ut,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])]),_t,c(" prettier-ignore "),t("table",null,[ht,t("tbody",null,[t("tr",null,[mt,t("td",kt,[t("a",gt,[e("对角线遍历"),n(o)])]),t("td",ft,[t("a",bt,[e("[✓]"),n(o)])]),t("td",yt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[xt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[vt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/simulation.html"},{default:s(()=>[At]),_:1})]),t("td",jt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[qt,t("td",Ot,[t("a",Et,[e("旋转图像"),n(o)])]),t("td",Tt,[t("a",Bt,[e("[✓]"),n(o)])]),t("td",Mt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Nt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[wt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[It]),_:1})]),t("td",Lt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[St,t("td",Ct,[t("a",Rt,[e("矩阵置零"),n(o)])]),t("td",Vt,[t("a",zt,[e("[✓]"),n(o)])]),t("td",Dt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Ft]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[Ht]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[Jt]),_:1})]),t("td",Pt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ut,t("td",Kt,[t("a",Yt,[e("螺旋矩阵"),n(o)])]),t("td",Gt,[t("a",Qt,[e("[✓]"),n(o)])]),t("td",Wt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Xt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[Zt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/simulation.html"},{default:s(()=>[$t]),_:1})]),t("td",tn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[nn,t("td",en,[t("a",sn,[e("螺旋矩阵 II"),n(o)])]),t("td",an,[t("a",on,[e("[✓]"),n(o)])]),t("td",ln,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[cn]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[pn]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/simulation.html"},{default:s(()=>[rn]),_:1})]),t("td",dn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[un,t("td",_n,[t("a",hn,[e("生命游戏"),n(o)])]),t("td",mn,[t("a",kn,[e("[✓]"),n(o)])]),t("td",gn,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[fn]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[bn]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/simulation.html"},{default:s(()=>[yn]),_:1})]),t("td",xn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const On=p(g,[["render",vn],["__file","array.html.vue"]]);export{On as default};
