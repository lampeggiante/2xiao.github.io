import{_ as r,r as p,o as d,c as k,a as n,b as s,d as t,w as a,e as i}from"./app--DHkBL1B.js";const v={},b=n("h1",{id:"_12-实现-diff-算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_12-实现-diff-算法","aria-hidden":"true"},"#"),s(" 12. 实现 Diff 算法")],-1),m={class:"hint-container info"},g=n("p",{class:"hint-container-title"},"摘要",-1),h=n("ul",null,[n("li",null,"Diff 算法简介"),n("li",null,"实现单节点 Diff"),n("li",null,"实现多节点 Diff"),n("li",null,"处理 commit 阶段")],-1),f={href:"https://github.com/2xiao/my-react/tree/v1.12",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"git tag v1.12",-1),w=i('<h2 id="_1-diff-算法简介" tabindex="-1"><a class="header-anchor" href="#_1-diff-算法简介" aria-hidden="true">#</a> 1. Diff 算法简介</h2><p>React 的 Diff 算法用于比较虚拟 DOM 树的不同版本，并计算出最小的更新操作，以减少实际 DOM 操作的数量。它的核心思想是尽量复用已有的 DOM 节点，而不是直接重新创建整个 DOM 树，以减少不必要的 DOM 操作，提高性能，确保只有必要的部分被更新。</p><p>以下是 React Diff 算法的主要步骤：</p><ol><li><p><strong>树的遍历：</strong> React 会同时遍历新旧两棵树的节点，对比它们的差异。遍历过程是深度优先的，从根节点开始递归。</p></li><li><p><strong>节点比较：</strong> 对比新旧节点，首先比较节点类型，如果类型不同，则认为这两个节点是不同的，需要进行替换。如果类型相同，则进一步比较节点的属性（例如，className、style 等）以及子节点。</p></li><li><p><strong>子节点递归：</strong> 如果节点类型相同，React 会递归比较子节点。这里采用的是 Diff 算法的核心策略，即同层比较，而不进行跨层比较。</p></li><li><p><strong>列表节点的处理：</strong> 当处理列表时，React 会给列表中的每个子节点分配一个唯一的 key 值。这样在更新时，React 可以通过 key 值快速定位到相应的节点，提高对比效率。</p></li><li><p><strong>差异记录：</strong> 在比较的过程中，React 会记录下需要进行的更新操作，包括插入、更新、移动和删除等，这些操作被称为差异（diff）。</p></li><li><p><strong>差异合并：</strong> 最后，React 将所有的差异合并成一个更新队列，然后批量执行这些更新，最终反映在实际的 DOM 操作上。</p></li></ol><p><code>reconcileChildren</code>（协调子节点）函数是 Diff 算法的核心，它递归地比较和更新新旧子节点，决定是否需要对子节点进行插入、更新、移动或删除的操作。在其内部，还会调用 <code>reconcileSingleElement</code>、<code>reconcileChildrenArray</code> 等函数来处理具体的更新操作。</p><h2 id="_2-实现单节点-diff" tabindex="-1"><a class="header-anchor" href="#_2-实现单节点-diff" aria-hidden="true">#</a> 2. 实现单节点 Diff</h2><p>单节点的 Diff 算法是指组件更新后是单节点，可能有以下几种情况（其中 <code>ABC</code> 代表组件的 <code>type</code>，<code>123</code> 代表组件的 <code>key</code>）：</p><ul><li><code>A1 -&gt; A1</code>：<code>type</code> 和 <code>key</code> 都相同，可复用；</li><li><code>A1 -&gt; A2</code>：<code>type</code> 相同，<code>key</code> 不同，不可复用；</li><li><code>A1 -&gt; B1</code>：<code>type</code> 不同，<code>key</code> 相同，不可复用；</li><li><code>A1B2C3 -&gt; A1</code>：其中一个节点的 <code>type</code> 和 <code>key</code> 都相同，可复用该节点，删除其他兄弟节点；</li><li><code>A1B2C3 -&gt; B1</code>：<code>type</code> 不同，<code>key</code> 不同，不可复用；</li></ul>',8),F=n("code",null,"reconcileSingleElement",-1),_=n("code",null,"reconcileSingleTextNode",-1),x=n("code",null,"A1 -> A1",-1),C=n("code",null,"A1 -> A2",-1),N=n("code",null,"A1 -> B1",-1),T=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/childFiber.ts"),s(`
`),n("span",{class:"token comment"},"// 处理单个 Element 节点的情况"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reconcileSingleElement"),n("span",{class:"token punctuation"},"("),s(`
	returnFiber`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
	currentFiber`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
	element`),n("span",{class:"token operator"},":"),s(` ReactElementType
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 组件的更新阶段"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("currentFiber "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("currentFiber"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" element"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token punctuation"},"."),s("$$"),n("span",{class:"token keyword"},"typeof"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"REACT_ELEMENT_TYPE"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("currentFiber"),n("span",{class:"token punctuation"},"."),s("type "),n("span",{class:"token operator"},"==="),s(" element"),n("span",{class:"token punctuation"},"."),s("type"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
					`),n("span",{class:"token comment"},"// key 和 type 都相同，当前节点可以复用旧的 Fiber 节点"),s(`
					`),n("span",{class:"token keyword"},"const"),s(" existing "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"useFiber"),n("span",{class:"token punctuation"},"("),s("currentFiber"),n("span",{class:"token punctuation"},","),s(" element"),n("span",{class:"token punctuation"},"."),s("props"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
					existing`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" returnFiber"),n("span",{class:"token punctuation"},";"),s(`
					`),n("span",{class:"token comment"},"// 剩下的兄弟节点标记删除"),s(`
					`),n("span",{class:"token function"},"deleteRemainingChildren"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},"."),s("sibling"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
					`),n("span",{class:"token keyword"},"return"),s(" existing"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token punctuation"},"}"),s(`
				`),n("span",{class:"token comment"},"// key 相同，但 type 不同，删除所有旧的 Fiber 节点"),s(`
				`),n("span",{class:"token function"},"deleteRemainingChildren"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
					`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'还未实现的 React 类型'"),n("span",{class:"token punctuation"},","),s(" element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
					`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token punctuation"},"}"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// key 不同，删除当前旧的 Fiber 节点，继续遍历兄弟节点"),s(`
			`),n("span",{class:"token function"},"deleteChild"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			currentFiber `),n("span",{class:"token operator"},"="),s(" currentFiber"),n("span",{class:"token punctuation"},"."),s("sibling"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// 创建新的 Fiber 节点"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" fiber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createFiberFromElement"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	fiber`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" returnFiber"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/childFiber.ts"),s(`
`),n("span",{class:"token comment"},"// 处理文本节点的情况"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reconcileSingleTextNode"),n("span",{class:"token punctuation"},"("),s(`
	returnFiber`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
	currentFiber`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
	content`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"number"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("currentFiber "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 组件的更新阶段"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("currentFiber"),n("span",{class:"token punctuation"},"."),s("tag "),n("span",{class:"token operator"},"==="),s(" HostText"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 复用旧的 Fiber 节点"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" existing "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"useFiber"),n("span",{class:"token punctuation"},"("),s("currentFiber"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" content "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			existing`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" returnFiber"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"deleteRemainingChildren"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},"."),s("sibling"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),s(" existing"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 删除旧的 Fiber 节点"),s(`
			`),n("span",{class:"token function"},"deleteChild"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			currentFiber `),n("span",{class:"token operator"},"="),s(" currentFiber"),n("span",{class:"token punctuation"},"."),s("sibling"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// 创建新的 Fiber 节点"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" fiber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FiberNode"),n("span",{class:"token punctuation"},"("),s("HostText"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" content "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	fiber`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" returnFiber"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=i(`<p>其中 <code>deleteRemainingChildren</code> 函数用于删除当前节点的所有兄弟节点：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token comment">// 删除当前节点的所有兄弟节点</span>
<span class="token keyword">function</span> <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	currentFirstChild<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> childToDelete <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>childToDelete <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> childToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
		childToDelete <span class="token operator">=</span> childToDelete<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-实现多节点-diff" tabindex="-1"><a class="header-anchor" href="#_3-实现多节点-diff" aria-hidden="true">#</a> 3. 实现多节点 Diff</h2><p>同级多节点的 Diff 算法是指组件更新后有多个节点，<code>newChild</code> 是一个节点数组。多节点 Diff 和 单节点 Diff 的区别是：对于单节点 Diff，主要需要执行 <strong>插入 <code>Placement</code></strong> 和 <strong>删除 <code>ChildDeletion</code></strong> 操作，而对于多节点 Diff，则多了 <strong>移动 <code>Placement</code></strong> 操作。</p><p>以下是多节点 Diff 算法的主要流程：</p><ol><li><p><strong>保存同级节点信息：</strong></p><ul><li>创建一个 Map（<code>existingChildren</code>），将 <code>current</code> 中所有同级 Fiber 节点保存在 Map 中。Key 值为节点的 <code>key</code> 或者节点在兄弟节点中的位置索引。这个 Map 用于后续判断新节点是否可复用以及标记删除操作；</li><li>通过使用 Map 数据结构，避免了在每一轮循环中进行线性搜索，提高了复用性能；</li></ul></li><li><p><strong>遍历新节点数组，判断是否可复用：</strong></p><ul><li>遍历新节点数组，对于每个新节点，调用 <code>updateFromMap</code> 函数判断是否可以复用现有的 Fiber 节点，或者需要创建新的 Fiber 节点；</li></ul></li><li><p><strong>标记插入或移动操作：</strong></p><ul><li>对于可复用的新节点，标记其索引为当前位置，将其 <code>return</code> 指针指向当前组件的父节点；</li><li>如果不需要追踪副作用（<code>shouldTrackSideEffects</code> 为 <code>false</code>），直接继续遍历下一个节点；</li><li>如果需要追踪副作用，检查当前节点是首屏渲染阶段还是组件更新阶段，若是组件更新阶段，比较其索引是否小于 <code>lastPlacedIndex</code>，若小于，标记为移动操作；否则，不用移动；</li><li>如果是首屏渲染阶段，标记为插入操作；</li></ul></li><li><p><strong>标记删除操作：</strong></p><ul><li>遍历 Map 中剩余的未匹配的 <code>current</code> Fiber 节点，执行删除操作，确保删除不再需要的节点；</li></ul></li></ol><p>代码实现如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token keyword">function</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	currentFirstChild<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	newChild<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 最后一个可复用 Fiber 在 current 中的 index</span>
	<span class="token keyword">let</span> lastPlacedIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">// 创建的第一个新 Fiber</span>
	<span class="token keyword">let</span> firstNewFiber<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token comment">// 创建的最后一个新 Fiber</span>
	<span class="token keyword">let</span> lastNewFiber<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token comment">// 1. 保存同级节点信息</span>
	<span class="token keyword">const</span> existingChildren<span class="token operator">:</span> ExistingChildren <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> current <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> keyToUse <span class="token operator">=</span>
			current<span class="token punctuation">.</span>key <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> current<span class="token punctuation">.</span>key <span class="token operator">:</span> current<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		existingChildren<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>keyToUse<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>
		current <span class="token operator">=</span> current<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 2. 遍历新节点数组，判断是否可复用</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChild<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> after <span class="token operator">=</span> newChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> existingChildren<span class="token punctuation">,</span> i<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 3. 标记插入或移动操作</span>
		newFiber<span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
		newFiber<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>lastNewFiber <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			lastNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
			firstNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			lastNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
			lastNewFiber <span class="token operator">=</span> lastNewFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">const</span> current <span class="token operator">=</span> newFiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> current<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">&lt;</span> lastPlacedIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 标记移动</span>
				newFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Placement<span class="token punctuation">;</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 不移动</span>
				lastPlacedIndex <span class="token operator">=</span> oldIndex<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 首屏渲染阶段，标记插入</span>
			newFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Placement<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 4. 标记删除操作</span>
	existingChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> firstNewFiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遍历新节点数组时，调用了 <code>updateFromMap</code> 函数来更新 Fiber 树中的子节点，根据新的元素（<code>element</code>）与已有的子节点映射（<code>existingChildren</code>）进行比较，判断是否可以复用现有的 Fiber 节点，或者需要创建新的 Fiber 节点。主要的实现思路如下：</p><ol><li><p><strong>处理 HostText（文本节点）：</strong></p><ul><li>如果元素是字符串或数字，表示是文本节点。</li><li>尝试从已有子节点映射中找到相同 key 的节点。</li><li>如果找到并且节点是文本节点，可以复用旧的 Fiber 节点；否则，创建一个新的文本节点的 Fiber 节点。</li></ul></li><li><p><strong>处理 HostComponent（普通 DOM 节点）：</strong></p><ul><li>如果元素是对象且不为 <code>null</code>，判断其 <code>$$typeof</code> 属性。</li><li>如果 <code>$$typeof</code> 是 <code>REACT_ELEMENT_TYPE</code>，表示是 React 元素。</li><li>尝试从已有子节点映射中找到相同 key 的节点。</li><li>如果找到并且节点类型相同，可以复用旧的 Fiber 节点，更新其属性；否则，根据元素创建新的 Fiber 节点。</li></ul></li><li><p><strong>其他情况的处理：</strong></p><ul><li>对于其他类型的元素，例如数组类型（<code>REACT_FRAGMENT_TYPE</code>）或尚未实现的情况，可以进行相应的处理或者输出警告信息。</li><li>最后返回复用的或新创建的 Fiber 节点，如果无法处理当前元素类型，返回 <code>null</code>。</li></ul></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token keyword">function</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	existingChildren<span class="token operator">:</span> ExistingChildren<span class="token punctuation">,</span>
	index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	element<span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> keyToUse <span class="token operator">=</span> element<span class="token punctuation">.</span>key <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> element<span class="token punctuation">.</span>key <span class="token operator">:</span> index<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> before <span class="token operator">=</span> existingChildren<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// HostText</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 可复用，复用旧的 Fiber 节点</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>before <span class="token operator">&amp;&amp;</span> before<span class="token punctuation">.</span>tag <span class="token operator">===</span> HostText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			existingChildren<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keyToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>before<span class="token punctuation">,</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> element <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 不可复用，创建新的 Fiber 节点</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span>HostText<span class="token punctuation">,</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> element <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// HostComponent</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> element <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span>
				<span class="token comment">// 可复用，复用旧的 Fiber 节点</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>before <span class="token operator">&amp;&amp;</span> before<span class="token punctuation">.</span>type <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					existingChildren<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keyToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>before<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// 不可复用，创建新的 Fiber 节点</span>
				<span class="token keyword">return</span> <span class="token function">createFiberFromElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// TODO case REACT_FRAGMENT_TYPE</span>
			<span class="token keyword">default</span><span class="token operator">:</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// TODO 数组类型的element，如：&lt;ul&gt;{[&lt;li/&gt;, &lt;li/&gt;]}&lt;/ul&gt;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;还未实现数组类型的child&#39;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-处理-commit-阶段" tabindex="-1"><a class="header-anchor" href="#_4-处理-commit-阶段" aria-hidden="true">#</a> 4. 处理 commit 阶段</h2><p>刚刚我们在为节点标记移动和插入 flags 时，标记的都是 <code>Placement</code>，对于插入操作，之前对应的 DOM 方法是 <code>parentNode.appendChild</code>，现在为了实现移动操作，还需要支持 <code>parentNode.insertBefore</code>。</p><p><code>parentNode.insertBefore</code> 需要找到「目标兄弟 Host 节点」，也就是在哪个兄弟节点前插入，主要考虑两个因素：</p><ol><li><p><strong>不稳定的 Host 节点不能作为目标兄弟 Host 节点：</strong> 在 React 中，如果一个 Host 节点标记有 <code>Placement</code> 标记，表示它是一个不稳定的节点，不适合作为目标兄弟节点。所以需要在寻找兄弟节点的过程中，排除这些不稳定的节点。</p></li><li><p><strong>兄弟 Host 节点可能并不是目标 Fiber 节点的直接兄弟节点：</strong> 以下面两种情况为例：</p></li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 情况一：B 是函数组件，A 的兄弟 Host 节点是 B 的 child 节点，即 &lt;div /&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token comment">// 情况二：A 的兄弟 Host 节点是 A 的父节点的兄弟节点，即 &lt;div /&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们就来实现 <code>getHostSibling</code> 函数，获取给定 Fiber 节点的目标兄弟 Host 节点，从而支持 <code>parentNode.insertBefore</code> 操作。</p><p>通过向上和向下遍历 Fiber 树，找到目标节点的直接兄弟节点或者父节点的兄弟节点。在遍历过程中，需要处理以下情况：</p><ul><li>向上遍历：如果当前节点没有兄弟节点，就向上遍历到父节点，直到找到有兄弟节点的节点或者到达根节点。</li><li>向下遍历：如果当前节点的兄弟节点不是 Host 节点或者文本节点，就继续向下遍历找到一个 Host 节点或者文本节点，作为目标兄弟节点。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/commitWork.ts</span>
<span class="token comment">// 获取兄弟 Host 节点</span>
<span class="token keyword">const</span> <span class="token function-variable function">getHostSibling</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> node<span class="token operator">:</span> FiberNode <span class="token operator">=</span> fiber<span class="token punctuation">;</span>
	findSibling<span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 没有兄弟节点时，向上遍历</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>sibling <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> parent <span class="token operator">=</span> node<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>
				parent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
				parent<span class="token punctuation">.</span>tag <span class="token operator">==</span> HostComponent <span class="token operator">||</span>
				parent<span class="token punctuation">.</span>tag <span class="token operator">==</span> HostRoot
			<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			node <span class="token operator">=</span> parent<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 向下遍历</span>
		node<span class="token punctuation">.</span>sibling<span class="token punctuation">.</span>return <span class="token operator">=</span> node<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
		node <span class="token operator">=</span> node<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> HostText <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> HostComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 不稳定的 Host 节点不能作为目标兄弟 Host 节点</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Placement<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span> findSibling<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span> findSibling<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				node<span class="token punctuation">.</span>child<span class="token punctuation">.</span>return <span class="token operator">=</span> node<span class="token punctuation">;</span>
				node <span class="token operator">=</span> node<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Placement<span class="token punctuation">)</span> <span class="token operator">==</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> node<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到目标兄弟 Host 节点之后，我们就可以在 <code>commitPlacement</code> 函数中执行移动该 DOM 节点操作：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/commitWork.ts</span>
<span class="token comment">// 执行 DOM 插入操作</span>
<span class="token comment">// 将 FiberNode 对应的 DOM 插入 parent DOM 中</span>
<span class="token comment">// 或移动 FiberNode 对应的 DOM</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitPlacement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// parent DOM</span>
	<span class="token keyword">const</span> hostParent <span class="token operator">=</span> <span class="token function">getHostParent</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span> <span class="token keyword">as</span> Container<span class="token punctuation">;</span>

	<span class="token comment">// Host sibling</span>
	<span class="token keyword">const</span> sibling <span class="token operator">=</span> <span class="token function">getHostSibling</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">appendPlacementNodeIntoContainer</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">appendPlacementNodeIntoContainer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	finishedWork<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	hostParent<span class="token operator">:</span> Container<span class="token punctuation">,</span>
	before<span class="token operator">?</span><span class="token operator">:</span> Instance
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag <span class="token operator">===</span> HostComponent <span class="token operator">||</span> finishedWork<span class="token punctuation">.</span>tag <span class="token operator">===</span> HostText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>before<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 执行移动操作</span>
			<span class="token function">insertChildToContainer</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 执行插入操作</span>
			<span class="token function">appendChildToContainer</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> hostParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>移动 DOM 节点的函数我们在 <code>hostConfig.ts</code> 中实现，就是将待移动的节点插入到我们找到的目标兄弟 Host 节点前面：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/hostConfig.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insertChildToContainer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	child<span class="token operator">:</span> Instance<span class="token punctuation">,</span>
	container<span class="token operator">:</span> Container<span class="token punctuation">,</span>
	before<span class="token operator">:</span> Instance
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	container<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>至此，我们就实现了单节点和多节点的 Diff 算法，但节点为 <code>Fragment</code> 和嵌套数组的情况暂未支持，下一节我们就来实现 <code>Fragment</code>，使得 Diff 算法更完备。</p>`,26),A=n("code",null,"git tag v1.12",-1),H={href:"https://github.com/2xiao/my-react/tree/v1.12",target:"_blank",rel:"noopener noreferrer"};function M(P,R){const c=p("ExternalLinkIcon"),l=p("RouterLink"),u=p("CodeTabs");return d(),k("div",null,[b,n("div",m,[g,h,n("p",null,[s("相关代码可在 "),n("a",f,[y,t(c)]),s(" 查看")])]),w,n("p",null,[s("其逻辑主要在 "),F,s(" 和 "),_,s(" 函数中实现，在"),t(l,{to:"/my-react/10.html"},{default:a(()=>[s("第 10 节")]),_:1}),s("中，我们已经实现了这两个函数的基础情况（"),x,s("、"),C,s("、"),N,s("），现在只需要稍加改造，增加多节点变单节点情况的判断，遍历并处理所有兄弟节点：")]),t(u,{id:"110",data:[{id:"reconcileSingleElement"},{id:"reconcileSingleTextNode"}]},{title0:a(({value:e,isActive:o})=>[s("reconcileSingleElement")]),title1:a(({value:e,isActive:o})=>[s("reconcileSingleTextNode")]),tab0:a(({value:e,isActive:o})=>[T]),tab1:a(({value:e,isActive:o})=>[D]),_:1}),E,n("p",null,[s("相关代码可在 "),A,s(" 查看，地址："),n("a",H,[s("https://github.com/2xiao/my-react/tree/v1.12"),t(c)])])])}const O=r(v,[["render",M],["__file","12.html.vue"]]);export{O as default};
