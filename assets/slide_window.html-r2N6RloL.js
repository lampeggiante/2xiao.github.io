import{_ as u,r as d,o as r,c as k,d as t,w as e,b as s,a as n,f as c,e as i}from"./app-GnK0vSxb.js";const _={},m=i(`<h1 id="_3-11-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_3-11-滑动窗口" aria-hidden="true">#</a> 3.11 滑动窗口</h1><h2 id="滑动窗口解题框架" tabindex="-1"><a class="header-anchor" href="#滑动窗口解题框架" aria-hidden="true">#</a> 滑动窗口解题框架</h2><p>滑动窗口算法技巧主要用来解决子数组问题，比如让你寻找符合某个条件的最长/最短子数组。</p><p>如果用暴力解的话，你需要嵌套 <code>for</code> 循环这样穷举所有子数组，时间复杂度是 <code>O(n^2)</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// nums[i, j] 是一个子数组</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>滑动窗口算法技巧的思路也不难，就是维护一个窗口，不断滑动，然后更新答案，该算法的大致逻辑如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 增大窗口</span>
    window<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缩小窗口</span>
        window<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于滑动窗口算法框架写出的代码，时间复杂度是 <code>O(n)</code>，比嵌套 <code>for</code> 循环的暴力解法效率高。</p><blockquote><p>为啥是 <code>O(n)</code>？</p><p>肯定有读者要问了，滑动窗口框架不也用了一个嵌套 <code>while</code> 循环？为啥复杂度是 <code>O(n)</code> 呢？</p><p>简单说，指针 <code>left</code>, <code>right</code> 不会回退（它们的值只增不减），所以字符串/数组中的每个元素都只会进入窗口一次，然后被移出窗口一次，不会说有某些元素多次进入和离开窗口，所以算法的时间复杂度就和字符串/数组的长度成正比。</p><p>反观嵌套 <code>for</code> 循环的暴力解法，那个 <code>j</code> 会回退，所以某些元素会进入和离开窗口多次，所以时间复杂度就是 <code>O(n^2)</code> 了。</p></blockquote><p>下面我总结了一套滑动窗口算法的代码框架，以后遇到相关的问题，只需默写出来如下框架然后改三个地方就行，保证不会出 bug。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 滑动窗口算法伪码框架</span>
<span class="token keyword">var</span> <span class="token function-variable function">slidingWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用合适的数据结构记录窗口中的数据，根据具体场景变通</span>
    <span class="token comment">// 比如说，我想记录窗口中元素出现的次数，就用 map</span>
    <span class="token comment">// 如果我想记录窗口中的元素和，就可以只用一个 int</span>
    <span class="token keyword">var</span> window <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 增大窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token operator">...</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">var</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            window<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩小窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们就用四道 LeetCode 原题来实践一下这个框架。</p><h3 id="最小覆盖子串" tabindex="-1"><a class="header-anchor" href="#最小覆盖子串" aria-hidden="true">#</a> 最小覆盖子串</h3>`,13),h={id:"📌-76-最小覆盖子串-leetcode",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#📌-76-最小覆盖子串-leetcode","aria-hidden":"true"},"#",-1),v={href:"https://leetcode.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},g=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),f=n("p",null,[s("给你一个字符串 "),n("code",null,"s"),s(" 、一个字符串 "),n("code",null,"t"),s(" 。返回 "),n("code",null,"s"),s(" 中涵盖 "),n("code",null,"t"),s(" 所有字符的最小子串。如果 "),n("code",null,"s"),s(" 中不存在涵盖 "),n("code",null,"t"),s(" 所有字符的子串，则返回空字符串 "),n("code",null,'""'),s(" 。")],-1),y=n("ul",null,[n("li",null,[s("对于 "),n("code",null,"t"),s(" 中重复字符，我们寻找的子字符串中该字符数量必须不少于 "),n("code",null,"t"),s(" 中该字符数量。")]),n("li",null,[s("如果 "),n("code",null,"s"),s(" 中存在这样的子串，我们保证它是唯一的答案。")])],-1),w=n("p",null,[n("strong",null,"示例 1：")],-1),x=n("blockquote",null,[n("p",null,'输入：s = "ADOBECODEBANC", t = "ABC"'),n("p",null,'输出："BANC"'),n("p",null,`解释：最小覆盖子串 "BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。`)],-1),q=n("p",null,[n("strong",null,"示例 2：")],-1),j=n("blockquote",null,[n("p",null,'输入：s = "a", t = "a"'),n("p",null,'输出："a"'),n("p",null,"解释：整个字符串 s 是最小覆盖子串。")],-1),M=n("p",null,[n("strong",null,"示例 3:")],-1),C=n("blockquote",null,[n("p",null,'输入: s = "a", t = "aa"'),n("p",null,'输出: ""'),n("p",null,"解释: t 中两个字符 'a' 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。")],-1),I=n("p",null,[n("strong",null,"提示：")],-1),A=n("ul",null,[n("li",null,[n("code",null,"m == s.length")]),n("li",null,[n("code",null,"n == t.length")]),n("li",null,[n("code",null,"1 <= m, n <= 105")]),n("li",null,[n("code",null,"s"),s(" 和 "),n("code",null,"t"),s(" 由英文字母组成")])],-1),E=n("p",null,[n("strong",null,"进阶"),s("：你能设计一个在 "),n("code",null,"o(m+n)"),s(" 时间内解决此问题的算法吗？")],-1),O=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [76. 最小覆盖子串 - LeetCode](https://leetcode.com/problems/minimum-window-substring/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你一个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 、一个字符串 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 。返回 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 中涵盖 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 所有字符的最小子串。如果 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 中不存在涵盖 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 所有字符的子串，则返回空字符串 "),n("span",{class:"token code-snippet code keyword"},'`""`'),s(` 。

`),n("span",{class:"token list punctuation"},"-"),s(" 对于 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 中重复字符，我们寻找的子字符串中该字符数量必须不少于 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(` 中该字符数量。
`),n("span",{class:"token list punctuation"},"-"),s(" 如果 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(` 中存在这样的子串，我们保证它是唯一的答案。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "ADOBECODEBANC", t = "ABC"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出："BANC"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：最小覆盖子串 "BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "a", t = "a"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出："a"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：整个字符串 s 是最小覆盖子串。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 3:"),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入: s = "a", t = "aa"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出: ""
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释: t 中两个字符 'a' 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`m == s.length`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`n == t.length`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= m, n <= 105`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(` 由英文字母组成

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),s("：你能设计一个在 "),n("span",{class:"token code-snippet code keyword"},"`o(m+n)`"),s(` 时间内解决此问题的算法吗？
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=i(`<p>如果我们使用暴力解法，代码大概是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">:</span>j<span class="token punctuation">]</span> 包含 t 的所有字母<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            更新答案
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路很直接，但是显然，这个算法的复杂度大于 <code>O(n^2)</code> 了，不好。</p><p>滑动窗口算法的思路是这样：</p><ol><li>使用双指针中的左右指针，初始化 <code>left = right = 0</code>，把索引左闭右开区间 <code>[left, right)</code> 称为一个「窗口」；</li><li>不断地增加 <code>right</code> 指针扩大窗口 <code>[left, right)</code>，直到窗口中的字符串符合要求（包含了 <code>t</code> 中的所有字符）；</li><li>停止增加 <code>right</code>，转而不断增加 <code>left</code> 指针缩小窗口 <code>[left, right)</code>，直到窗口中的字符串不再符合要求（不包含 <code>t</code> 中的所有字符了）；同时，每次增加 <code>left</code>，都要更新一轮结果；</li><li>重复第 2 和第 3 步，直到 <code>right</code> 到达字符串 <code>s</code> 的尽头；</li></ol><p>第 2 步相当于在寻找一个「可行解」，第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，一伸一缩，不断向右滑动，这就是「滑动窗口」这个名字的来历。</p><p>现在我们来看看这个滑动窗口代码框架怎么用：</p><p>首先，初始化 <code>window</code> 和 <code>need</code> 两个哈希表，记录窗口中的字符和需要凑齐的字符：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 记录 window 中的字符出现次数</span>
<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 记录所需的字符出现次数</span>
<span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用 left 和 right 变量初始化窗口的两端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// c 是将移入窗口的字符</span>
	<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">// 扩大窗口</span>
	right<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token comment">// 进行窗口内数据的一系列更新</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>valid</code> 变量表示窗口中满足 <code>need</code> 条件的字符个数，如果 <code>valid</code> 和 <code>need.size</code> 的大小相同，则说明窗口已满足条件，已经完全覆盖了串 <code>t</code>。</p><p>现在开始套模板，只需要思考以下几个问题：</p><ol><li>什么时候应该移动 right 扩大窗口？窗口加入字符时，应该更新哪些数据？</li><li>什么时候窗口应该暂停扩大，开始移动 left 缩小窗口？从窗口移出字符时，应该更新哪些数据？</li><li>我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？</li></ol><p>如果一个字符进入窗口，应该增加 <code>window</code> 计数器；如果一个字符将移出窗口的时候，应该减少 <code>window</code> 计数器；当 <code>valid</code> 满足 <code>need</code> 时应该收缩窗口；应该在收缩窗口的时候更新最终结果。</p><p>下面是完整代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">minWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">// 记录最小覆盖子串的起始索引及长度</span>
	<span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		len <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// c 是将移入窗口的字符</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token comment">// 扩大窗口</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				valid<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里更新最小覆盖子串</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				start <span class="token operator">=</span> left<span class="token punctuation">;</span>
				len <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// d 是将移出窗口的字符</span>
			<span class="token keyword">let</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token comment">// 缩小窗口</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					valid<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 返回最小覆盖子串</span>
	<span class="token keyword">return</span> len <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，当我们发现某个字符在 <code>window</code> 的数量满足了 <code>need</code> 的需要，就要更新 <code>valid</code>，表示有一个字符已经满足要求。而且，两次对窗口内数据的更新操作是完全对称的。</p><p>当 <code>valid == need.size()</code> 时，说明 <code>t</code> 中所有字符已经被覆盖，已经得到一个可行的覆盖子串，现在应该开始收缩窗口了，以便得到「最小覆盖子串」。</p><p>移动 <code>left</code> 收缩窗口时，窗口内的字符都是可行解，所以应该在收缩窗口的阶段进行最小覆盖子串的更新，以便从可行解中找到长度最短的最终结果。</p><h3 id="字符串排列" tabindex="-1"><a class="header-anchor" href="#字符串排列" aria-hidden="true">#</a> 字符串排列</h3>`,21),L={id:"📌-567-字符串的排列-leetcode",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#📌-567-字符串的排列-leetcode","aria-hidden":"true"},"#",-1),T={href:"https://leetcode.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"},D=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),H=n("p",null,[s("给你两个字符串 "),n("code",null,"s1"),s(" 和 "),n("code",null,"s2"),s(" ，写一个函数来判断 "),n("code",null,"s2"),s(" 是否包含 "),n("code",null,"s1"),s(" 的排列。如果是，返回 "),n("code",null,"true"),s(" ；否则，返回 "),n("code",null,"false"),s(" 。")],-1),K=n("p",null,[s("换句话说，"),n("code",null,"s1"),s(" 的排列之一是 "),n("code",null,"s2"),s(" 的 "),n("strong",null,"子串"),s(" 。")],-1),z=n("p",null,[n("strong",null,"示例 1：")],-1),S=n("blockquote",null,[n("p",null,'输入：s1 = "ab" s2 = "eidbaooo"'),n("p",null,"输出：true"),n("p",null,'解释：s2 包含 s1 的排列之一 ("ba").')],-1),R=n("p",null,[n("strong",null,"示例 2：")],-1),V=n("blockquote",null,[n("p",null,'输入：s1= "ab" s2 = "eidboaoo"'),n("p",null,"输出：false")],-1),P=n("p",null,[n("strong",null,"提示：")],-1),U=n("ul",null,[n("li",null,[n("code",null,"1 <= s1.length, s2.length <= 10^4")]),n("li",null,[n("code",null,"s1"),s(" 和 "),n("code",null,"s2"),s(" 仅包含小写字母")])],-1),W=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [567. 字符串的排列 - LeetCode](https://leetcode.com/problems/permutation-in-string/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你两个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(" ，写一个函数来判断 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(" 是否包含 "),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 的排列。如果是，返回 "),n("span",{class:"token code-snippet code keyword"},"`true`"),s(" ；否则，返回 "),n("span",{class:"token code-snippet code keyword"},"`false`"),s(` 。

换句话说，`),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 的排列之一是 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(" 的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"子串"),n("span",{class:"token punctuation"},"**")]),s(` 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s1 = "ab" s2 = "eidbaooo"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：true
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：s2 包含 s1 的排列之一 ("ba").

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s1= "ab" s2 = "eidboaoo"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：false

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= s1.length, s2.length <= 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(` 仅包含小写字母
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=i(`<p>这种题目，是明显的滑动窗口算法，相当于给你一个 <code>s1</code> 和一个 <code>s2</code>，请问你 <code>s2</code> 中是否存在一个子串，包含 <code>s1</code> 中所有字符且不包含其他字符。</p><p>对于这道题的解法代码，基本上和最小覆盖子串一模一样，只需要改变几个地方：</p><p>1、本题移动 <code>left</code> 缩小窗口的时机是窗口大小大于 <code>s1.length</code> 时，因为排列的长度应该是一样的。</p><p>2、当发现 <code>valid == need.size()</code> 时，就说明窗口中就是一个合法的排列，所以立即返回 <code>true</code>。</p><p>至于如何处理窗口的扩大和缩小，和最小覆盖子串完全相同，按照解题框架即可写出这道题的答案：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">checkInclusion</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				valid <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里判断是否找到了合法的子串</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">let</span> d <span class="token operator">=</span> s2<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>

			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					valid<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 未找到符合条件的子串</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="找所有字母异位词" tabindex="-1"><a class="header-anchor" href="#找所有字母异位词" aria-hidden="true">#</a> 找所有字母异位词</h3>`,7),G={id:"📌-438-找到字符串中所有字母异位词-leetcode",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#📌-438-找到字符串中所有字母异位词-leetcode","aria-hidden":"true"},"#",-1),Q={href:"https://leetcode.com/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},X=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),Y=n("p",null,[s("给定两个字符串 "),n("code",null,"s"),s(" 和 "),n("code",null,"p"),s("，找到 "),n("code",null,"s"),s(" 中所有 "),n("code",null,"p"),s(" 的 "),n("strong",null,"异位词"),s(" 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。")],-1),Z=n("p",null,[n("strong",null,"异位词"),s(" 指由相同字母重排列形成的字符串（包括相同的字符串）。")],-1),$=n("p",null,[n("strong",null,"示例 1：")],-1),nn=n("blockquote",null,[n("p",null,'输入：s = "cbaebabacd", p = "abc"'),n("p",null,"输出：[0,6]"),n("p",null,'解释：起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。'),n("p",null,'起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。')],-1),sn=n("p",null,[n("strong",null,"示例 2：")],-1),tn=n("blockquote",null,[n("p",null,'输入：s = "abab", p = "ab"'),n("p",null,'输出：[0,1,2] 解释：起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。'),n("p",null,'起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。'),n("p",null,'起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。')],-1),en=n("p",null,[n("strong",null,"提示：")],-1),an=n("ul",null,[n("li",null,[n("code",null,"1 <= s.length, p.length <= 10^4")]),n("li",null,[n("code",null,"s"),s(" 和 "),n("code",null,"p"),s(" 仅包含小写字母")])],-1),on=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [438. 找到字符串中所有字母异位词 - LeetCode](https://leetcode.com/problems/find-all-anagrams-in-a-string/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定两个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`p`"),s("，找到 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 中所有 "),n("span",{class:"token code-snippet code keyword"},"`p`"),s(" 的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"异位词"),n("span",{class:"token punctuation"},"**")]),s(` 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"异位词"),n("span",{class:"token punctuation"},"**")]),s(` 指由相同字母重排列形成的字符串（包括相同的字符串）。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "cbaebabacd", p = "abc"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[0,6]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "abab", p = "ab"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[0,1,2]
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= s.length, p.length <= 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`p`"),s(` 仅包含小写字母
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ln=i(`<p>这道题的解法，基本上和上一题 字符串排列 一模一样，只需要改变返回值，找到一个合法异位词（排列）之后将起始索引加入 <code>res</code> 即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">p</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findAnagrams</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token comment">// 记录结果</span>
		res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				valid<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> p<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 当窗口符合条件时，把起始索引加入 res</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">let</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>

			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					valid<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最长无重复子串" tabindex="-1"><a class="header-anchor" href="#最长无重复子串" aria-hidden="true">#</a> 最长无重复子串</h3>`,3),cn={id:"📌-3-无重复字符的最长子串-leetcode",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#📌-3-无重复字符的最长子串-leetcode","aria-hidden":"true"},"#",-1),dn={href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},un=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),rn=n("p",null,[s("给定一个字符串 "),n("code",null,"s"),s(" ，请你找出其中不含有重复字符的 "),n("strong",null,"最长子串"),s(" 的长度。")],-1),kn=n("p",null,[n("strong",null,"子字符串"),s(" 是字符串中连续的 "),n("strong",null,"非空"),s(" 字符序列。")],-1),_n=n("p",null,[n("strong",null,"示例 1：")],-1),mn=n("blockquote",null,[n("p",null,'输入：s = "abcabcbb"'),n("p",null,"输出：3"),n("p",null,'解释：因为无重复字符的最长子串是 "abc"，所以其长度为 3。')],-1),hn=n("p",null,[n("strong",null,"示例 2:")],-1),bn=n("blockquote",null,[n("p",null,'输入：s = "bbbbb"'),n("p",null,"输出：1"),n("p",null,'解释：因为无重复字符的最长子串是 "b"，所以其长度为 1。')],-1),vn=n("p",null,[n("strong",null,"示例 3:")],-1),gn=n("blockquote",null,[n("p",null,'输入：s = "pwwkew"'),n("p",null,"输出：3"),n("p",null,'解释：因为无重复字符的最长子串是 "wke"，所以其长度为 3。'),n("p",null,'请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。')],-1),fn=n("p",null,[n("strong",null,"提示：")],-1),yn=n("ul",null,[n("li",null,[n("code",null,"0 <= s.length <= 5 * 10^4")]),n("li",null,[n("code",null,"s"),s(" 由英文字母、数字、符号和空格组成")])],-1),wn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [3. 无重复字符的最长子串 - LeetCode](https://leetcode.com/problems/longest-substring-without-repeating-characters/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" ，请你找出其中不含有重复字符的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"最长子串"),n("span",{class:"token punctuation"},"**")]),s(` 的长度。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"子字符串"),n("span",{class:"token punctuation"},"**")]),s(" 是字符串中连续的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"非空"),n("span",{class:"token punctuation"},"**")]),s(` 字符序列。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "abcabcbb"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：3
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：因为无重复字符的最长子串是 "abc"，所以其长度为 3。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2:"),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "bbbbb"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：1
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：因为无重复字符的最长子串是 "b"，所以其长度为 1。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 3:"),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "pwwkew"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：3
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：因为无重复字符的最长子串是 "wke"，所以其长度为 3。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= s.length <= 5 * 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(` 由英文字母、数字、符号和空格组成
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),xn=i(`<p>这题变简单了，连 <code>need</code> 和 <code>valid</code> 都不需要，更新窗口内数据只需要简单的更新计数器 <code>window</code> 即可。</p><p>当 <code>window[c]</code> 值大于 <code>1</code> 时，说明窗口中存在重复字符，不符合条件，就该移动 <code>left</code> 缩小窗口了。</p><p>唯一需要注意的是，在哪里更新结果 <code>res</code> 呢？</p><p>这里和之前不一样，要在收缩窗口完成后更新 res，因为窗口收缩的 <code>while</code> 条件是存在重复元素，换句话说收缩完成后一定保证窗口中没有重复。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token comment">// 记录结果</span>
		res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 在这里更新答案</span>
		res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到子数组/子串相关的问题，只要能回答出来以下几个问题，就能运用滑动窗口算法：</p><ol><li>什么时候应该扩大窗口？</li><li>什么时候应该缩小窗口？</li><li>什么时候应该更新答案？</li></ol><p>好了，滑动窗口算法模板就讲到这里，希望你能理解其中的思想，记住算法模板并融会贯通。</p>`,8),qn=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),jn=n("h4",{id:"固定长度窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#固定长度窗口","aria-hidden":"true"},"#"),s(" 固定长度窗口")],-1),Mn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Cn=n("td",{style:{"text-align":"center"}},"1343",-1),In={style:{"text-align":"left"}},An={href:"https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",target:"_blank",rel:"noopener noreferrer"},En=n("td",{style:{"text-align":"center"}},null,-1),On={style:{"text-align":"left"}},Bn=n("code",null,"数组",-1),Ln=n("code",null,"滑动窗口",-1),Nn={style:{"text-align":"left"}},Tn=n("td",{style:{"text-align":"center"}},"643",-1),Dn={style:{"text-align":"left"}},Hn={href:"https://leetcode.com/problems/maximum-average-subarray-i",target:"_blank",rel:"noopener noreferrer"},Kn=n("td",{style:{"text-align":"center"}},null,-1),zn={style:{"text-align":"left"}},Sn=n("code",null,"数组",-1),Rn=n("code",null,"滑动窗口",-1),Vn={style:{"text-align":"left"}},Pn=n("td",{style:{"text-align":"center"}},"1052",-1),Un={style:{"text-align":"left"}},Wn={href:"https://leetcode.com/problems/grumpy-bookstore-owner",target:"_blank",rel:"noopener noreferrer"},Fn=n("td",{style:{"text-align":"center"}},null,-1),Gn={style:{"text-align":"left"}},Jn=n("code",null,"数组",-1),Qn=n("code",null,"滑动窗口",-1),Xn={style:{"text-align":"left"}},Yn=n("td",{style:{"text-align":"center"}},"1423",-1),Zn={style:{"text-align":"left"}},$n={href:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards",target:"_blank",rel:"noopener noreferrer"},ns=n("td",{style:{"text-align":"center"}},null,-1),ss={style:{"text-align":"left"}},ts=n("code",null,"数组",-1),es=n("code",null,"前缀和",-1),as=n("code",null,"滑动窗口",-1),os={style:{"text-align":"left"}},ls=n("td",{style:{"text-align":"center"}},"1456",-1),cs={style:{"text-align":"left"}},is={href:"https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length",target:"_blank",rel:"noopener noreferrer"},ps=n("td",{style:{"text-align":"center"}},null,-1),ds={style:{"text-align":"left"}},us=n("code",null,"字符串",-1),rs=n("code",null,"滑动窗口",-1),ks={style:{"text-align":"left"}},_s=n("td",{style:{"text-align":"center"}},"567",-1),ms={style:{"text-align":"left"}},hs={href:"https://leetcode.com/problems/permutation-in-string",target:"_blank",rel:"noopener noreferrer"},bs={style:{"text-align":"center"}},vs={style:{"text-align":"left"}},gs=n("code",null,"哈希表",-1),fs=n("code",null,"双指针",-1),ys=n("code",null,"字符串",-1),ws=n("code",null,"1+",-1),xs={style:{"text-align":"left"}},qs=n("td",{style:{"text-align":"center"}},"1100",-1),js={style:{"text-align":"left"}},Ms={href:"https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters",target:"_blank",rel:"noopener noreferrer"},Cs=n("td",{style:{"text-align":"center"}},null,-1),Is={style:{"text-align":"left"}},As=n("code",null,"哈希表",-1),Es=n("code",null,"字符串",-1),Os=n("code",null,"滑动窗口",-1),Bs={style:{"text-align":"left"}},Ls=n("td",{style:{"text-align":"center"}},"1151",-1),Ns={style:{"text-align":"left"}},Ts={href:"https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together",target:"_blank",rel:"noopener noreferrer"},Ds=n("td",{style:{"text-align":"center"}},null,-1),Hs={style:{"text-align":"left"}},Ks=n("code",null,"数组",-1),zs=n("code",null,"滑动窗口",-1),Ss={style:{"text-align":"left"}},Rs=n("td",{style:{"text-align":"center"}},"1176",-1),Vs={style:{"text-align":"left"}},Ps={href:"https://leetcode.com/problems/diet-plan-performance",target:"_blank",rel:"noopener noreferrer"},Us=n("td",{style:{"text-align":"center"}},null,-1),Ws={style:{"text-align":"left"}},Fs=n("code",null,"数组",-1),Gs=n("code",null,"滑动窗口",-1),Js={style:{"text-align":"left"}},Qs=n("td",{style:{"text-align":"center"}},"438",-1),Xs={style:{"text-align":"left"}},Ys={href:"https://leetcode.com/problems/find-all-anagrams-in-a-string",target:"_blank",rel:"noopener noreferrer"},Zs={style:{"text-align":"center"}},$s={style:{"text-align":"left"}},nt=n("code",null,"哈希表",-1),st=n("code",null,"字符串",-1),tt=n("code",null,"滑动窗口",-1),et={style:{"text-align":"left"}},at=n("td",{style:{"text-align":"center"}},"995",-1),ot={style:{"text-align":"left"}},lt={href:"https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips",target:"_blank",rel:"noopener noreferrer"},ct=n("td",{style:{"text-align":"center"}},null,-1),it={style:{"text-align":"left"}},pt=n("code",null,"位运算",-1),dt=n("code",null,"队列",-1),ut=n("code",null,"数组",-1),rt=n("code",null,"2+",-1),kt={style:{"text-align":"left"}},_t=n("td",{style:{"text-align":"center"}},"683",-1),mt={style:{"text-align":"left"}},ht={href:"https://leetcode.com/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},bt=n("td",{style:{"text-align":"center"}},null,-1),vt={style:{"text-align":"left"}},gt=n("code",null,"树状数组",-1),ft=n("code",null,"线段树",-1),yt=n("code",null,"队列",-1),wt=n("code",null,"5+",-1),xt={style:{"text-align":"left"}},qt=n("td",{style:{"text-align":"center"}},"220",-1),jt={style:{"text-align":"left"}},Mt={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},Ct=n("td",{style:{"text-align":"center"}},null,-1),It={style:{"text-align":"left"}},At=n("code",null,"数组",-1),Et=n("code",null,"桶排序",-1),Ot=n("code",null,"有序集合",-1),Bt=n("code",null,"2+",-1),Lt={style:{"text-align":"left"}},Nt=n("td",{style:{"text-align":"center"}},"239",-1),Tt={style:{"text-align":"left"}},Dt={href:"https://leetcode.com/problems/sliding-window-maximum",target:"_blank",rel:"noopener noreferrer"},Ht={style:{"text-align":"center"}},Kt={style:{"text-align":"left"}},zt=n("code",null,"队列",-1),St=n("code",null,"数组",-1),Rt=n("code",null,"滑动窗口",-1),Vt=n("code",null,"2+",-1),Pt={style:{"text-align":"left"}},Ut=n("td",{style:{"text-align":"center"}},"480",-1),Wt={style:{"text-align":"left"}},Ft={href:"https://leetcode.com/problems/sliding-window-median",target:"_blank",rel:"noopener noreferrer"},Gt=n("td",{style:{"text-align":"center"}},null,-1),Jt={style:{"text-align":"left"}},Qt=n("code",null,"数组",-1),Xt=n("code",null,"哈希表",-1),Yt=n("code",null,"滑动窗口",-1),Zt=n("code",null,"1+",-1),$t={style:{"text-align":"left"}},ne=n("h4",{id:"不定长度窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#不定长度窗口","aria-hidden":"true"},"#"),s(" 不定长度窗口")],-1),se=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),te=n("td",{style:{"text-align":"center"}},"674",-1),ee={style:{"text-align":"left"}},ae={href:"https://leetcode.com/problems/longest-continuous-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},oe=n("td",{style:{"text-align":"center"}},null,-1),le={style:{"text-align":"left"}},ce=n("code",null,"数组",-1),ie={style:{"text-align":"left"}},pe=n("td",{style:{"text-align":"center"}},"485",-1),de={style:{"text-align":"left"}},ue={href:"https://leetcode.com/problems/max-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},re={style:{"text-align":"center"}},ke={style:{"text-align":"left"}},_e=n("code",null,"数组",-1),me={style:{"text-align":"left"}},he=n("td",{style:{"text-align":"center"}},"487",-1),be={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/max-consecutive-ones-ii",target:"_blank",rel:"noopener noreferrer"},ge=n("td",{style:{"text-align":"center"}},null,-1),fe={style:{"text-align":"left"}},ye=n("code",null,"数组",-1),we=n("code",null,"动态规划",-1),xe=n("code",null,"滑动窗口",-1),qe={style:{"text-align":"left"}},je=n("td",{style:{"text-align":"center"}},"76",-1),Me={style:{"text-align":"left"}},Ce={href:"https://leetcode.com/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},Ie={style:{"text-align":"center"}},Ae={style:{"text-align":"left"}},Ee=n("code",null,"哈希表",-1),Oe=n("code",null,"字符串",-1),Be=n("code",null,"滑动窗口",-1),Le={style:{"text-align":"left"}},Ne=n("td",{style:{"text-align":"center"}},"718",-1),Te={style:{"text-align":"left"}},De={href:"https://leetcode.com/problems/maximum-length-of-repeated-subarray",target:"_blank",rel:"noopener noreferrer"},He=n("td",{style:{"text-align":"center"}},null,-1),Ke={style:{"text-align":"left"}},ze=n("code",null,"数组",-1),Se=n("code",null,"二分查找",-1),Re=n("code",null,"动态规划",-1),Ve=n("code",null,"3+",-1),Pe={style:{"text-align":"left"}},Ue=n("td",{style:{"text-align":"center"}},"209",-1),We={style:{"text-align":"left"}},Fe={href:"https://leetcode.com/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Ge={style:{"text-align":"center"}},Je={style:{"text-align":"left"}},Qe=n("code",null,"数组",-1),Xe=n("code",null,"二分查找",-1),Ye=n("code",null,"前缀和",-1),Ze=n("code",null,"1+",-1),$e={style:{"text-align":"left"}},na=n("td",{style:{"text-align":"center"}},"862",-1),sa={style:{"text-align":"left"}},ta={href:"https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k",target:"_blank",rel:"noopener noreferrer"},ea=n("td",{style:{"text-align":"center"}},null,-1),aa={style:{"text-align":"left"}},oa=n("code",null,"队列",-1),la=n("code",null,"数组",-1),ca=n("code",null,"二分查找",-1),ia=n("code",null,"4+",-1),pa={style:{"text-align":"left"}},da=n("td",{style:{"text-align":"center"}},"1004",-1),ua={style:{"text-align":"left"}},ra={href:"https://leetcode.com/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},ka=n("td",{style:{"text-align":"center"}},null,-1),_a={style:{"text-align":"left"}},ma=n("code",null,"数组",-1),ha=n("code",null,"二分查找",-1),ba=n("code",null,"前缀和",-1),va=n("code",null,"1+",-1),ga={style:{"text-align":"left"}},fa=n("td",{style:{"text-align":"center"}},"1658",-1),ya={style:{"text-align":"left"}},wa={href:"https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero",target:"_blank",rel:"noopener noreferrer"},xa=n("td",{style:{"text-align":"center"}},null,-1),qa={style:{"text-align":"left"}},ja=n("code",null,"数组",-1),Ma=n("code",null,"哈希表",-1),Ca=n("code",null,"二分查找",-1),Ia=n("code",null,"2+",-1),Aa={style:{"text-align":"left"}},Ea=n("td",{style:{"text-align":"center"}},"424",-1),Oa={style:{"text-align":"left"}},Ba={href:"https://leetcode.com/problems/longest-repeating-character-replacement",target:"_blank",rel:"noopener noreferrer"},La=n("td",{style:{"text-align":"center"}},null,-1),Na={style:{"text-align":"left"}},Ta=n("code",null,"哈希表",-1),Da=n("code",null,"字符串",-1),Ha=n("code",null,"滑动窗口",-1),Ka={style:{"text-align":"left"}},za=n("td",{style:{"text-align":"center"}},"3",-1),Sa={style:{"text-align":"left"}},Ra={href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},Va={style:{"text-align":"center"}},Pa={style:{"text-align":"left"}},Ua=n("code",null,"哈希表",-1),Wa=n("code",null,"字符串",-1),Fa=n("code",null,"滑动窗口",-1),Ga={style:{"text-align":"left"}},Ja=n("td",{style:{"text-align":"center"}},"1695",-1),Qa={style:{"text-align":"left"}},Xa={href:"https://leetcode.com/problems/maximum-erasure-value",target:"_blank",rel:"noopener noreferrer"},Ya=n("td",{style:{"text-align":"center"}},null,-1),Za={style:{"text-align":"left"}},$a=n("code",null,"数组",-1),no=n("code",null,"哈希表",-1),so=n("code",null,"滑动窗口",-1),to={style:{"text-align":"left"}},eo=n("td",{style:{"text-align":"center"}},"1208",-1),ao={style:{"text-align":"left"}},oo={href:"https://leetcode.com/problems/get-equal-substrings-within-budget",target:"_blank",rel:"noopener noreferrer"},lo=n("td",{style:{"text-align":"center"}},null,-1),co={style:{"text-align":"left"}},io=n("code",null,"字符串",-1),po=n("code",null,"二分查找",-1),uo=n("code",null,"前缀和",-1),ro=n("code",null,"1+",-1),ko={style:{"text-align":"left"}},_o=n("td",{style:{"text-align":"center"}},"1493",-1),mo={style:{"text-align":"left"}},ho={href:"https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element",target:"_blank",rel:"noopener noreferrer"},bo=n("td",{style:{"text-align":"center"}},null,-1),vo={style:{"text-align":"left"}},go=n("code",null,"数组",-1),fo=n("code",null,"动态规划",-1),yo=n("code",null,"滑动窗口",-1),wo={style:{"text-align":"left"}},xo=n("td",{style:{"text-align":"center"}},"727",-1),qo={style:{"text-align":"left"}},jo={href:"https://leetcode.com/problems/minimum-window-subsequence",target:"_blank",rel:"noopener noreferrer"},Mo=n("td",{style:{"text-align":"center"}},null,-1),Co={style:{"text-align":"left"}},Io=n("code",null,"字符串",-1),Ao=n("code",null,"动态规划",-1),Eo=n("code",null,"滑动窗口",-1),Oo={style:{"text-align":"left"}},Bo=n("td",{style:{"text-align":"center"}},"159",-1),Lo={style:{"text-align":"left"}},No={href:"https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters",target:"_blank",rel:"noopener noreferrer"},To=n("td",{style:{"text-align":"center"}},null,-1),Do={style:{"text-align":"left"}},Ho=n("code",null,"哈希表",-1),Ko=n("code",null,"字符串",-1),zo=n("code",null,"滑动窗口",-1),So={style:{"text-align":"left"}},Ro=n("td",{style:{"text-align":"center"}},"340",-1),Vo={style:{"text-align":"left"}},Po={href:"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters",target:"_blank",rel:"noopener noreferrer"},Uo=n("td",{style:{"text-align":"center"}},null,-1),Wo={style:{"text-align":"left"}},Fo=n("code",null,"哈希表",-1),Go=n("code",null,"字符串",-1),Jo=n("code",null,"滑动窗口",-1),Qo={style:{"text-align":"left"}},Xo=n("td",{style:{"text-align":"center"}},"795",-1),Yo={style:{"text-align":"left"}},Zo={href:"https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum",target:"_blank",rel:"noopener noreferrer"},$o=n("td",{style:{"text-align":"center"}},null,-1),nl={style:{"text-align":"left"}},sl=n("code",null,"数组",-1),tl=n("code",null,"双指针",-1),el={style:{"text-align":"left"}},al=n("td",{style:{"text-align":"center"}},"992",-1),ol={style:{"text-align":"left"}},ll={href:"https://leetcode.com/problems/subarrays-with-k-different-integers",target:"_blank",rel:"noopener noreferrer"},cl=n("td",{style:{"text-align":"center"}},null,-1),il={style:{"text-align":"left"}},pl=n("code",null,"数组",-1),dl=n("code",null,"哈希表",-1),ul=n("code",null,"计数",-1),rl=n("code",null,"1+",-1),kl={style:{"text-align":"left"}},_l=n("td",{style:{"text-align":"center"}},"713",-1),ml={style:{"text-align":"left"}},hl={href:"https://leetcode.com/problems/subarray-product-less-than-k",target:"_blank",rel:"noopener noreferrer"},bl=n("td",{style:{"text-align":"center"}},null,-1),vl={style:{"text-align":"left"}},gl=n("code",null,"数组",-1),fl=n("code",null,"二分查找",-1),yl=n("code",null,"前缀和",-1),wl=n("code",null,"1+",-1),xl={style:{"text-align":"left"}},ql=n("td",{style:{"text-align":"center"}},"904",-1),jl={style:{"text-align":"left"}},Ml={href:"https://leetcode.com/problems/fruit-into-baskets",target:"_blank",rel:"noopener noreferrer"},Cl=n("td",{style:{"text-align":"center"}},null,-1),Il={style:{"text-align":"left"}},Al=n("code",null,"数组",-1),El=n("code",null,"哈希表",-1),Ol=n("code",null,"滑动窗口",-1),Bl={style:{"text-align":"left"}},Ll=n("td",{style:{"text-align":"center"}},"1358",-1),Nl={style:{"text-align":"left"}},Tl={href:"https://leetcode.com/problems/number-of-substrings-containing-all-three-characters",target:"_blank",rel:"noopener noreferrer"},Dl=n("td",{style:{"text-align":"center"}},null,-1),Hl={style:{"text-align":"left"}},Kl=n("code",null,"哈希表",-1),zl=n("code",null,"字符串",-1),Sl=n("code",null,"滑动窗口",-1),Rl={style:{"text-align":"left"}},Vl=n("td",{style:{"text-align":"center"}},"467",-1),Pl={style:{"text-align":"left"}},Ul={href:"https://leetcode.com/problems/unique-substrings-in-wraparound-string",target:"_blank",rel:"noopener noreferrer"},Wl=n("td",{style:{"text-align":"center"}},null,-1),Fl={style:{"text-align":"left"}},Gl=n("code",null,"字符串",-1),Jl=n("code",null,"动态规划",-1),Ql={style:{"text-align":"left"}},Xl=n("td",{style:{"text-align":"center"}},"1438",-1),Yl={style:{"text-align":"left"}},Zl={href:"https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",target:"_blank",rel:"noopener noreferrer"},$l=n("td",{style:{"text-align":"center"}},null,-1),nc={style:{"text-align":"left"}},sc=n("code",null,"队列",-1),tc=n("code",null,"数组",-1),ec=n("code",null,"有序集合",-1),ac=n("code",null,"3+",-1),oc={style:{"text-align":"left"}};function lc(cc,ic){const o=d("ExternalLinkIcon"),p=d("MdDemo"),a=d("RouterLink"),l=d("font");return r(),k("div",null,[m,t(p,{title:"相关题目",id:"md-demo-44"},{default:e(()=>[n("h4",h,[b,s(" 📌 "),n("a",v,[s("76. 最小覆盖子串 - LeetCode"),t(o)])]),g,f,y,w,x,q,j,M,C,I,A,E]),code:e(()=>[O]),_:1}),B,t(p,{title:"相关题目",id:"md-demo-226"},{default:e(()=>[n("h4",L,[N,s(" 📌 "),n("a",T,[s("567. 字符串的排列 - LeetCode"),t(o)])]),D,H,K,z,S,R,V,P,U]),code:e(()=>[W]),_:1}),F,t(p,{title:"相关题目",id:"md-demo-300"},{default:e(()=>[n("h4",G,[J,s(" 📌 "),n("a",Q,[s("438. 找到字符串中所有字母异位词 - LeetCode"),t(o)])]),X,Y,Z,$,nn,sn,tn,en,an]),code:e(()=>[on]),_:1}),ln,t(p,{title:"相关题目",id:"md-demo-371"},{default:e(()=>[n("h4",cn,[pn,s(" 📌 "),n("a",dn,[s("3. 无重复字符的最长子串 - LeetCode"),t(o)])]),un,rn,kn,_n,mn,hn,bn,vn,gn,fn,yn]),code:e(()=>[wn]),_:1}),xn,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),qn,jn,c(" prettier-ignore "),n("table",null,[Mn,n("tbody",null,[n("tr",null,[Cn,n("td",In,[n("a",An,[s("大小为 K 且平均值大于等于阈值的子数组数目"),t(o)])]),En,n("td",On,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Bn]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Ln]),_:1})]),n("td",Nn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Tn,n("td",Dn,[n("a",Hn,[s("子数组最大平均数 I"),t(o)])]),Kn,n("td",zn,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Sn]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Rn]),_:1})]),n("td",Vn,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[Pn,n("td",Un,[n("a",Wn,[s("爱生气的书店老板"),t(o)])]),Fn,n("td",Gn,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Jn]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Qn]),_:1})]),n("td",Xn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Yn,n("td",Zn,[n("a",$n,[s("可获得的最大点数"),t(o)])]),ns,n("td",ss,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ts]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:e(()=>[es]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[as]),_:1})]),n("td",os,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[ls,n("td",cs,[n("a",is,[s("定长子串中元音的最大数目"),t(o)])]),ps,n("td",ds,[t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[us]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[rs]),_:1})]),n("td",ks,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[_s,n("td",ms,[n("a",hs,[s("字符串的排列"),t(o)])]),n("td",bs,[t(a,{to:"/leetcode/problem/0567.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",vs,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[gs]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[fs]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[ys]),_:1}),s(),ws]),n("td",xs,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[qs,n("td",js,[n("a",Ms,[s("长度为 K 的无重复字符子串"),t(o)])]),Cs,n("td",Is,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[As]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Es]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Os]),_:1})]),n("td",Bs,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ls,n("td",Ns,[n("a",Ts,[s("最少交换次数来组合所有的 1"),t(o)])]),Ds,n("td",Hs,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Ks]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[zs]),_:1})]),n("td",Ss,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Rs,n("td",Vs,[n("a",Ps,[s("健身计划评估"),t(o)])]),Us,n("td",Ws,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Fs]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Gs]),_:1})]),n("td",Js,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[Qs,n("td",Xs,[n("a",Ys,[s("找到字符串中所有字母异位词"),t(o)])]),n("td",Zs,[t(a,{to:"/leetcode/problem/0438.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",$s,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[nt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[st]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[tt]),_:1})]),n("td",et,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[at,n("td",ot,[n("a",lt,[s("K 连续位的最小翻转次数"),t(o)])]),ct,n("td",it,[t(a,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:e(()=>[pt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/queue.html"},{default:e(()=>[dt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ut]),_:1}),s(),rt]),n("td",kt,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[_t,n("td",mt,[n("a",ht,[s("K 个关闭的灯泡"),t(o)])]),bt,n("td",vt,[t(a,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:e(()=>[gt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/segment-tree.html"},{default:e(()=>[ft]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/queue.html"},{default:e(()=>[yt]),_:1}),s(),wt]),n("td",xt,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[qt,n("td",jt,[n("a",Mt,[s("存在重复元素 III"),t(o)])]),Ct,n("td",It,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[At]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:e(()=>[Et]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/ordered-set.html"},{default:e(()=>[Ot]),_:1}),s(),Bt]),n("td",Lt,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[Nt,n("td",Tt,[n("a",Dt,[s("滑动窗口最大值"),t(o)])]),n("td",Ht,[t(a,{to:"/leetcode/problem/0239.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Kt,[t(a,{to:"/leetcode/outline/tag/queue.html"},{default:e(()=>[zt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[St]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Rt]),_:1}),s(),Vt]),n("td",Pt,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[Ut,n("td",Wt,[n("a",Ft,[s("滑动窗口中位数"),t(o)])]),Gt,n("td",Jt,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Qt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Xt]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Yt]),_:1}),s(),Zt]),n("td",$t,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])])])]),ne,c(" prettier-ignore "),n("table",null,[se,n("tbody",null,[n("tr",null,[te,n("td",ee,[n("a",ae,[s("最长连续递增序列"),t(o)])]),oe,n("td",le,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ce]),_:1})]),n("td",ie,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[pe,n("td",de,[n("a",ue,[s("最大连续 1 的个数"),t(o)])]),n("td",re,[t(a,{to:"/leetcode/problem/0485.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",ke,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[_e]),_:1})]),n("td",me,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[he,n("td",be,[n("a",ve,[s("最大连续1的个数 II"),t(o)])]),ge,n("td",fe,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ye]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:e(()=>[we]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[xe]),_:1})]),n("td",qe,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[je,n("td",Me,[n("a",Ce,[s("最小覆盖子串"),t(o)])]),n("td",Ie,[t(a,{to:"/leetcode/problem/0076.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Ae,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Ee]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Oe]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Be]),_:1})]),n("td",Le,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[Ne,n("td",Te,[n("a",De,[s("最长重复子数组"),t(o)])]),He,n("td",Ke,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ze]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[Se]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:e(()=>[Re]),_:1}),s(),Ve]),n("td",Pe,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ue,n("td",We,[n("a",Fe,[s("长度最小的子数组"),t(o)])]),n("td",Ge,[t(a,{to:"/leetcode/problem/0209.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Je,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Qe]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[Xe]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:e(()=>[Ye]),_:1}),s(),Ze]),n("td",$e,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[na,n("td",sa,[n("a",ta,[s("和至少为 K 的最短子数组"),t(o)])]),ea,n("td",aa,[t(a,{to:"/leetcode/outline/tag/queue.html"},{default:e(()=>[oa]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[la]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[ca]),_:1}),s(),ia]),n("td",pa,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[da,n("td",ua,[n("a",ra,[s("最大连续1的个数 III"),t(o)])]),ka,n("td",_a,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ma]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[ha]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:e(()=>[ba]),_:1}),s(),va]),n("td",ga,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[fa,n("td",ya,[n("a",wa,[s("将 x 减到 0 的最小操作数"),t(o)])]),xa,n("td",qa,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[ja]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Ma]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[Ca]),_:1}),s(),Ia]),n("td",Aa,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ea,n("td",Oa,[n("a",Ba,[s("替换后的最长重复字符"),t(o)])]),La,n("td",Na,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Ta]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Da]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Ha]),_:1})]),n("td",Ka,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[za,n("td",Sa,[n("a",Ra,[s("无重复字符的最长子串"),t(o)])]),n("td",Va,[t(a,{to:"/leetcode/problem/0003.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Pa,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Ua]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Wa]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Fa]),_:1})]),n("td",Ga,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ja,n("td",Qa,[n("a",Xa,[s("删除子数组的最大得分"),t(o)])]),Ya,n("td",Za,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[$a]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[no]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[so]),_:1})]),n("td",to,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[eo,n("td",ao,[n("a",oo,[s("尽可能使字符串相等"),t(o)])]),lo,n("td",co,[t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[io]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[po]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:e(()=>[uo]),_:1}),s(),ro]),n("td",ko,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[_o,n("td",mo,[n("a",ho,[s("删掉一个元素以后全为 1 的最长子数组"),t(o)])]),bo,n("td",vo,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[go]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:e(()=>[fo]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[yo]),_:1})]),n("td",wo,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[xo,n("td",qo,[n("a",jo,[s("最小窗口子序列"),t(o)])]),Mo,n("td",Co,[t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Io]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:e(()=>[Ao]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Eo]),_:1})]),n("td",Oo,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[Bo,n("td",Lo,[n("a",No,[s("至多包含两个不同字符的最长子串"),t(o)])]),To,n("td",Do,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Ho]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Ko]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[zo]),_:1})]),n("td",So,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ro,n("td",Vo,[n("a",Po,[s("至多包含 K 个不同字符的最长子串"),t(o)])]),Uo,n("td",Wo,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Fo]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Go]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Jo]),_:1})]),n("td",Qo,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Xo,n("td",Yo,[n("a",Zo,[s("区间子数组个数"),t(o)])]),$o,n("td",nl,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[sl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[tl]),_:1})]),n("td",el,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[al,n("td",ol,[n("a",ll,[s("K 个不同整数的子数组"),t(o)])]),cl,n("td",il,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[pl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[dl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/counting.html"},{default:e(()=>[ul]),_:1}),s(),rl]),n("td",kl,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[_l,n("td",ml,[n("a",hl,[s("乘积小于 K 的子数组"),t(o)])]),bl,n("td",vl,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[gl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[fl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:e(()=>[yl]),_:1}),s(),wl]),n("td",xl,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[ql,n("td",jl,[n("a",Ml,[s("水果成篮"),t(o)])]),Cl,n("td",Il,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Al]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[El]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Ol]),_:1})]),n("td",Bl,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ll,n("td",Nl,[n("a",Tl,[s("包含所有三种字符的子字符串数目"),t(o)])]),Dl,n("td",Hl,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[Kl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[zl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:e(()=>[Sl]),_:1})]),n("td",Rl,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Vl,n("td",Pl,[n("a",Ul,[s("环绕字符串中唯一的子字符串"),t(o)])]),Wl,n("td",Fl,[t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[Gl]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:e(()=>[Jl]),_:1})]),n("td",Ql,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Xl,n("td",Yl,[n("a",Zl,[s("绝对差不超过限制的最长连续子数组"),t(o)])]),$l,n("td",nc,[t(a,{to:"/leetcode/outline/tag/queue.html"},{default:e(()=>[sc]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[tc]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/ordered-set.html"},{default:e(()=>[ec]),_:1}),s(),ac]),n("td",oc,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const dc=u(_,[["render",lc],["__file","slide_window.html.vue"]]);export{dc as default};
