import{_ as i,r as c,o as d,c as p,a as t,b as n,d as e,w as s,f as r,e as u}from"./app-mvY9N9Pc.js";const _={},h={id:"_2-两数相加",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_2-两数相加","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"递归",-1),f=t("code",null,"链表",-1),b=t("code",null,"数学",-1),v={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> , and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: l1 = [2,4,3], l2 = [5,6,4]</p><p>Output: [7,0,8]</p><p>Explanation: 342 + 465 = 807.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: l1 = [0], l2 = [0]</p><p>Output: [0]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</p><p>Output: [8,9,9,9,0,0,0,1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>It is guaranteed that the list represents a number that does not have leading zeros.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>2 个逆序的链表，要求从低位开始相加，得出结果也逆序输出，返回值是逆序结果链表的头结点。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>需要注意的是各种进位问题。</p><p>极端情况，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Input: (9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9) + (1 -&gt; )
Output: 0 -&gt; 0 -&gt; 0 -&gt; 0 -&gt; 0 -&gt; 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了处理方法统一，可以先建立一个虚拟头结点，这个虚拟头结点的 <code>next</code> 指向真正的 <code>head</code>，这样 <code>head</code> 不需要单独处理，直接 <code>while</code> 循环即可。另外判断循环终止的条件不用是 <code>p.next ！= null</code>，这样最后一位还需要额外计算，循环终止条件应该是 <code>p != null</code>。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> head <span class="token operator">=</span> List<span class="token punctuation">;</span>
	<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">+</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">+</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			sum <span class="token operator">=</span> sum <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
		head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

		sum <span class="token operator">=</span> carry<span class="token punctuation">;</span>
		carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> List<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),L=t("td",{style:{"text-align":"center"}},"43",-1),N={style:{"text-align":"left"}},E={href:"https://leetcode.com/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},j={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0043",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"left"}},M=t("code",null,"数学",-1),C=t("code",null,"字符串",-1),V=t("code",null,"模拟",-1),O={style:{"text-align":"left"}},T=t("td",{style:{"text-align":"center"}},"67",-1),z={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},Y={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0067",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"left"}},S=t("code",null,"位运算",-1),D=t("code",null,"数学",-1),F=t("code",null,"字符串",-1),G=t("code",null,"1+",-1),H={style:{"text-align":"left"}},J=t("td",{style:{"text-align":"center"}},"371",-1),K={style:{"text-align":"left"}},P={href:"https://leetcode.com/problems/sum-of-two-integers",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"center"}},null,-1),U={style:{"text-align":"left"}},W=t("code",null,"位运算",-1),X=t("code",null,"数学",-1),Z={style:{"text-align":"left"}},$=t("td",{style:{"text-align":"center"}},"415",-1),tt={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/add-strings",target:"_blank",rel:"noopener noreferrer"},nt={style:{"text-align":"center"}},st={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0415",target:"_blank",rel:"noopener noreferrer"},at={style:{"text-align":"left"}},ot=t("code",null,"数学",-1),lt=t("code",null,"字符串",-1),ct=t("code",null,"模拟",-1),it={style:{"text-align":"left"}},dt=t("td",{style:{"text-align":"center"}},"445",-1),pt={style:{"text-align":"left"}},rt={href:"https://leetcode.com/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},ut={style:{"text-align":"center"}},_t={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0445",target:"_blank",rel:"noopener noreferrer"},ht={style:{"text-align":"left"}},mt=t("code",null,"栈",-1),kt=t("code",null,"链表",-1),gt=t("code",null,"数学",-1),ft={style:{"text-align":"left"}},bt=t("td",{style:{"text-align":"center"}},"989",-1),vt={style:{"text-align":"left"}},yt={href:"https://leetcode.com/problems/add-to-array-form-of-integer",target:"_blank",rel:"noopener noreferrer"},xt=t("td",{style:{"text-align":"center"}},null,-1),wt={style:{"text-align":"left"}},Lt=t("code",null,"数组",-1),Nt=t("code",null,"数学",-1),Et={style:{"text-align":"left"}},It=t("td",{style:{"text-align":"center"}},"1634",-1),jt={style:{"text-align":"left"}},qt={href:"https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists",target:"_blank",rel:"noopener noreferrer"},Mt=t("td",{style:{"text-align":"center"}},null,-1),Ct={style:{"text-align":"left"}},Vt=t("code",null,"链表",-1),Ot=t("code",null,"数学",-1),Tt=t("code",null,"双指针",-1),zt={style:{"text-align":"left"}},Bt=t("td",{style:{"text-align":"center"}},"2816",-1),Rt={style:{"text-align":"left"}},Yt={href:"https://leetcode.com/problems/double-a-number-represented-as-a-linked-list",target:"_blank",rel:"noopener noreferrer"},At=t("td",{style:{"text-align":"center"}},null,-1),St={style:{"text-align":"left"}},Dt=t("code",null,"栈",-1),Ft=t("code",null,"链表",-1),Gt=t("code",null,"数学",-1),Ht={style:{"text-align":"left"}};function Jt(Kt,Pt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return d(),p("div",null,[t("h1",h,[m,n(),t("a",k,[n("2. 两数相加"),e(o)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/leetcode/outline/tag/recursion.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[f]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[b]),_:1}),n("  🔗 "),t("a",v,[y,e(o)])]),x,r(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[L,t("td",N,[t("a",E,[n("字符串相乘"),e(o)])]),t("td",I,[t("a",j,[n("[✓]"),e(o)])]),t("td",q,[e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[M]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[C]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/simulation.html"},{default:s(()=>[V]),_:1})]),t("td",O,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[T,t("td",z,[t("a",B,[n("二进制求和"),e(o)])]),t("td",R,[t("a",Y,[n("[✓]"),e(o)])]),t("td",A,[e(a,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[S]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[D]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[F]),_:1}),n(),G]),t("td",H,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[J,t("td",K,[t("a",P,[n("两整数之和"),e(o)])]),Q,t("td",U,[e(a,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[W]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[X]),_:1})]),t("td",Z,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[$,t("td",tt,[t("a",et,[n("字符串相加"),e(o)])]),t("td",nt,[t("a",st,[n("[✓]"),e(o)])]),t("td",at,[e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[ot]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[lt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/simulation.html"},{default:s(()=>[ct]),_:1})]),t("td",it,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[dt,t("td",pt,[t("a",rt,[n("两数相加 II"),e(o)])]),t("td",ut,[t("a",_t,[n("[✓]"),e(o)])]),t("td",ht,[e(a,{to:"/leetcode/outline/tag/stack.html"},{default:s(()=>[mt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[kt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[gt]),_:1})]),t("td",ft,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[bt,t("td",vt,[t("a",yt,[n("数组形式的整数加法"),e(o)])]),xt,t("td",wt,[e(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Lt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[Nt]),_:1})]),t("td",Et,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[It,t("td",jt,[t("a",qt,[n("求两个多项式链表的和"),e(o)])]),Mt,t("td",Ct,[e(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[Vt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[Ot]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[Tt]),_:1})]),t("td",zt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Bt,t("td",Rt,[t("a",Yt,[n("翻倍以链表形式表示的数字"),e(o)])]),At,t("td",St,[e(a,{to:"/leetcode/outline/tag/stack.html"},{default:s(()=>[Dt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[Ft]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[Gt]),_:1})]),t("td",Ht,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])])])])])}const Ut=i(_,[["render",Jt],["__file","0002.html.vue"]]);export{Ut as default};
