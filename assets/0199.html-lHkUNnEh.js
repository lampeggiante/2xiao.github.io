import{_ as c,r as l,o as i,c as u,a as n,b as t,d as s,w as e,f as r,e as d}from"./app-mvY9N9Pc.js";const k={},h={id:"_199-二叉树的右视图",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_199-二叉树的右视图","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"树",-1),b=n("code",null,"深度优先搜索",-1),g=n("code",null,"广度优先搜索",-1),v=n("code",null,"二叉树",-1),y={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,2,3,null,5,null,4]</p><p>Output: [1,3,4]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = [1,null,3]</p><p>Output: [1,3]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>从右边看一个树，输出看到的数字，注意有遮挡。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这一题是按层序遍历的变种题，按照层序把每层的元素都遍历出来，然后依次取每一层的最右边的元素即可，用 BFS + 队列实现。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">rightSideView</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		queue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),N=n("td",{style:{"text-align":"center"}},"116",-1),E={style:{"text-align":"left"}},V={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},j={style:{"text-align":"center"}},C={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0116",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"left"}},L=n("code",null,"树",-1),B=n("code",null,"深度优先搜索",-1),M=n("code",null,"广度优先搜索",-1),O=n("code",null,"2+",-1),S={style:{"text-align":"left"}},T=n("td",{style:{"text-align":"center"}},"545",-1),R={style:{"text-align":"left"}},z={href:"https://leetcode.com/problems/boundary-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},F=n("td",{style:{"text-align":"center"}},null,-1),G={style:{"text-align":"left"}},A=n("code",null,"树",-1),D=n("code",null,"深度优先搜索",-1),H=n("code",null,"二叉树",-1),J={style:{"text-align":"left"}};function K(P,Q){const o=l("ExternalLinkIcon"),p=l("font"),a=l("RouterLink");return i(),u("div",null,[n("h1",h,[_,t(),n("a",f,[t("199. 二叉树的右视图"),s(o)])]),n("p",null,[t("🟠 "),s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/leetcode/outline/tag/tree.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:e(()=>[b]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:e(()=>[g]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:e(()=>[v]),_:1}),t("  🔗 "),n("a",y,[x,s(o)])]),w,r(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[N,n("td",E,[n("a",V,[t("填充每个节点的下一个右侧节点指针"),s(o)])]),n("td",j,[n("a",C,[t("[✓]"),s(o)])]),n("td",I,[s(a,{to:"/leetcode/outline/tag/tree.html"},{default:e(()=>[L]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:e(()=>[B]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:e(()=>[M]),_:1}),t(),O]),n("td",S,[s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[T,n("td",R,[n("a",z,[t("二叉树的边界"),s(o)])]),F,n("td",G,[s(a,{to:"/leetcode/outline/tag/tree.html"},{default:e(()=>[A]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:e(()=>[D]),_:1}),t(),s(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:e(()=>[H]),_:1})]),n("td",J,[s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])])])}const W=c(k,[["render",K],["__file","0199.html.vue"]]);export{W as default};
