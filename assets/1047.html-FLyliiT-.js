import{_ as p,r as c,o as i,c as r,a as n,b as s,d as t,w as e,f as u,e as d}from"./app-GnK0vSxb.js";const h={},k={id:"_1047-删除字符串中的所有相邻重复项",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_1047-删除字符串中的所有相邻重复项","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"栈",-1),f=n("code",null,"字符串",-1),b={href:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> consisting of lowercase English letters. A <strong>duplicate removal</strong> consists of choosing two <strong>adjacent</strong> and <strong>equal</strong> letters and removing them.</p><p>We repeatedly make <strong>duplicate removals</strong> on <code>s</code> until we no longer can.</p><p>Return <em>the final string after all such duplicate removals have been made</em>. It can be proven that the answer is <strong>unique</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;abbaca&quot;</p><p>Output: &quot;ca&quot;</p><p>Explanation:</p><p>For example, in &quot;abbaca&quot; we could remove &quot;bb&quot; since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is &quot;aaca&quot;, of which only &quot;aa&quot; is possible, so the final string is &quot;ca&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;azxxzy&quot;</p><p>Output: &quot;ay&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> consists of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给出由小写字母组成的字符串  S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。在 S 上反复执行重复项删除操作，直到无法继续删除。在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>用栈模拟，类似“对对碰”；</p><ul><li>遍历输入的字符串，用栈来存储字符；</li><li>如果栈不为空，且新遍历到的字符与栈顶的字符一样的话，就弹出栈顶字符；</li><li>否则将新遍历到的字符放入栈顶；</li><li>直至扫完整个字符串，栈中剩下的字符串就是最终要输出的结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> len <span class="token operator">=</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),q=n("td",{style:{"text-align":"center"}},"1209",-1),w={style:{"text-align":"left"}},E={href:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"center"}},null,-1),I={style:{"text-align":"left"}},C=n("code",null,"栈",-1),L=n("code",null,"字符串",-1),N={style:{"text-align":"left"}},V=n("td",{style:{"text-align":"center"}},"2390",-1),z={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/removing-stars-from-a-string",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},M=n("code",null,"栈",-1),O=n("code",null,"字符串",-1),T=n("code",null,"模拟",-1),A={style:{"text-align":"left"}},D=n("td",{style:{"text-align":"center"}},"2716",-1),F={style:{"text-align":"left"}},W={href:"https://leetcode.com/problems/minimize-string-length",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"center"}},null,-1),G={style:{"text-align":"left"}},H=n("code",null,"哈希表",-1),J=n("code",null,"字符串",-1),K={style:{"text-align":"left"}};function P(Q,U){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[n("h1",k,[_,s(),n("a",m,[s("1047. 删除字符串中的所有相邻重复项"),t(o)])]),n("p",null,[s("🟢 "),t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),t(a,{to:"/leetcode/outline/tag/stack.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[f]),_:1}),s("  🔗 "),n("a",b,[v,t(o)])]),x,u(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[q,n("td",w,[n("a",E,[s("删除字符串中的所有相邻重复项 II"),t(o)])]),j,n("td",I,[t(a,{to:"/leetcode/outline/tag/stack.html"},{default:e(()=>[C]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[L]),_:1})]),n("td",N,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[V,n("td",z,[n("a",B,[s("从字符串中移除星号"),t(o)])]),R,n("td",S,[t(a,{to:"/leetcode/outline/tag/stack.html"},{default:e(()=>[M]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[O]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/simulation.html"},{default:e(()=>[T]),_:1})]),n("td",A,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[D,n("td",F,[n("a",W,[s("最小化字符串长度"),t(o)])]),Y,n("td",G,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[H]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:e(()=>[J]),_:1})]),n("td",K,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])])])])])}const Z=p(h,[["render",P],["__file","1047.html.vue"]]);export{Z as default};
