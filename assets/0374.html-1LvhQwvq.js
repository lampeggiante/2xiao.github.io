import{_ as p,r as c,o as i,c as r,a as e,b as n,d as t,w as s,f as d,e as u}from"./app-GnK0vSxb.js";const h={},k={id:"_374-猜数字大小",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#_374-猜数字大小","aria-hidden":"true"},"#",-1),_={href:"https://leetcode.com/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"二分查找",-1),f=e("code",null,"交互",-1),b={href:"https://leetcode.com/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>We are playing the Guess Game. The game is as follows:</p><p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p><p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p><p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p><ul><li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li><li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li><li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li></ul><p>Return <em>the number that I picked</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 10, pick = 6</p><p>Output: 6</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1, pick = 1</p><p>Output: 1</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: n = 2, pick = 1</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 2^31 - 1</code></li><li><code>1 &lt;= pick &lt;= n</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>猜数字游戏的规则如下：</p><ul><li>每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。</li><li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li></ul><p>你可以通过调用一个预先定义好的接口 <code>int guess(int num)</code> 来获取猜测结果，返回值一共有 3 种可能的情况（<code>-1</code>，<code>1</code> 或 <code>0</code>）：</p><ul><li><code>-1</code>：我选出的数字比你猜的数字小 <code>pick &lt; num</code></li><li><code>1</code>：我选出的数字比你猜的数字大 <code>pick &gt; num</code></li><li><code>0</code>：我选出的数字和你猜的数字一样。恭喜！你猜对了！<code>pick == num</code></li></ul><p>返回我选出的数字。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以采用二分查找解决。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>： <code>O(logn)</code>，二分查找的时间复杂度是 <code>O(logn)</code>。</li><li><strong>空间复杂度</strong>： <code>O(1)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">guessNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),x=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),w=e("td",{style:{"text-align":"center"}},"278",-1),I={style:{"text-align":"left"}},E={href:"https://leetcode.com/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},N={style:{"text-align":"left"}},O=e("code",null,"二分查找",-1),C=e("code",null,"交互",-1),L={style:{"text-align":"left"}},V=e("td",{style:{"text-align":"center"}},"375",-1),Y={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/guess-number-higher-or-lower-ii",target:"_blank",rel:"noopener noreferrer"},B={style:{"text-align":"center"}},M={style:{"text-align":"left"}},R=e("code",null,"数学",-1),G=e("code",null,"动态规划",-1),T=e("code",null,"博弈",-1),A={style:{"text-align":"left"}},K=e("td",{style:{"text-align":"center"}},"658",-1),P={style:{"text-align":"left"}},S={href:"https://leetcode.com/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},W=e("td",{style:{"text-align":"center"}},null,-1),z={style:{"text-align":"left"}},D=e("code",null,"数组",-1),F=e("code",null,"双指针",-1),H=e("code",null,"二分查找",-1),J=e("code",null,"3+",-1),Q={style:{"text-align":"left"}};function U(X,Z){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[e("h1",k,[m,n(),e("a",_,[n("374. 猜数字大小"),t(o)])]),e("p",null,[n("🟢 "),t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:s(()=>[g]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/interactive.html"},{default:s(()=>[f]),_:1}),n("  🔗 "),e("a",b,[v,t(o)])]),y,d(" prettier-ignore "),e("table",null,[x,e("tbody",null,[e("tr",null,[w,e("td",I,[e("a",E,[n("第一个错误的版本"),t(o)])]),e("td",q,[t(a,{to:"/leetcode/problem/0278.html"},{default:s(()=>[n("[✓]")]),_:1})]),e("td",N,[t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:s(()=>[O]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/interactive.html"},{default:s(()=>[C]),_:1})]),e("td",L,[t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),e("tr",null,[V,e("td",Y,[e("a",j,[n("猜数字大小 II"),t(o)])]),e("td",B,[t(a,{to:"/leetcode/problem/0375.html"},{default:s(()=>[n("[✓]")]),_:1})]),e("td",M,[t(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[R]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[G]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/game-theory.html"},{default:s(()=>[T]),_:1})]),e("td",A,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),e("tr",null,[K,e("td",P,[e("a",S,[n("找到 K 个最接近的元素"),t(o)])]),W,e("td",z,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[D]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[F]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:s(()=>[H]),_:1}),n(),J]),e("td",Q,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])])])])])}const ee=p(h,[["render",U],["__file","0374.html.vue"]]);export{ee as default};
