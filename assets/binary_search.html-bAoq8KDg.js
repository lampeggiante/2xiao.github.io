import{_ as p,r as i,o as d,c as r,f as c,a as t,b as e,d as n,w as s,e as u}from"./app-qrCIIj1V.js";const _={},h=u(`<h1 id="_3-9-二分查找" tabindex="-1"><a class="header-anchor" href="#_3-9-二分查找" aria-hidden="true">#</a> 3.9 二分查找</h1><p>二分查找（Binary Search）算法，也叫折半查找算法。二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><p>二分查找是一种非常高效的查找算法，时间复杂度是 <code>O(log n)</code>。</p><h2 id="循环实现" tabindex="-1"><a class="header-anchor" href="#循环实现" aria-hidden="true">#</a> 循环实现</h2><p>最简单的情况就是<strong>有序数组</strong>中<strong>不存在重复元素</strong>，我们在其中用二分查找值等于给定值的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的循环实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有三个<strong>注意事项</strong>：</p><p><strong>1. 循环退出条件</strong></p><p>注意是<code>low &lt;= high</code>，而不是<code>low &lt; high</code>。</p><p><strong>2. mid 的取值</strong></p><p>实际上，<code>mid=(low+high)/2</code>这种写法是有问题的。因为如果<code>low</code>和<code>high</code>比较大的话，两者之和就有可能会溢出。改进的方法是将<code>mid</code>的计算方式写成<code>low+(high-low)/2</code>。更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算<code>low+((high-low)&gt;&gt;1)</code>。因为相比除法运算来说，计算机处理位运算要快得多。</p><p><strong>3. low 和 high 的更新</strong></p><p><code>low=mid+1</code>，<code>high=mid-1</code>。注意这里的<code>+1</code>和<code>-1</code>，如果直接写成<code>low=mid</code>或者<code>high=mid</code>，就可能会发生死循环。比如，当<code>high=3，low=3</code>时，如果<code>a[3]</code>不等于<code>value</code>，就会导致一直循环不退出。</p><h2 id="递归实现" tabindex="-1"><a class="header-anchor" href="#递归实现" aria-hidden="true">#</a> 递归实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的递归实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景的局限性" tabindex="-1"><a class="header-anchor" href="#应用场景的局限性" aria-hidden="true">#</a> 应用场景的局限性</h2><p>二分查找的时间复杂度是 <code>O(log n)</code>，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，它的应用场景是有很大局限性的。</p><h3 id="依赖顺序表结构-数组" tabindex="-1"><a class="header-anchor" href="#依赖顺序表结构-数组" aria-hidden="true">#</a> 依赖顺序表结构（数组）</h3><p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果数据是通过其他数据结构存储的，则无法应用二分查找。</p><p>主要原因是二分查找算法需要按照下标随机访问元素。数组按照下标随机访问数据的时间复杂度是 O(1)，而链表随机访问的时间复杂度是 O(n)。所以，如果数据使用链表存储，二分查找的时间复杂就会变得很高。</p><h3 id="数据必须有序" tabindex="-1"><a class="header-anchor" href="#数据必须有序" aria-hidden="true">#</a> 数据必须有序</h3><p>二分查找要求数据必须是有序的。如果数据没有序需要先排序。排序的时间复杂度最低是 O(nlogn)。所以，如果针对的是一组静态的数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p><p>但是，如果数据集合有频繁的插入和删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p><p>所以，二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。那针对动态数据集合，如何在其中快速查找某个数据呢？别急，等到二叉树那一节我会详细讲。</p><h3 id="数据量太小不适合" tabindex="-1"><a class="header-anchor" href="#数据量太小不适合" aria-hidden="true">#</a> 数据量太小不适合</h3><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。</p><p>不过，这里有一个例外。如果数据之间的比较操作非常耗时，不管数据量大小，都推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p><h3 id="数据量太大也不适合" tabindex="-1"><a class="header-anchor" href="#数据量太大也不适合" aria-hidden="true">#</a> 数据量太大也不适合</h3><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，有 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。</p><p>注意这里的“连续”二字，也就是说，即便有 2GB 的内存空间剩余，但是如果这剩余的 2GB 内存空间都是零散的，没有连续的 1GB 大小的内存空间，那照样无法申请一个 1GB 大小的数组。而二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p><h2 id="二分查找的变种写法" tabindex="-1"><a class="header-anchor" href="#二分查找的变种写法" aria-hidden="true">#</a> 二分查找的变种写法</h2><h3 id="变种一-查找第一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种一-查找第一个值等于给定值的元素" aria-hidden="true">#</a> 变种一：查找第一个值等于给定值的元素</h3><p>如果<code>mid</code>等于 0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的；如果<code>mid</code>不等于 0，但<code>arr[mid]</code>的前一个元素<code>arr[mid-1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的第一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种二-查找最后一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种二-查找最后一个值等于给定值的元素" aria-hidden="true">#</a> 变种二：查找最后一个值等于给定值的元素</h3><p>如果<code>arr[mid]</code>这个元素已经是数组中的最后一个元素了，那它肯定是我们要找的；如果<code>arr[mid]</code>的后一个元素<code>a[mid+1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的最后一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种三-查找第一个大于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种三-查找第一个大于等于给定值的元素" aria-hidden="true">#</a> 变种三：查找第一个大于等于给定值的元素</h3><p>如果<code>arr[mid]</code>小于要查找的值<code>value</code>，那要查找的值肯定在<code>[mid+1, high]</code>之间，所以，我们更新<code>low=mid+1</code>。</p><p>对于<code>arr[mid]</code>大于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的第一个值大于等于给定值的元素。如果<code>arr[mid]</code>前面已经没有元素，或者前面一个元素小于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><p>如果<code>arr[mid - 1]</code>也大于等于要查找的值<code>value</code>，那说明要查找的元素在<code>[low, mid-1]</code>之间，所以，我们将<code>high</code>更新为<code>mid-1</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种四-查找最后一个小于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种四-查找最后一个小于等于给定值的元素" aria-hidden="true">#</a> 变种四：查找最后一个小于等于给定值的元素</h3><p>对于<code>arr[mid]</code>小于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的最后一个值小于等于给定值的元素。</p><p>如果<code>arr[mid]</code>后面已经没有元素，或者后面一个元素大于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),k=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),m=t("h4",{id:"二分下标",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分下标","aria-hidden":"true"},"#"),e(" 二分下标")],-1),f=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),g=t("td",{style:{"text-align":"center"}},"704",-1),b={style:{"text-align":"left"}},y={href:"https://leetcode.com/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},v={style:{"text-align":"center"}},x={style:{"text-align":"left"}},w=t("code",null,"数组",-1),j=t("code",null,"二分查找",-1),M={style:{"text-align":"left"}},I=t("td",{style:{"text-align":"center"}},"374",-1),E={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},T={style:{"text-align":"center"}},N={style:{"text-align":"left"}},O=t("code",null,"二分查找",-1),G=t("code",null,"交互",-1),H={style:{"text-align":"left"}},S=t("td",{style:{"text-align":"center"}},"35",-1),q={style:{"text-align":"left"}},D={href:"https://leetcode.com/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},R={style:{"text-align":"left"}},V=t("code",null,"数组",-1),A=t("code",null,"二分查找",-1),C={style:{"text-align":"left"}},P=t("td",{style:{"text-align":"center"}},"34",-1),z={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},U={style:{"text-align":"center"}},F={style:{"text-align":"left"}},J=t("code",null,"数组",-1),Q=t("code",null,"二分查找",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"167",-1),Y={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},$={style:{"text-align":"center"}},tt={style:{"text-align":"left"}},nt=t("code",null,"数组",-1),et=t("code",null,"双指针",-1),st=t("code",null,"二分查找",-1),at={style:{"text-align":"left"}},ot=t("td",{style:{"text-align":"center"}},"153",-1),lt={style:{"text-align":"left"}},ct={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},it={style:{"text-align":"center"}},pt={style:{"text-align":"left"}},dt=t("code",null,"数组",-1),rt=t("code",null,"二分查找",-1),ut={style:{"text-align":"left"}},_t=t("td",{style:{"text-align":"center"}},"154",-1),ht={style:{"text-align":"left"}},kt={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},mt={style:{"text-align":"center"}},ft={style:{"text-align":"left"}},gt=t("code",null,"数组",-1),bt=t("code",null,"二分查找",-1),yt={style:{"text-align":"left"}},vt=t("td",{style:{"text-align":"center"}},"33",-1),xt={style:{"text-align":"left"}},wt={href:"https://leetcode.com/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},jt={style:{"text-align":"center"}},Mt={style:{"text-align":"left"}},It=t("code",null,"数组",-1),Et=t("code",null,"二分查找",-1),Bt={style:{"text-align":"left"}},Tt=t("td",{style:{"text-align":"center"}},"81",-1),Nt={style:{"text-align":"left"}},Ot={href:"https://leetcode.com/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},Gt={style:{"text-align":"center"}},Ht={style:{"text-align":"left"}},St=t("code",null,"数组",-1),qt=t("code",null,"二分查找",-1),Dt={style:{"text-align":"left"}},Lt=t("td",{style:{"text-align":"center"}},"278",-1),Rt={style:{"text-align":"left"}},Vt={href:"https://leetcode.com/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},At={style:{"text-align":"center"}},Ct={style:{"text-align":"left"}},Pt=t("code",null,"二分查找",-1),zt=t("code",null,"交互",-1),Kt={style:{"text-align":"left"}},Ut=t("td",{style:{"text-align":"center"}},"162",-1),Ft={style:{"text-align":"left"}},Jt={href:"https://leetcode.com/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},Qt={style:{"text-align":"center"}},Wt={style:{"text-align":"left"}},Xt=t("code",null,"数组",-1),Yt=t("code",null,"二分查找",-1),Zt={style:{"text-align":"left"}},$t=t("td",{style:{"text-align":"center"}},"852",-1),tn={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},en=t("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},an=t("code",null,"数组",-1),on=t("code",null,"二分查找",-1),ln={style:{"text-align":"left"}},cn=t("td",{style:{"text-align":"center"}},"1095",-1),pn={style:{"text-align":"left"}},dn={href:"https://leetcode.com/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},rn=t("td",{style:{"text-align":"center"}},null,-1),un={style:{"text-align":"left"}},_n=t("code",null,"数组",-1),hn=t("code",null,"二分查找",-1),kn=t("code",null,"交互",-1),mn={style:{"text-align":"left"}},fn=t("td",{style:{"text-align":"center"}},"744",-1),gn={style:{"text-align":"left"}},bn={href:"https://leetcode.com/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"},yn=t("td",{style:{"text-align":"center"}},null,-1),vn={style:{"text-align":"left"}},xn=t("code",null,"数组",-1),wn=t("code",null,"二分查找",-1),jn={style:{"text-align":"left"}},Mn=t("td",{style:{"text-align":"center"}},"4",-1),In={style:{"text-align":"left"}},En={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},Bn={style:{"text-align":"center"}},Tn={style:{"text-align":"left"}},Nn=t("code",null,"数组",-1),On=t("code",null,"二分查找",-1),Gn=t("code",null,"分治",-1),Hn={style:{"text-align":"left"}},Sn=t("td",{style:{"text-align":"center"}},"74",-1),qn={style:{"text-align":"left"}},Dn={href:"https://leetcode.com/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},Ln={style:{"text-align":"center"}},Rn={style:{"text-align":"left"}},Vn=t("code",null,"数组",-1),An=t("code",null,"二分查找",-1),Cn=t("code",null,"矩阵",-1),Pn={style:{"text-align":"left"}},zn=t("td",{style:{"text-align":"center"}},"240",-1),Kn={style:{"text-align":"left"}},Un={href:"https://leetcode.com/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},Fn={style:{"text-align":"center"}},Jn={style:{"text-align":"left"}},Qn=t("code",null,"数组",-1),Wn=t("code",null,"二分查找",-1),Xn=t("code",null,"分治",-1),Yn=t("code",null,"1+",-1),Zn={style:{"text-align":"left"}},$n=t("h4",{id:"二分答案",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分答案","aria-hidden":"true"},"#"),e(" 二分答案")],-1),te=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),ne=t("td",{style:{"text-align":"center"}},"69",-1),ee={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},ae={style:{"text-align":"center"}},oe={style:{"text-align":"left"}},le=t("code",null,"数学",-1),ce=t("code",null,"二分查找",-1),ie={style:{"text-align":"left"}},pe=t("td",{style:{"text-align":"center"}},"287",-1),de={style:{"text-align":"left"}},re={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},ue={style:{"text-align":"center"}},_e={style:{"text-align":"left"}},he=t("code",null,"位运算",-1),ke=t("code",null,"数组",-1),me=t("code",null,"双指针",-1),fe=t("code",null,"1+",-1),ge={style:{"text-align":"left"}},be=t("td",{style:{"text-align":"center"}},"50",-1),ye={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},xe={style:{"text-align":"center"}},we={style:{"text-align":"left"}},je=t("code",null,"递归",-1),Me=t("code",null,"数学",-1),Ie={style:{"text-align":"left"}},Ee=t("td",{style:{"text-align":"center"}},"367",-1),Be={style:{"text-align":"left"}},Te={href:"https://leetcode.com/problems/valid-perfect-square",target:"_blank",rel:"noopener noreferrer"},Ne=t("td",{style:{"text-align":"center"}},null,-1),Oe={style:{"text-align":"left"}},Ge=t("code",null,"数学",-1),He=t("code",null,"二分查找",-1),Se={style:{"text-align":"left"}},qe=t("td",{style:{"text-align":"center"}},"1300",-1),De={style:{"text-align":"left"}},Le={href:"https://leetcode.com/problems/sum-of-mutated-array-closest-to-target",target:"_blank",rel:"noopener noreferrer"},Re=t("td",{style:{"text-align":"center"}},null,-1),Ve={style:{"text-align":"left"}},Ae=t("code",null,"数组",-1),Ce=t("code",null,"二分查找",-1),Pe=t("code",null,"排序",-1),ze={style:{"text-align":"left"}},Ke=t("td",{style:{"text-align":"center"}},"400",-1),Ue={style:{"text-align":"left"}},Fe={href:"https://leetcode.com/problems/nth-digit",target:"_blank",rel:"noopener noreferrer"},Je=t("td",{style:{"text-align":"center"}},null,-1),Qe={style:{"text-align":"left"}},We=t("code",null,"数学",-1),Xe=t("code",null,"二分查找",-1),Ye={style:{"text-align":"left"}},Ze=t("h4",{id:"复杂的二分查找问题",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#复杂的二分查找问题","aria-hidden":"true"},"#"),e(" 复杂的二分查找问题")],-1),$e=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),ts=t("td",{style:{"text-align":"center"}},"875",-1),ns={style:{"text-align":"left"}},es={href:"https://leetcode.com/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},ss=t("td",{style:{"text-align":"center"}},null,-1),as={style:{"text-align":"left"}},os=t("code",null,"数组",-1),ls=t("code",null,"二分查找",-1),cs={style:{"text-align":"left"}},is=t("td",{style:{"text-align":"center"}},"410",-1),ps={style:{"text-align":"left"}},ds={href:"https://leetcode.com/problems/split-array-largest-sum",target:"_blank",rel:"noopener noreferrer"},rs=t("td",{style:{"text-align":"center"}},null,-1),us={style:{"text-align":"left"}},_s=t("code",null,"贪心",-1),hs=t("code",null,"数组",-1),ks=t("code",null,"二分查找",-1),ms=t("code",null,"2+",-1),fs={style:{"text-align":"left"}},gs=t("td",{style:{"text-align":"center"}},"209",-1),bs={style:{"text-align":"left"}},ys={href:"https://leetcode.com/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},vs={style:{"text-align":"center"}},xs={style:{"text-align":"left"}},ws=t("code",null,"数组",-1),js=t("code",null,"二分查找",-1),Ms=t("code",null,"前缀和",-1),Is=t("code",null,"1+",-1),Es={style:{"text-align":"left"}},Bs=t("td",{style:{"text-align":"center"}},"658",-1),Ts={style:{"text-align":"left"}},Ns={href:"https://leetcode.com/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},Os=t("td",{style:{"text-align":"center"}},null,-1),Gs={style:{"text-align":"left"}},Hs=t("code",null,"数组",-1),Ss=t("code",null,"双指针",-1),qs=t("code",null,"二分查找",-1),Ds=t("code",null,"3+",-1),Ls={style:{"text-align":"left"}},Rs=t("td",{style:{"text-align":"center"}},"270",-1),Vs={style:{"text-align":"left"}},As={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Cs=t("td",{style:{"text-align":"center"}},null,-1),Ps={style:{"text-align":"left"}},zs=t("code",null,"树",-1),Ks=t("code",null,"深度优先搜索",-1),Us=t("code",null,"二叉搜索树",-1),Fs=t("code",null,"2+",-1),Js={style:{"text-align":"left"}},Qs=t("td",{style:{"text-align":"center"}},"702",-1),Ws={style:{"text-align":"left"}},Xs={href:"https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size",target:"_blank",rel:"noopener noreferrer"},Ys=t("td",{style:{"text-align":"center"}},null,-1),Zs={style:{"text-align":"left"}},$s=t("code",null,"数组",-1),ta=t("code",null,"二分查找",-1),na=t("code",null,"交互",-1),ea={style:{"text-align":"left"}},sa=t("td",{style:{"text-align":"center"}},"349",-1),aa={style:{"text-align":"left"}},oa={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},la=t("td",{style:{"text-align":"center"}},null,-1),ca={style:{"text-align":"left"}},ia=t("code",null,"数组",-1),pa=t("code",null,"哈希表",-1),da=t("code",null,"双指针",-1),ra=t("code",null,"2+",-1),ua={style:{"text-align":"left"}},_a=t("td",{style:{"text-align":"center"}},"350",-1),ha={style:{"text-align":"left"}},ka={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},ma=t("td",{style:{"text-align":"center"}},null,-1),fa={style:{"text-align":"left"}},ga=t("code",null,"数组",-1),ba=t("code",null,"哈希表",-1),ya=t("code",null,"双指针",-1),va=t("code",null,"2+",-1),xa={style:{"text-align":"left"}},wa=t("td",{style:{"text-align":"center"}},"287",-1),ja={style:{"text-align":"left"}},Ma={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},Ia={style:{"text-align":"center"}},Ea={style:{"text-align":"left"}},Ba=t("code",null,"位运算",-1),Ta=t("code",null,"数组",-1),Na=t("code",null,"双指针",-1),Oa=t("code",null,"1+",-1),Ga={style:{"text-align":"left"}},Ha=t("td",{style:{"text-align":"center"}},"719",-1),Sa={style:{"text-align":"left"}},qa={href:"https://leetcode.com/problems/find-k-th-smallest-pair-distance",target:"_blank",rel:"noopener noreferrer"},Da=t("td",{style:{"text-align":"center"}},null,-1),La={style:{"text-align":"left"}},Ra=t("code",null,"数组",-1),Va=t("code",null,"双指针",-1),Aa=t("code",null,"二分查找",-1),Ca=t("code",null,"1+",-1),Pa={style:{"text-align":"left"}},za=t("td",{style:{"text-align":"center"}},"259",-1),Ka={style:{"text-align":"left"}},Ua={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},Fa={style:{"text-align":"center"}},Ja={style:{"text-align":"left"}},Qa=t("code",null,"数组",-1),Wa=t("code",null,"双指针",-1),Xa=t("code",null,"二分查找",-1),Ya=t("code",null,"1+",-1),Za={style:{"text-align":"left"}},$a=t("td",{style:{"text-align":"center"}},"1011",-1),to={style:{"text-align":"left"}},no={href:"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days",target:"_blank",rel:"noopener noreferrer"},eo=t("td",{style:{"text-align":"center"}},null,-1),so={style:{"text-align":"left"}},ao=t("code",null,"数组",-1),oo=t("code",null,"二分查找",-1),lo={style:{"text-align":"left"}},co=t("td",{style:{"text-align":"center"}},"1482",-1),io={style:{"text-align":"left"}},po={href:"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets",target:"_blank",rel:"noopener noreferrer"},ro=t("td",{style:{"text-align":"center"}},null,-1),uo={style:{"text-align":"left"}},_o=t("code",null,"数组",-1),ho=t("code",null,"二分查找",-1),ko={style:{"text-align":"left"}};function mo(fo,go){const o=i("ExternalLinkIcon"),a=i("RouterLink"),l=i("font");return d(),r("div",null,[h,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),k,m,c(" prettier-ignore "),t("table",null,[f,t("tbody",null,[t("tr",null,[g,t("td",b,[t("a",y,[e("二分查找"),n(o)])]),t("td",v,[n(a,{to:"/leetcode-js/problem/0704.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",x,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[w]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[j]),_:1})]),t("td",M,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[I,t("td",E,[t("a",B,[e("猜数字大小"),n(o)])]),t("td",T,[n(a,{to:"/leetcode-js/problem/0374.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",N,[n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[O]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/interactive.html"},{default:s(()=>[G]),_:1})]),t("td",H,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[S,t("td",q,[t("a",D,[e("搜索插入位置"),n(o)])]),t("td",L,[n(a,{to:"/leetcode-js/problem/0035.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",R,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[V]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[A]),_:1})]),t("td",C,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[P,t("td",z,[t("a",K,[e("在排序数组中查找元素的第一个和最后一个位置"),n(o)])]),t("td",U,[n(a,{to:"/leetcode-js/problem/0034.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",F,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[J]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Q]),_:1})]),t("td",W,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[X,t("td",Y,[t("a",Z,[e("两数之和 II - 输入有序数组"),n(o)])]),t("td",$,[n(a,{to:"/leetcode-js/problem/0167.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",tt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[nt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[et]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[st]),_:1})]),t("td",at,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ot,t("td",lt,[t("a",ct,[e("寻找旋转排序数组中的最小值"),n(o)])]),t("td",it,[n(a,{to:"/leetcode-js/problem/0153.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",pt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[dt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[rt]),_:1})]),t("td",ut,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[_t,t("td",ht,[t("a",kt,[e("寻找旋转排序数组中的最小值 II"),n(o)])]),t("td",mt,[n(a,{to:"/leetcode-js/problem/0154.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",ft,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[gt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[bt]),_:1})]),t("td",yt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[vt,t("td",xt,[t("a",wt,[e("搜索旋转排序数组"),n(o)])]),t("td",jt,[n(a,{to:"/leetcode-js/problem/0033.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Mt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[It]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Et]),_:1})]),t("td",Bt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Tt,t("td",Nt,[t("a",Ot,[e("搜索旋转排序数组 II"),n(o)])]),t("td",Gt,[n(a,{to:"/leetcode-js/problem/0081.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Ht,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[qt]),_:1})]),t("td",Dt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Lt,t("td",Rt,[t("a",Vt,[e("第一个错误的版本"),n(o)])]),t("td",At,[n(a,{to:"/leetcode-js/problem/0278.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Ct,[n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Pt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/interactive.html"},{default:s(()=>[zt]),_:1})]),t("td",Kt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Ut,t("td",Ft,[t("a",Jt,[e("寻找峰值"),n(o)])]),t("td",Qt,[n(a,{to:"/leetcode-js/problem/0162.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Wt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Xt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Yt]),_:1})]),t("td",Zt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[$t,t("td",tn,[t("a",nn,[e("山脉数组的峰顶索引"),n(o)])]),en,t("td",sn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[an]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[on]),_:1})]),t("td",ln,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[cn,t("td",pn,[t("a",dn,[e("山脉数组中查找目标值"),n(o)])]),rn,t("td",un,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[_n]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[hn]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/interactive.html"},{default:s(()=>[kn]),_:1})]),t("td",mn,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[fn,t("td",gn,[t("a",bn,[e("寻找比目标字母大的最小字母"),n(o)])]),yn,t("td",vn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[xn]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[wn]),_:1})]),t("td",jn,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Mn,t("td",In,[t("a",En,[e("寻找两个正序数组的中位数"),n(o)])]),t("td",Bn,[n(a,{to:"/leetcode-js/problem/0004.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Tn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Nn]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[On]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:s(()=>[Gn]),_:1})]),t("td",Hn,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Sn,t("td",qn,[t("a",Dn,[e("搜索二维矩阵"),n(o)])]),t("td",Ln,[n(a,{to:"/leetcode-js/problem/0074.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Rn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Vn]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[An]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/matrix.html"},{default:s(()=>[Cn]),_:1})]),t("td",Pn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[zn,t("td",Kn,[t("a",Un,[e("搜索二维矩阵 II"),n(o)])]),t("td",Fn,[n(a,{to:"/leetcode-js/problem/0240.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Jn,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Qn]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Wn]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:s(()=>[Xn]),_:1}),e(),Yn]),t("td",Zn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])]),$n,c(" prettier-ignore "),t("table",null,[te,t("tbody",null,[t("tr",null,[ne,t("td",ee,[t("a",se,[e("x 的平方根 "),n(o)])]),t("td",ae,[n(a,{to:"/leetcode-js/problem/0069.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",oe,[n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[le]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[ce]),_:1})]),t("td",ie,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[pe,t("td",de,[t("a",re,[e("寻找重复数"),n(o)])]),t("td",ue,[n(a,{to:"/leetcode-js/problem/0287.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",_e,[n(a,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:s(()=>[he]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[ke]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[me]),_:1}),e(),fe]),t("td",ge,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[be,t("td",ye,[t("a",ve,[e("Pow(x, n)"),n(o)])]),t("td",xe,[n(a,{to:"/leetcode-js/problem/0050.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",we,[n(a,{to:"/leetcode-js/outline/tag/recursion.html"},{default:s(()=>[je]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[Me]),_:1})]),t("td",Ie,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ee,t("td",Be,[t("a",Te,[e("有效的完全平方数"),n(o)])]),Ne,t("td",Oe,[n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[Ge]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[He]),_:1})]),t("td",Se,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[qe,t("td",De,[t("a",Le,[e("转变数组后最接近目标值的数组和"),n(o)])]),Re,t("td",Ve,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Ae]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Ce]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:s(()=>[Pe]),_:1})]),t("td",ze,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ke,t("td",Ue,[t("a",Fe,[e("第 N 位数字"),n(o)])]),Je,t("td",Qe,[n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[We]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Xe]),_:1})]),t("td",Ye,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])]),Ze,c(" prettier-ignore "),t("table",null,[$e,t("tbody",null,[t("tr",null,[ts,t("td",ns,[t("a",es,[e("爱吃香蕉的珂珂"),n(o)])]),ss,t("td",as,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[os]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[ls]),_:1})]),t("td",cs,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[is,t("td",ps,[t("a",ds,[e("分割数组的最大值"),n(o)])]),rs,t("td",us,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:s(()=>[_s]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[hs]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[ks]),_:1}),e(),ms]),t("td",fs,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[gs,t("td",bs,[t("a",ys,[e("长度最小的子数组"),n(o)])]),t("td",vs,[n(a,{to:"/leetcode-js/problem/0209.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",xs,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[ws]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[js]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:s(()=>[Ms]),_:1}),e(),Is]),t("td",Es,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Bs,t("td",Ts,[t("a",Ns,[e("找到 K 个最接近的元素"),n(o)])]),Os,t("td",Gs,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Hs]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[Ss]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[qs]),_:1}),e(),Ds]),t("td",Ls,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Rs,t("td",Vs,[t("a",As,[e("最接近的二叉搜索树值"),n(o)])]),Cs,t("td",Ps,[n(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:s(()=>[zs]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:s(()=>[Ks]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:s(()=>[Us]),_:1}),e(),Fs]),t("td",Js,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Qs,t("td",Ws,[t("a",Xs,[e("搜索长度未知的有序数组"),n(o)])]),Ys,t("td",Zs,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[$s]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[ta]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/interactive.html"},{default:s(()=>[na]),_:1})]),t("td",ea,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[sa,t("td",aa,[t("a",oa,[e("两个数组的交集"),n(o)])]),la,t("td",ca,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[ia]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[pa]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[da]),_:1}),e(),ra]),t("td",ua,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[_a,t("td",ha,[t("a",ka,[e("两个数组的交集 II"),n(o)])]),ma,t("td",fa,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[ga]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[ba]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[ya]),_:1}),e(),va]),t("td",xa,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[wa,t("td",ja,[t("a",Ma,[e("寻找重复数"),n(o)])]),t("td",Ia,[n(a,{to:"/leetcode-js/problem/0287.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Ea,[n(a,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:s(()=>[Ba]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Ta]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[Na]),_:1}),e(),Oa]),t("td",Ga,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ha,t("td",Sa,[t("a",qa,[e("找出第 K 小的数对距离"),n(o)])]),Da,t("td",La,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Ra]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[Va]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Aa]),_:1}),e(),Ca]),t("td",Pa,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[za,t("td",Ka,[t("a",Ua,[e("较小的三数之和"),n(o)])]),t("td",Fa,[n(a,{to:"/leetcode-js/problem/0259.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Ja,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Qa]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[Wa]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[Xa]),_:1}),e(),Ya]),t("td",Za,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[$a,t("td",to,[t("a",no,[e("在 D 天内送达包裹的能力"),n(o)])]),eo,t("td",so,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[ao]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[oo]),_:1})]),t("td",lo,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[co,t("td",io,[t("a",po,[e("制作 m 束花所需的最少天数"),n(o)])]),ro,t("td",uo,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[_o]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[ho]),_:1})]),t("td",ko,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const yo=p(_,[["render",mo],["__file","binary_search.html.vue"]]);export{yo as default};
