import{_ as d,r as c,o as i,c as r,a as e,b as t,d as n,w as s,f as p,e as u}from"./app-5VBZs9Uu.js";const h={},m={id:"_137-只出现一次的数字-ii",tabindex:"-1"},_=e("a",{class:"header-anchor",href:"#_137-只出现一次的数字-ii","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"位运算",-1),g=e("code",null,"数组",-1),f={href:"https://leetcode.com/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code> where every element appears <strong>three times</strong> except for one, which appears <strong>exactly once</strong>. <em>Find the single element and return it</em>.</p><p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [2,2,3,2]</p><p>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1,0,1,0,1,99]</p><p>Output: 99</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li><li>Each element in <code>nums</code> appears exactly <strong>three times</strong> except for one element which appears <strong>once</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong> 。请你找出并返回那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>使用两个变量 <code>ones</code> 和 <code>twos</code> 来分别记录当前位中出现 1 次和 2 次的数字，初始化为 <code>0</code>；</li><li>遍历数组中的每一个数字，更新 <code>ones</code> 和 <code>twos</code> 的状态；</li><li>使用位运算更新 <code>twos</code>，只在 <code>ones</code> 中存在的数字中增加计数，这样可以防止将已经出现 3 次的数字再次计入；</li></ol><ul><li><code>twos |= ones &amp; num</code>: 将 <code>twos</code> 中的位更新为那些同时在 <code>ones</code> 和 <code>num</code> 中为 <code>1</code> 的位；</li><li><code>ones &amp; num</code>: 这部分计算在 <code>ones</code> 和 <code>num</code> 中都为 <code>1</code> 的位，结果是一个新的整数；</li><li><code>twos |=</code>: 这部分是将计算得到的结果与 <code>twos</code> 进行按位或（OR）操作，更新 <code>twos</code> 的值；</li></ul><ol start="4"><li>使用异或运算更新 <code>ones</code>，添加当前数字；</li></ol><ul><li><code>ones ^= num</code>: 任何一个数字异或它自己都等于 <code>0</code> (<code>x ^ x = 0</code>)，出现两次的数字在异或中会被抵消掉；</li></ul><ol start="5"><li><p><code>threes</code> 变量通过 <code>ones &amp; twos</code> 计算得出，表示哪些数字出现了 3 次；</p></li><li><p>使用位清除操作将这些数字从 <code>ones</code> 和 <code>twos</code> 中移除，<code>ones &amp;= ~threes</code>；</p></li></ol><ul><li><code>~threes</code>: 这是 <code>threes</code> 的按位取反（bitwise NOT），将所有的二进制位反转。即，如果 <code>threes</code> 中某个位置是 <code>1</code>，那么 <code>~threes</code> 中该位置就是 <code>0</code>，反之亦然。</li><li><code>ones</code> 中的每一位和 <code>~threes</code> 中的每一位进行按位与（AND）操作。</li><li>如果 <code>threes</code> 中的某一位是 <code>1</code>，那么 <code>~threes</code> 中的对应位是 <code>0</code>，因此 <code>ones</code> 的该位将被置为 <code>0</code>。</li><li>如果 <code>threes</code> 中的某一位是 <code>0</code>，那么 <code>~threes</code> 中的对应位是 <code>1</code>，因此 <code>ones</code> 的该位保持不变。</li></ul><ol start="7"><li>在遍历完成后，<code>ones</code> 中的值就是只出现一次的数字。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，只需遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数级别的额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">singleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> ones <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		twos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 更新 twos：只记录在 ones 中已经出现过的数字</span>
		twos <span class="token operator">|=</span> ones <span class="token operator">&amp;</span> num<span class="token punctuation">;</span>

		<span class="token comment">// 更新 ones：将当前数字加入 ones</span>
		ones <span class="token operator">^=</span> num<span class="token punctuation">;</span>

		<span class="token comment">// 将出现 3 次的数字从 ones 和 twos 中移除</span>
		<span class="token keyword">const</span> threes <span class="token operator">=</span> ones <span class="token operator">&amp;</span> twos<span class="token punctuation">;</span>
		ones <span class="token operator">&amp;=</span> <span class="token operator">~</span>threes<span class="token punctuation">;</span>
		twos <span class="token operator">&amp;=</span> <span class="token operator">~</span>threes<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> ones<span class="token punctuation">;</span> <span class="token comment">// 结果在 ones 中</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),y=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),w=e("td",{style:{"text-align":"center"}},"136",-1),j={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},N={style:{"text-align":"left"}},O=e("code",null,"位运算",-1),C=e("code",null,"数组",-1),L={style:{"text-align":"left"}},V=e("td",{style:{"text-align":"center"}},"260",-1),q={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/single-number-iii",target:"_blank",rel:"noopener noreferrer"},B=e("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},T=e("code",null,"位运算",-1),A=e("code",null,"数组",-1),D={style:{"text-align":"left"}},F=e("td",{style:{"text-align":"center"}},"3158",-1),G={style:{"text-align":"left"}},S={href:"https://leetcode.com/problems/find-the-xor-of-numbers-which-appear-twice",target:"_blank",rel:"noopener noreferrer"},X=e("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},z=e("code",null,"位运算",-1),H=e("code",null,"数组",-1),J=e("code",null,"哈希表",-1),K={style:{"text-align":"left"}};function P(Q,U){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink");return i(),r("div",null,[e("h1",m,[_,t(),e("a",k,[t("137. 只出现一次的数字 II"),n(a)])]),e("p",null,[t("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),n(o,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:s(()=>[b]),_:1}),t(),n(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[g]),_:1}),t("  🔗 "),e("a",f,[v,n(a)])]),x,p(" prettier-ignore "),e("table",null,[y,e("tbody",null,[e("tr",null,[w,e("td",j,[e("a",I,[t("只出现一次的数字"),n(a)])]),e("td",E,[n(o,{to:"/leetcode-js/problem/0136.html"},{default:s(()=>[t("[✓]")]),_:1})]),e("td",N,[n(o,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:s(()=>[O]),_:1}),t(),n(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[C]),_:1})]),e("td",L,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[V,e("td",q,[e("a",R,[t("只出现一次的数字 III"),n(a)])]),B,e("td",M,[n(o,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:s(()=>[T]),_:1}),t(),n(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[A]),_:1})]),e("td",D,[n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])]),e("tr",null,[F,e("td",G,[e("a",S,[t("求出出现两次数字的 XOR 值"),n(a)])]),X,e("td",Y,[n(o,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:s(()=>[z]),_:1}),t(),n(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[H]),_:1}),t(),n(o,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[J]),_:1})]),e("td",K,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])])])])])}const Z=d(h,[["render",P],["__file","0137.html.vue"]]);export{Z as default};
