const e=JSON.parse('{"key":"v-9b8f2dce","path":"/interview/vue/performance.html","title":"Vue3.0 性能提升主要是通过哪几方面体现的？","lang":"zh-CN","frontmatter":{"description":"Vue3.0 性能提升主要是通过哪几方面体现的？ 一、编译阶段 回顾Vue2，我们知道每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把用到的数据property记录为依赖，当依赖发生改变，触发setter，则会通知watcher，从而使关联的组件重新渲染","head":[["meta",{"property":"og:url","content":"https://2xiao.github.io/interview/vue/performance.html"}],["meta",{"property":"og:site_name","content":"LeetCode-JS"}],["meta",{"property":"og:title","content":"Vue3.0 性能提升主要是通过哪几方面体现的？"}],["meta",{"property":"og:description","content":"Vue3.0 性能提升主要是通过哪几方面体现的？ 一、编译阶段 回顾Vue2，我们知道每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把用到的数据property记录为依赖，当依赖发生改变，触发setter，则会通知watcher，从而使关联的组件重新渲染"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T16:29:32.000Z"}],["meta",{"property":"article:author","content":"2xiao"}],["meta",{"property":"article:modified_time","content":"2024-11-20T16:29:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3.0 性能提升主要是通过哪几方面体现的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T16:29:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"2xiao\\",\\"url\\":\\"https://github.com/2xiao\\"}]}"]]},"headers":[{"level":2,"title":"一、编译阶段","slug":"一、编译阶段","link":"#一、编译阶段","children":[]},{"level":2,"title":"二、源码体积","slug":"二、源码体积","link":"#二、源码体积","children":[]},{"level":2,"title":"三、响应式系统","slug":"三、响应式系统","link":"#三、响应式系统","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1732116041000,"updatedTime":1732120172000,"contributors":[{"name":"2xiao","email":"827574297wxxtb@sina.com","commits":2}]},"readingTime":{"minutes":4.55,"words":1366},"filePathRelative":"interview/vue/performance.md","localizedDate":"2024年11月20日","excerpt":"<h1> Vue3.0 性能提升主要是通过哪几方面体现的？</h1>\\n<h2> 一、编译阶段</h2>\\n<p>回顾<code>Vue2</code>，我们知道每个组件实例都对应一个 <code>watcher</code> 实例，它会在组件渲染的过程中把用到的数据<code>property</code>记录为依赖，当依赖发生改变，触发<code>setter</code>，则会通知<code>watcher</code>，从而使关联的组件重新渲染</p>","autoDesc":true}');export{e as data};
