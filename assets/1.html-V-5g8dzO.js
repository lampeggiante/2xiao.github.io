import{_ as e,r as t,o as p,c as o,a as n,b as s,d as l,e as c}from"./app-5VBZs9Uu.js";const i={},r=c(`<h1 id="_1-vue3-设计思想" tabindex="-1"><a class="header-anchor" href="#_1-vue3-设计思想" aria-hidden="true">#</a> 1. Vue3 设计思想</h1><h2 id="_1-声明式框架" tabindex="-1"><a class="header-anchor" href="#_1-声明式框架" aria-hidden="true">#</a> 1.声明式框架</h2><blockquote><p>Vue3 是声明式的框架，用起来简单。</p></blockquote><p><strong>命令式和声明式区别</strong></p><ul><li>早在 JQ 的时代编写的代码都是命令式的，命令式框架重要特点就是关注过程</li><li>声明式框架更加关注结果。命令式的代码封装到了 Vuejs 中，过程靠 vuejs 来实现</li></ul><blockquote><p>声明式代码更加简单，不需要关注实现，按照要求填代码就可以 （给上原材料就出结果）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 命令式编程：</span>
<span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	total <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> 关注了过程<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 声明式编程：</span>
<span class="token keyword">let</span> total2 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> memo <span class="token operator">+</span> current<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-采用虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_2-采用虚拟-dom" aria-hidden="true">#</a> 2.采用虚拟 DOM</h2><p>传统更新页面，拼接一个完整的字符串 innerHTML 全部重新渲染，添加虚拟 DOM 后，可以比较新旧虚拟节点，找到变化在进行更新。虚拟 DOM 就是一个对象，用来描述真实 DOM 的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">__v_isVNode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">__v_skip</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	type<span class="token punctuation">,</span>
	props<span class="token punctuation">,</span>
	<span class="token literal-property property">key</span><span class="token operator">:</span> props <span class="token operator">&amp;&amp;</span> <span class="token function">normalizeKey</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token literal-property property">ref</span><span class="token operator">:</span> props <span class="token operator">&amp;&amp;</span> <span class="token function">normalizeRef</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>
	children<span class="token punctuation">,</span>
	<span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	patchFlag<span class="token punctuation">,</span>
	dynamicProps<span class="token punctuation">,</span>
	<span class="token literal-property property">dynamicChildren</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token literal-property property">appContext</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-区分编译时和运行时" tabindex="-1"><a class="header-anchor" href="#_3-区分编译时和运行时" aria-hidden="true">#</a> 3.区分编译时和运行时</h2><ul><li>我们需要有一个虚拟 DOM，调用渲染方法将虚拟 DOM 渲染成真实 DOM （缺点就是虚拟 DOM 编写麻烦）</li><li>专门写个编译时可以将模板编译成虚拟 DOM （在构建的时候进行编译性能更高，不需要再运行的时候进行编译，而且 vue3 在编译中做了很多优化）</li></ul><h2 id="_4-vue3-设计思想" tabindex="-1"><a class="header-anchor" href="#_4-vue3-设计思想" aria-hidden="true">#</a> 4.Vue3 设计思想</h2>`,13),u=n("li",null,[n("strong",null,"拆分模块："),s(" Vue3.0 注重模块上的拆分 Vue3 中的模块之间耦合度低，模块可以独立使用。")],-1),k=n("li",null,[n("strong",null,"组合式 API："),s(" 通过构建工具 Tree-shaking 机制实现按需引入，减少用户打包后体积。")],-1),d=n("li",null,[n("strong",null,"扩展更方便："),s(" Vue3 允许自定义渲染器，扩展能力强。")],-1),v={href:"https://github.com/vuejs/rfcs/tree/master/active-rfcs",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("ul",null,[u,k,d,n("li",null,[n("strong",null,[s("采用 "),n("a",v,[s("RFC"),l(a)]),s("：")]),s(" 使用 RFC 来确保改动和设计都是经过 Vuejs 核心团队探讨并得到确认的。也让用户可以了解每一个功能采用或废弃的前因后果。")])])])}const y=e(i,[["render",m],["__file","1.html.vue"]]);export{y as default};
