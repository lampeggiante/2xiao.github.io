import{_ as e,r as o,o as p,c as i,a as n,b as a,d as t,e as l}from"./app-b4s7f53x.js";const c={},r=l(`<h1 id="javascript-本地存储的方式有哪些" tabindex="-1"><a class="header-anchor" href="#javascript-本地存储的方式有哪些" aria-hidden="true">#</a> Javascript 本地存储的方式有哪些？</h1><h2 id="一、javascript-本地存储方式" tabindex="-1"><a class="header-anchor" href="#一、javascript-本地存储方式" aria-hidden="true">#</a> 一、JavaScript 本地存储方式</h2><p>JavaScript 提供多种方式来存储数据，以下是常见的四种本地存储方式：</p><ol><li><strong>Cookie</strong></li><li><strong>sessionStorage</strong></li><li><strong>localStorage</strong></li><li><strong>IndexedDB</strong></li></ol><h2 id="二、各存储方式解析" tabindex="-1"><a class="header-anchor" href="#二、各存储方式解析" aria-hidden="true">#</a> 二、各存储方式解析</h2><h3 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie" aria-hidden="true">#</a> 1. Cookie</h3><p><code>Cookie</code> 是一种早期用于保存用户状态的小型文本数据。它最初是为了解决 HTTP 无状态协议问题。</p><p><strong>特点：</strong></p><ul><li>数据大小：约 4KB。</li><li>生命周期：可以设置到期时间。</li><li>数据传输：每次 HTTP 请求都会附带到请求头中。</li><li>安全性：如果未加密，容易被窃取。</li></ul><p><strong>适用场景：</strong></p><ul><li>用户登录态标记。</li><li>跟踪用户行为。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置 Cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span>
	<span class="token string">&#39;username=John; expires=Fri, 31 Dec 2024 23:59:59 GMT; path=/&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 读取 Cookie</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除 Cookie（将其设置为过期时间）</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span>
	<span class="token string">&#39;username=John; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_2-sessionstorage" aria-hidden="true">#</a> 2. sessionStorage</h3><p><code>sessionStorage</code> 是 HTML5 提供的浏览器存储方式。数据仅在当前会话（窗口或标签页）中有效。</p><p><strong>特点：</strong></p><ul><li>数据大小：约 5MB（视浏览器而定）。</li><li>生命周期：页面会话，关闭页面或标签后清除。</li><li>数据作用域：同源的窗口或标签页不共享。</li></ul><p><strong>适用场景：</strong></p><ul><li>页面临时数据（例如：表单数据、未提交的数据）。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取数据</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 清除所有数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-localstorage" tabindex="-1"><a class="header-anchor" href="#_3-localstorage" aria-hidden="true">#</a> 3. localStorage</h3><p><code>localStorage</code> 是一种持久化的本地存储方式。数据不会因关闭浏览器而清除，除非用户主动删除。</p><p><strong>特点：</strong></p><ul><li>数据大小：约 5MB。</li><li>生命周期：永久存储。</li><li>数据作用域：同源下所有页面共享。</li></ul><p><strong>适用场景：</strong></p><ul><li>保存长期使用的数据（如用户偏好、Token）。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取数据</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 清除所有数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-indexeddb" tabindex="-1"><a class="header-anchor" href="#_4-indexeddb" aria-hidden="true">#</a> 4. IndexedDB</h3><p><code>IndexedDB</code> 是一种低级 API，用于存储大量结构化数据，是一个真正的浏览器端数据库。</p><p><strong>特点：</strong></p><ul><li>数据大小：理论上无限制（实际由浏览器限制）。</li><li>数据类型：支持对象、文件等结构化数据。</li><li>操作：异步，性能高。</li><li>生命周期：永久存储，除非手动删除。</li></ul><p><strong>适用场景：</strong></p><ul><li>存储大数据，例如离线文档、文件缓存。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打开或创建数据库</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;MyDatabase&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Database opened:&#39;</span><span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
	<span class="token comment">// 创建对象存储</span>
	db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;MyStore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、存储方式的区别" tabindex="-1"><a class="header-anchor" href="#三、存储方式的区别" aria-hidden="true">#</a> 三、存储方式的区别</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>Cookie</strong></th><th><strong>sessionStorage</strong></th><th><strong>localStorage</strong></th><th><strong>IndexedDB</strong></th></tr></thead><tbody><tr><td><strong>存储大小</strong></td><td>~4KB</td><td>~5MB</td><td>~5MB</td><td>理论上无限制</td></tr><tr><td><strong>生命周期</strong></td><td>设置过期时间</td><td>会话结束时清除</td><td>永久存储</td><td>永久存储</td></tr><tr><td><strong>数据传输</strong></td><td>每次请求都会发送到服务器</td><td>不随请求发送</td><td>不随请求发送</td><td>不随请求发送</td></tr><tr><td><strong>数据作用域</strong></td><td>同源</td><td>同源，同标签页</td><td>同源</td><td>同源</td></tr><tr><td><strong>操作复杂性</strong></td><td>简单</td><td>简单</td><td>简单</td><td>较复杂</td></tr></tbody></table><h2 id="四、适用场景总结" tabindex="-1"><a class="header-anchor" href="#四、适用场景总结" aria-hidden="true">#</a> 四、适用场景总结</h2><ul><li><p><strong>Cookie</strong></p><ul><li>保存用户状态信息，如登录态。</li><li>设置跨会话的小型标记。</li></ul></li><li><p><strong>sessionStorage</strong></p><ul><li>保存临时数据，如表单未提交的数据。</li><li>页面切换间的数据临时存储。</li></ul></li><li><p><strong>localStorage</strong></p><ul><li>保存较长期、较小的用户偏好设置。</li><li>保存 Token 或其他长期使用的数据。</li></ul></li><li><p><strong>IndexedDB</strong></p><ul><li>大量数据的存储，如离线应用、文件缓存。</li><li>存储复杂结构化数据。</li></ul></li></ul><h2 id="五、扩展链接" tabindex="-1"><a class="header-anchor" href="#五、扩展链接" aria-hidden="true">#</a> 五、扩展链接</h2>`,42),u={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",target:"_blank",rel:"noopener noreferrer"};function k(v,g){const s=o("ExternalLinkIcon");return p(),i("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[a("Web Storage API - MDN"),t(s)])]),n("li",null,[n("a",d,[a("IndexedDB API - MDN"),t(s)])])])])}const h=e(c,[["render",k],["__file","cache.html.vue"]]);export{h as default};
