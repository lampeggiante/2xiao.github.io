import{_ as u,r as c,o as r,c as k,a as n,b as s,d as e,w as a,e as l}from"./app-qrCIIj1V.js";const d={},v=n("h1",{id:"_16-实现-noop-renderer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_16-实现-noop-renderer","aria-hidden":"true"},"#"),s(" 16. 实现 Noop Renderer")],-1),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"摘要",-1),y=n("ul",null,[n("li",null,"实现 Noop Renderer"),n("li",null,"打包 Noop Renderer"),n("li",null,"测试 useEffect")],-1),f={href:"https://github.com/2xiao/my-react/tree/v1.16",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"git tag v1.16",-1),g=l(`<p><code>react-noop-renderer</code> 和 <code>react-dom</code> 都是 React 提供的渲染器，用于将 React 组件渲染到不同的环境中。</p><p><code>react-dom</code> 主要用于在浏览器环境中渲染 React 组件，它提供了一系列方法来将组件挂载到 DOM 上，并处理事件、更新等相关操作；</p><p>而 <code>react-noop-renderer</code> 则主要用于在非浏览器环境中进行测试和调试，它不依赖于真实的 DOM，也不真正操作 DOM，而是提供了一种模拟的渲染环境，可以在 Node.js 等环境中进行渲染和测试 React 组件，这对于编写单元测试、集成测试以及服务器端渲染等场景非常有用。</p><p>现在我们就来实现 <code>react-noop-renderer</code> 包，并测试一下 <code>react-reconciler</code> 在非浏览器环境中的执行结果。</p><h2 id="_1-实现-noop-renderer" tabindex="-1"><a class="header-anchor" href="#_1-实现-noop-renderer" aria-hidden="true">#</a> 1. 实现 Noop Renderer</h2><p><code>react-noop-renderer</code> 包和 <code>react-dom</code> 包很像，我们可以直接拷贝一份 <code>react-dom</code> 包，然后对其中涉及 DOM 操作的部分进行修改即可。</p><p>对于 hostConfig 来说，要做以下更改：</p><ul><li>修改 <code>Instance</code>、<code>TextInstance</code> 和 <code>Container</code> 的数据结构，模拟元素节点、文本节点、根容器的相应字段；</li><li>维护 <code>instanceCounter</code> 计数器，来为每个实例分配唯一的 id；</li><li>调整 <code>appendInitialChild</code> 和 <code>appendChildToContainer</code> 等方法，将 DOM 操作改造成数组的 <code>splice</code> 、 <code>push</code> 等操作；</li></ul><details class="hint-container details"><summary>👉 查看代码 👈</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-noop-renderer/src/hostConfig.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FiberNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-reconciler/src/fiber&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HostText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-reconciler/src/workTags&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Props <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;shared/ReactTypes&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>
	rootID<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	children<span class="token operator">:</span> <span class="token punctuation">(</span>Instance <span class="token operator">|</span> TextInstance<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Instance</span> <span class="token punctuation">{</span>
	id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	children<span class="token operator">:</span> <span class="token punctuation">(</span>Instance <span class="token operator">|</span> TextInstance<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	parent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	props<span class="token operator">:</span> Props<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TextInstance</span> <span class="token punctuation">{</span>
	text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	parent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instanceCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createInstance <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> props<span class="token operator">:</span> Props<span class="token punctuation">)</span><span class="token operator">:</span> Instance <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
		id<span class="token operator">:</span> instanceCounter<span class="token operator">++</span><span class="token punctuation">,</span>
		type<span class="token punctuation">,</span>
		children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		parent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
		props
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">appendInitialChild</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	parent<span class="token operator">:</span> Instance <span class="token operator">|</span> Container<span class="token punctuation">,</span>
	child<span class="token operator">:</span> Instance
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> prevParentID <span class="token operator">=</span> child<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
	<span class="token keyword">const</span> parentID <span class="token operator">=</span> <span class="token string">&#39;rootID&#39;</span> <span class="token keyword">in</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>rootID <span class="token operator">:</span> parent<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>prevParentID <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prevParentID <span class="token operator">!==</span> parentID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;不能重复挂载child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	child<span class="token punctuation">.</span>parent <span class="token operator">=</span> parentID<span class="token punctuation">;</span>
	parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createTextInstance</span> <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
		text<span class="token operator">:</span> content<span class="token punctuation">,</span>
		id<span class="token operator">:</span> instanceCounter<span class="token operator">++</span><span class="token punctuation">,</span>
		parent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">appendChildToContainer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>child<span class="token operator">:</span> Instance<span class="token punctuation">,</span> parent<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> prevParentID <span class="token operator">=</span> child<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>prevParentID <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prevParentID <span class="token operator">!==</span> parent<span class="token punctuation">.</span>rootID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;不能重复挂载child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	child<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>rootID<span class="token punctuation">;</span>
	parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">insertChildToContainer</span><span class="token punctuation">(</span>
	child<span class="token operator">:</span> Instance<span class="token punctuation">,</span>
	container<span class="token operator">:</span> Container<span class="token punctuation">,</span>
	before<span class="token operator">:</span> Instance
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> beforeIndex <span class="token operator">=</span> container<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>beforeIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;before节点不存在&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> index <span class="token operator">=</span> container<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		container<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	container<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>beforeIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitUpdate</span><span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> HostText<span class="token operator">:</span>
			<span class="token keyword">const</span> text <span class="token operator">=</span> fiber<span class="token punctuation">.</span>memoizedProps<span class="token operator">?.</span>content<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token function">commitTextUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;未实现的 commitUpdate 类型&#39;</span><span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">commitTextUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	textInstance<span class="token operator">:</span> TextInstance<span class="token punctuation">,</span>
	content<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	textInstance<span class="token punctuation">.</span>text <span class="token operator">=</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeChild</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	child<span class="token operator">:</span> Instance <span class="token operator">|</span> TextInstance<span class="token punctuation">,</span>
	container<span class="token operator">:</span> Container
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> index <span class="token operator">=</span> container<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;child not found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	container<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> scheduleMicroTask <span class="token operator">=</span>
	<span class="token keyword">typeof</span> queueMicrotask <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
		<span class="token operator">?</span> queueMicrotask
		<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token builtin">Promise</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
		<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
		<span class="token operator">:</span> setTimeout<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在 <code>root.ts</code> 中实现创建根容器、更新根容器等功能，还额外实现了 <code>getChildren</code> 和 <code>getChildrenAsJSX</code> 两个方法，用于获取根容器的子节点及将子节点转换为 JSX：</p><ul><li><p><strong>createRoot</strong> 函数：</p><ul><li><code>createRoot</code> 函数用于创建一个 React 根容器管理器。</li><li>在 <code>createRoot</code> 函数内部，首先创建一个 <code>container</code> 对象，包含一个 <code>rootID</code> 和一个空的 <code>children</code> 数组。然后通过 <code>createContainer</code> 函数创建一个 Fiber 树的根节点，并将 <code>container</code> 对象作为根节点的实例。</li></ul></li><li><p><strong>render</strong> 方法：</p><ul><li><code>render</code> 方法用于渲染 React 元素到根容器上，调用 <code>updateContainer</code> 函数进行更新操作。</li></ul></li><li><p><strong>getChildren</strong> 方法：</p><ul><li><code>getChildren</code> 方法用于获取指定容器或实例的子节点。</li><li>如果传入的参数存在且有子节点，则返回子节点数组，否则返回 null。</li></ul></li><li><p><strong>getChildrenAsJSX</strong> 方法：</p><ul><li><code>getChildrenAsJSX</code> 方法用于将子节点数组转换为 JSX 元素。</li><li>首先通过 <code>childToJSX</code> 函数将子节点数组转换为 JSX 元素。如果子节点数组只包含一个子节点，则将其直接返回；如果子节点数组包含多个子节点，则将其包装为一个 <code>React.Fragment</code> 元素。</li><li>最终返回一个符合 React 元素结构的对象。</li></ul></li><li><p><strong>childToJSX</strong> 函数：</p><ul><li><code>childToJSX</code> 函数用于将子节点对象或文本节点转换为 JSX 元素。</li><li>如果子节点是文本节点，则直接返回文本内容。</li><li>如果子节点是数组，则递归调用 <code>childToJSX</code> 函数处理数组中的每个子节点。</li><li>如果子节点是实例对象（代表 React 元素节点），则根据实例的类型、props 和子节点递归构建对应的 JSX 元素。</li><li>如果子节点是文本实例对象，则直接返回其文本内容。</li></ul></li><li><p><strong>_Scheduler</strong>：</p><ul><li>将 <code>Scheduler</code> 导入并暴露给根容器管理器，使其在 React 中可以使用调度器来控制更新的优先级和时间。</li></ul></li></ul><details class="hint-container details"><summary>👉 查看代码 👈</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-noop-renderer/src/root.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
	createContainer<span class="token punctuation">,</span>
	updateContainer
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-reconciler/src/fiberReconciler&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Container<span class="token punctuation">,</span> Instance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hostConfig&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactElementType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;shared/ReactTypes&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;shared/ReactSymbols&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Scheduler <span class="token keyword">from</span> <span class="token string">&#39;scheduler&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> idCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> container<span class="token operator">:</span> Container <span class="token operator">=</span> <span class="token punctuation">{</span>
		rootID<span class="token operator">:</span> idCounter<span class="token operator">++</span><span class="token punctuation">,</span>
		children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">function</span> <span class="token function">getChildren</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> Container <span class="token operator">|</span> Instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">function</span> <span class="token function">getChildrenAsJSX</span><span class="token punctuation">(</span>root<span class="token operator">:</span> Container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">childToJSX</span><span class="token punctuation">(</span><span class="token function">getChildren</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				$$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>
				type<span class="token operator">:</span> <span class="token constant">REACT_FRAGMENT_TYPE</span><span class="token punctuation">,</span>
				key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
				ref<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
				props<span class="token operator">:</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>
				__mark<span class="token operator">:</span> <span class="token string">&#39;erxiao&#39;</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> children<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">function</span> <span class="token function">childToJSX</span><span class="token punctuation">(</span>child<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
		<span class="token comment">// 文本节点</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> child<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 数组</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">childToJSX</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> children <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>childToJSX<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>
				children<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>
					<span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> children<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> children<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// Instance</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> instance<span class="token operator">:</span> Instance <span class="token operator">=</span> child<span class="token punctuation">;</span>
			<span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">childToJSX</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> props <span class="token operator">=</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				props<span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				$$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>
				type<span class="token operator">:</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
				key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
				ref<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
				props<span class="token punctuation">,</span>
				__mark<span class="token operator">:</span> <span class="token string">&#39;erxiao&#39;</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// TextInstance</span>
		<span class="token keyword">return</span> child<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		_Scheduler<span class="token operator">:</span> Scheduler<span class="token punctuation">,</span>
		<span class="token function">render</span><span class="token punctuation">(</span>element<span class="token operator">:</span> ReactElementType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">getChildren</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token function">getChildrenAsJSX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">getChildrenAsJSX</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>对于如下的组件，经由 Noop-Renderer 渲染后得到的树状结构如下（对标 DOM 树）：</p>`,13),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(" React "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'react'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" ReactNoop "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'react-noop-renderer'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Child"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},"'I am child'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"App"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s(`
		`),n("span",{class:"token operator"},"<"),s("div"),n("span",{class:"token operator"},">"),s(`
			`),n("span",{class:"token operator"},"<"),s("Child "),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},">"),s(`
			`),n("span",{class:"token operator"},"<"),s("div"),n("span",{class:"token operator"},">"),s("hello world"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
		`),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
	`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" root "),n("span",{class:"token operator"},"="),s(" ReactNoop"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createRoot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
root`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"<"),s("App "),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[s("root"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getChildren"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"["),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		id`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},","),s(`
		parent`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
		children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
			`),n("span",{class:"token punctuation"},"{"),s(" text"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'I am child'"),n("span",{class:"token punctuation"},","),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(" parent"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"7"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
			`),n("span",{class:"token punctuation"},"{"),s(`
				children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),s(" text"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),n("span",{class:"token punctuation"},","),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(" parent"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"6"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
				id`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),s(`
				parent`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},","),s(`
				type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'div'"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
		type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'div'"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[s("root"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getChildrenAsJSX"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"{"),s(`
	$$`),n("span",{class:"token keyword"},"typeof"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"Symbol"),n("span",{class:"token punctuation"},"("),s("react"),n("span",{class:"token punctuation"},"."),s("element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
	key`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
	props`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
		children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
			`),n("span",{class:"token string"},"'I am child'"),n("span",{class:"token punctuation"},","),s(`
			`),n("span",{class:"token punctuation"},"{"),s(`
				$$`),n("span",{class:"token keyword"},"typeof"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"Symbol"),n("span",{class:"token punctuation"},"("),s("react"),n("span",{class:"token punctuation"},"."),s("element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
				key`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
				props`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
				ref`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
				type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'div'"),n("span",{class:"token punctuation"},","),s(`
				__mark`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'erxiao'"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"]"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
	ref`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
	type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'div'"),n("span",{class:"token punctuation"},","),s(`
	__mark`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'erxiao'"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=l(`<h2 id="_2-打包-noop-renderer" tabindex="-1"><a class="header-anchor" href="#_2-打包-noop-renderer" aria-hidden="true">#</a> 2. 打包 Noop Renderer</h2><p><code>react-noop-renderer</code> 包的打包流程和 <code>react-dom</code> 包类似，新建 <code>rollup/react-noop-renderer.config.js</code> 文件：</p><details class="hint-container details"><summary>👉 查看代码 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getPackageJSON<span class="token punctuation">,</span> resolvePkgPath<span class="token punctuation">,</span> getBaseRollupPlugins <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> generatePackageJson <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-generate-package-json&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> alias <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-alias&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> module<span class="token punctuation">,</span> peerDependencies <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getPackageJSON</span><span class="token punctuation">(</span>
	<span class="token string">&#39;react-noop-renderer&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// react-noop-renderer 包的路径</span>
<span class="token keyword">const</span> pkgPath <span class="token operator">=</span> <span class="token function">resolvePkgPath</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// react-noop-renderer 包的产物路径</span>
<span class="token keyword">const</span> pkgDistPath <span class="token operator">=</span> <span class="token function">resolvePkgPath</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
	<span class="token comment">// react-noop-renderer</span>
	<span class="token punctuation">{</span>
		<span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkgPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>module<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
		<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkgDistPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ReactNoopRenderer&#39;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>peerDependencies<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;scheduler&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token operator">...</span><span class="token function">getBaseRollupPlugins</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">typescript</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./packages/react-dom/**/*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token literal-property property">tsconfigOverride</span><span class="token operator">:</span> <span class="token punctuation">{</span>
						<span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
							<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
								<span class="token literal-property property">hostConfig</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/hostConfig.ts</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span>
							<span class="token punctuation">}</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token comment">// webpack resolve alias</span>
			<span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">entries</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">hostConfig</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkgPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/hostConfig.ts</span><span class="token template-punctuation string">\`</span></span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token function">generatePackageJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">inputFolder</span><span class="token operator">:</span> pkgPath<span class="token punctuation">,</span>
				<span class="token literal-property property">outputFolder</span><span class="token operator">:</span> pkgDistPath<span class="token punctuation">,</span>
				<span class="token function-variable function">baseContents</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> description<span class="token punctuation">,</span> version <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
					name<span class="token punctuation">,</span>
					description<span class="token punctuation">,</span>
					version<span class="token punctuation">,</span>
					<span class="token literal-property property">peerDependencies</span><span class="token operator">:</span> <span class="token punctuation">{</span>
						<span class="token literal-property property">react</span><span class="token operator">:</span> version
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;index.js&#39;</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>并在 <code>dev.config.js</code> 中加入 <code>reactNoopRendererConfig</code>，统一打包：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> reactConfig <span class="token keyword">from</span> <span class="token string">&#39;./react.config&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> reactDomConfig <span class="token keyword">from</span> <span class="token string">&#39;./react-dom.config&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> reactNoopRendererConfig <span class="token keyword">from</span> <span class="token string">&#39;./react-noop-renderer.config&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>reactConfig<span class="token punctuation">,</span> <span class="token operator">...</span>reactDomConfig<span class="token punctuation">,</span> <span class="token operator">...</span>reactNoopRendererConfig<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在运行 <code>pnpm build-dev</code> 就可以在 <code>dist</code> 文件中看到打包出来的 <code>react-noop-renderer</code>。</p><h2 id="_3-测试-useeffect" tabindex="-1"><a class="header-anchor" href="#_3-测试-useeffect" aria-hidden="true">#</a> 3. 测试 useEffect</h2><p>为了完善 Reconciler 的测试环境，支持异步操作和并发情况的测试，我们先安装一个并发的测试上下文环境：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm i -D -w jest-react
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再安装 matchers，在 <code>scripts/jest/</code> 文件夹中新增以下三个文件：</p><ul><li><code>reactTestMatchers.js</code> 文件：</li></ul><details class="hint-container details"><summary>详情</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> JestReact <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jest-react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> SchedulerMatchers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./schedulerTestMatchers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Trick to use a Jest matcher inside another Jest matcher. \`fn\` contains an</span>
	<span class="token comment">// assertion; if it throws, we capture the error and return it, so the stack</span>
	<span class="token comment">// trace presented to the user points to the original assertion in the</span>
	<span class="token comment">// test file.</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			<span class="token function-variable function">message</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> error<span class="token punctuation">.</span>message
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span><span class="token parameter">Scheduler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>actualYields<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
			<span class="token string">&#39;Log of yielded values is not empty. &#39;</span> <span class="token operator">+</span>
				<span class="token string">&#39;Call expect(Scheduler).toHaveYielded(...) first.&#39;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toMatchRenderedOutput</span><span class="token punctuation">(</span><span class="token parameter">ReactNoop<span class="token punctuation">,</span> expectedJSX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ReactNoop<span class="token punctuation">.</span>getChildrenAsJSX <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> Scheduler <span class="token operator">=</span> ReactNoop<span class="token punctuation">.</span>_Scheduler<span class="token punctuation">;</span>
		<span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">expect</span><span class="token punctuation">(</span>ReactNoop<span class="token punctuation">.</span><span class="token function">getChildrenAsJSX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expectedJSX<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> JestReact<span class="token punctuation">.</span><span class="token function">unstable_toMatchRenderedOutput</span><span class="token punctuation">(</span>ReactNoop<span class="token punctuation">,</span> expectedJSX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>SchedulerMatchers<span class="token punctuation">,</span>
	toMatchRenderedOutput
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><code>schedulerTestMatchers.js</code> 文件：</li></ul><details class="hint-container details"><summary>详情</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Trick to use a Jest matcher inside another Jest matcher. \`fn\` contains an</span>
	<span class="token comment">// assertion; if it throws, we capture the error and return it, so the stack</span>
	<span class="token comment">// trace presented to the user points to the original assertion in the</span>
	<span class="token comment">// test file.</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			<span class="token function-variable function">message</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> error<span class="token punctuation">.</span>message
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span><span class="token parameter">Scheduler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>actualYields<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
			<span class="token string">&#39;Log of yielded values is not empty. &#39;</span> <span class="token operator">+</span>
				<span class="token string">&#39;Call expect(Scheduler).toHaveYielded(...) first.&#39;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toFlushAndYield</span><span class="token punctuation">(</span><span class="token parameter">Scheduler<span class="token punctuation">,</span> expectedYields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Scheduler<span class="token punctuation">.</span><span class="token function">unstable_flushAllWithoutAsserting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>actualYields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expectedYields<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toFlushAndYieldThrough</span><span class="token punctuation">(</span><span class="token parameter">Scheduler<span class="token punctuation">,</span> expectedYields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Scheduler<span class="token punctuation">.</span><span class="token function">unstable_flushNumberOfYields</span><span class="token punctuation">(</span>expectedYields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>actualYields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expectedYields<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toFlushUntilNextPaint</span><span class="token punctuation">(</span><span class="token parameter">Scheduler<span class="token punctuation">,</span> expectedYields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Scheduler<span class="token punctuation">.</span><span class="token function">unstable_flushUntilNextPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>actualYields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expectedYields<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toFlushWithoutYielding</span><span class="token punctuation">(</span><span class="token parameter">Scheduler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">toFlushAndYield</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toFlushExpired</span><span class="token punctuation">(</span><span class="token parameter">Scheduler<span class="token punctuation">,</span> expectedYields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Scheduler<span class="token punctuation">.</span><span class="token function">unstable_flushExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>actualYields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expectedYields<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toHaveYielded</span><span class="token punctuation">(</span><span class="token parameter">Scheduler<span class="token punctuation">,</span> expectedYields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> actualYields <span class="token operator">=</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_clearYields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>actualYields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expectedYields<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toFlushAndThrow</span><span class="token punctuation">(</span><span class="token parameter">Scheduler<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">assertYieldsWereCleared</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">captureAssertion</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			Scheduler<span class="token punctuation">.</span><span class="token function">unstable_flushAllWithoutAsserting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	toFlushAndYield<span class="token punctuation">,</span>
	toFlushAndYieldThrough<span class="token punctuation">,</span>
	toFlushUntilNextPaint<span class="token punctuation">,</span>
	toFlushWithoutYielding<span class="token punctuation">,</span>
	toFlushExpired<span class="token punctuation">,</span>
	toHaveYielded<span class="token punctuation">,</span>
	toFlushAndThrow
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><code>setupJest.js</code> 文件：</li></ul><details class="hint-container details"><summary>详情</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>expect<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./reactTestMatchers&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>再修改一下 jest 的配置文件 <code>jest.config.js</code>，新增以下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> defaults <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jest-config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;^scheduler$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/node_modules/scheduler/unstable_mock.js&#39;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">fakeTimers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">enableGlobally</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token literal-property property">legacyFakeTimers</span><span class="token operator">:</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">setupFilesAfterEnv</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./scripts/jest/setupJest.js&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就可以运行测试用例了，在 <code>react-reconciler</code> 包中新增 <code>__tests__</code> 文件夹，用来放测试用例，然后新增测试用例 <code>ReactEffectOrdering-test.js</code>：</p><details class="hint-container details"><summary>详情</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * <span class="token keyword">@emails</span> react-core
 * <span class="token keyword">@jest-environment</span> node
 */</span>

<span class="token comment">/* eslint-disable no-func-assign */</span>

<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> React<span class="token punctuation">;</span>
<span class="token keyword">let</span> ReactNoop<span class="token punctuation">;</span>
<span class="token keyword">let</span> Scheduler<span class="token punctuation">;</span>
<span class="token keyword">let</span> act<span class="token punctuation">;</span>
<span class="token keyword">let</span> useEffect<span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;ReactHooksWithNoopRenderer&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		jest<span class="token punctuation">.</span><span class="token function">resetModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		act <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jest-react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>act<span class="token punctuation">;</span>
		Scheduler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;scheduler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		ReactNoop <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-noop-renderer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		useEffect <span class="token operator">=</span> React<span class="token punctuation">.</span>useEffect<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;passive unmounts on deletion are fired in parent -&gt; child order&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> root <span class="token operator">=</span> ReactNoop<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_yieldValue</span><span class="token punctuation">(</span><span class="token string">&#39;Unmount parent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Scheduler<span class="token punctuation">.</span><span class="token function">unstable_yieldValue</span><span class="token punctuation">(</span><span class="token string">&#39;Unmount child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token string">&#39;Child&#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">await</span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">expect</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchRenderedOutput</span><span class="token punctuation">(</span><span class="token string">&#39;Child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">await</span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>Scheduler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveYielded</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Unmount parent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Unmount child&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>现在执行 <code>pnpm test</code> 就可以对 <code>useEffect</code> 进行测试了。</p>`,21),S=n("code",null,"git tag v1.16",-1),R={href:"https://github.com/2xiao/my-react/tree/v1.16",target:"_blank",rel:"noopener noreferrer"};function T(Y,E){const o=c("ExternalLinkIcon"),i=c("CodeTabs");return r(),k("div",null,[v,n("div",m,[b,y,n("p",null,[s("相关代码可在 "),n("a",f,[h,e(o)]),s(" 查看")])]),g,e(i,{id:"189",data:[{id:"jsx"},{id:"getChildren()"},{id:"getChildrenAsJSX()"}]},{title0:a(({value:t,isActive:p})=>[s("jsx")]),title1:a(({value:t,isActive:p})=>[s("getChildren()")]),title2:a(({value:t,isActive:p})=>[s("getChildrenAsJSX()")]),tab0:a(({value:t,isActive:p})=>[w]),tab1:a(({value:t,isActive:p})=>[x]),tab2:a(({value:t,isActive:p})=>[_]),_:1},8,["data"]),C,n("p",null,[s("相关代码可在 "),S,s(" 查看，地址："),n("a",R,[s("https://github.com/2xiao/my-react/tree/v1.16"),e(o)])])])}const A=u(d,[["render",T],["__file","16.html.vue"]]);export{A as default};
