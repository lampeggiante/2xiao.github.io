import{_ as i,r as d,o as c,c as r,a as e,b as t,d as n,w as o,f as p,e as u}from"./app-mvY9N9Pc.js";const h={},_={id:"_237-删除链表中的节点",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#_237-删除链表中的节点","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/delete-node-in-a-linked-list",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"链表",-1),k={href:"https://leetcode.com/problems/delete-node-in-a-linked-list",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There is a singly-linked list <code>head</code> and we want to delete a node <code>node</code> in it.</p><p>You are given the node to be deleted <code>node</code>. You will <strong>not be given access</strong> to the first node of <code>head</code>.</p><p>All the values of the linked list are <strong>unique</strong> , and it is guaranteed that the given node <code>node</code> is not the last node in the linked list.</p><p>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</p><ul><li>The value of the given node should not exist in the linked list.</li><li>The number of nodes in the linked list should decrease by one.</li><li>All the values before <code>node</code> should be in the same order.</li><li>All the values after <code>node</code> should be in the same order.</li></ul><p><strong>Custom testing:</strong></p><ul><li>For the input, you should provide the entire linked list <code>head</code> and the node to be given <code>node</code>. <code>node</code> should not be the last node of the list and should be an actual node in the list.</li><li>We will build the linked list and pass the node to your function.</li><li>The output will be the entire list after calling your function.</li></ul><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/01/node1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [4,5,1,9], node = 5</p><p>Output: [4,1,9]</p><p>Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/01/node2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [4,5,1,9], node = 1</p><p>Output: [4,5,9]</p><p>Explanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li><li>The value of each node in the list is <strong>unique</strong>.</li><li>The <code>node</code> to be deleted is <strong>in the list</strong> and is <strong>not a tail</strong> node.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>有一个单链表的 <code>head</code>，我们想删除它其中的一个节点 <code>node</code>。</p><p>给你一个需要删除的节点 <code>node</code> 。你将 <strong>无法访问</strong> 第一个节点 <code>head</code>。</p><p>链表的所有值都是 <strong>唯一的</strong>，并且保证给定的节点 <code>node</code> 不是链表中的最后一个节点。</p><p>删除给定的节点。注意，删除节点并不是指从内存中删除它。这里的意思是：</p><ul><li>给定节点的值不应该存在于链表中。</li><li>链表中的节点数应该减少 <code>1</code>。</li><li><code>node</code> 前面的所有值顺序相同。</li><li><code>node</code> 后面的所有值顺序相同。</li></ul><p>自定义测试：</p><ul><li>对于输入，你应该提供整个链表 <code>head</code> 和要给出的节点 <code>node</code>。<code>node</code> 不应该是链表的最后一个节点，而应该是链表中的一个实际节点。</li><li>我们将构建链表，并将节点传递给你的函数。</li></ul><p>输出将是调用你函数后的整个链表。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>其实就是把后面的结点都覆盖上来即可，当前结点的值等于下一个结点，Next 指针指向下下个结点。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">node</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify node in-place instead.
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">deleteNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
  node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),x=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),y=e("td",{style:{"text-align":"center"}},"203",-1),w={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/remove-linked-list-elements",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},T={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0203",target:"_blank",rel:"noopener noreferrer"},j={style:{"text-align":"left"}},q=e("code",null,"递归",-1),C=e("code",null,"链表",-1),L={style:{"text-align":"left"}},V=e("td",{style:{"text-align":"center"}},"2487",-1),I={style:{"text-align":"left"}},Y={href:"https://leetcode.com/problems/remove-nodes-from-linked-list",target:"_blank",rel:"noopener noreferrer"},A=e("td",{style:{"text-align":"center"}},null,-1),B={style:{"text-align":"left"}},M=e("code",null,"栈",-1),z=e("code",null,"递归",-1),D=e("code",null,"链表",-1),O=e("code",null,"1+",-1),R={style:{"text-align":"left"}},W=e("td",{style:{"text-align":"center"}},"3217",-1),F={style:{"text-align":"left"}},S={href:"https://leetcode.com/problems/delete-nodes-from-linked-list-present-in-array",target:"_blank",rel:"noopener noreferrer"},G=e("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},J=e("code",null,"数组",-1),K=e("code",null,"哈希表",-1),P=e("code",null,"链表",-1),Q={style:{"text-align":"left"}};function U(X,Z){const s=d("ExternalLinkIcon"),a=d("font"),l=d("RouterLink");return c(),r("div",null,[e("h1",_,[g,t(),e("a",f,[t("237. 删除链表中的节点"),n(s)])]),e("p",null,[t("🟠 "),n(a,{color:"#ffb800"},{default:o(()=>[t("Medium")]),_:1}),t("  🔖  "),n(l,{to:"/leetcode/outline/tag/linked-list.html"},{default:o(()=>[m]),_:1}),t("  🔗 "),e("a",k,[b,n(s)])]),v,p(" prettier-ignore "),e("table",null,[x,e("tbody",null,[e("tr",null,[y,e("td",w,[e("a",N,[t("移除链表元素"),n(s)])]),e("td",E,[e("a",T,[t("[✓]"),n(s)])]),e("td",j,[n(l,{to:"/leetcode/outline/tag/recursion.html"},{default:o(()=>[q]),_:1}),t(),n(l,{to:"/leetcode/outline/tag/linked-list.html"},{default:o(()=>[C]),_:1})]),e("td",L,[n(a,{color:"#15bd66"},{default:o(()=>[t("Easy")]),_:1})])]),e("tr",null,[V,e("td",I,[e("a",Y,[t("从链表中移除节点"),n(s)])]),A,e("td",B,[n(l,{to:"/leetcode/outline/tag/stack.html"},{default:o(()=>[M]),_:1}),t(),n(l,{to:"/leetcode/outline/tag/recursion.html"},{default:o(()=>[z]),_:1}),t(),n(l,{to:"/leetcode/outline/tag/linked-list.html"},{default:o(()=>[D]),_:1}),t(),O]),e("td",R,[n(a,{color:"#ffb800"},{default:o(()=>[t("Medium")]),_:1})])]),e("tr",null,[W,e("td",F,[e("a",S,[t("从链表中移除在数组中存在的节点"),n(s)])]),G,e("td",H,[n(l,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[J]),_:1}),t(),n(l,{to:"/leetcode/outline/tag/hash-table.html"},{default:o(()=>[K]),_:1}),t(),n(l,{to:"/leetcode/outline/tag/linked-list.html"},{default:o(()=>[P]),_:1})]),e("td",Q,[n(a,{color:"#ffb800"},{default:o(()=>[t("Medium")]),_:1})])])])])])}const ee=i(h,[["render",U],["__file","0237.html.vue"]]);export{ee as default};
