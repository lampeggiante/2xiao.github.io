import{_ as p,r as c,o as i,c as u,a as n,b as s,d as t,w as a,f as r,e as d}from"./app-GnK0vSxb.js";const k={},m={id:"_46-全排列",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_46-全排列","aria-hidden":"true"},"#",-1),h={href:"https://leetcode.com/problems/permutations",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"数组",-1),f=n("code",null,"回溯",-1),v={href:"https://leetcode.com/problems/permutations",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3]</p><p>Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1]</p><p>Output: [[0,1],[1,0]]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1]</p><p>Output: [[1]]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li>All the integers of <code>nums</code> are <strong>unique</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。<code>nums</code> 中的所有整数 <strong>互不相同</strong>。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这是一个经典的回溯问题，可以通过深度优先搜索（DFS）来解决。</p><ol><li>使用一个数组 <code>used</code> 来标记数字是否已经被使用过，确保每个数字在排列中只使用一次，初始时都为 <code>false</code>。</li><li>定义一个 <code>backtrack</code> 函数，用于搜索所有可能的排列。在函数中进行如下操作： <ul><li>如果当前排列的长度等于输入序列的长度，说明已经得到一个完整的排列，将其添加到结果数组中。</li><li>否则，遍历输入序列的每个数字，如果当前数字没有被使用过，就将其加入当前排列中，并标记为已使用。</li><li>然后递归调用 <code>backtrack</code> 函数，继续搜索下一个位置的数字。</li><li>在递归完成后，需要回溯，即将当前数字从排列中移除，并标记为未使用，使其可以在其他位置被使用。</li></ul></li><li>最后返回结果数组。</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">track</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>track<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 做选择</span>
			track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

			<span class="token comment">// 递归</span>
			<span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 撤销选择，回溯</span>
			track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),w=n("td",{style:{"text-align":"center"}},"31",-1),q={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=n("code",null,"数组",-1),N=n("code",null,"双指针",-1),V={style:{"text-align":"left"}},M=n("td",{style:{"text-align":"center"}},"47",-1),j={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/permutations-ii",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},A={style:{"text-align":"left"}},R=n("code",null,"数组",-1),S=n("code",null,"回溯",-1),D={style:{"text-align":"left"}},F=n("td",{style:{"text-align":"center"}},"60",-1),G={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},z=n("code",null,"递归",-1),J=n("code",null,"数学",-1),K={style:{"text-align":"left"}},P=n("td",{style:{"text-align":"center"}},"77",-1),Q={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/combinations",target:"_blank",rel:"noopener noreferrer"},W={style:{"text-align":"center"}},X={style:{"text-align":"left"}},Z=n("code",null,"回溯",-1),$={style:{"text-align":"left"}};function nn(tn,sn){const o=c("ExternalLinkIcon"),l=c("font"),e=c("RouterLink");return i(),u("div",null,[n("h1",m,[_,s(),n("a",h,[s("46. 全排列"),t(o)])]),n("p",null,[s("🟠 "),t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[b]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/backtracking.html"},{default:a(()=>[f]),_:1}),s("  🔗 "),n("a",v,[g,t(o)])]),y,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,n("td",q,[n("a",I,[s("下一个排列"),t(o)])]),n("td",E,[t(e,{to:"/leetcode/problem/0031.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",C,[t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[L]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/two-pointers.html"},{default:a(()=>[N]),_:1})]),n("td",V,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[M,n("td",j,[n("a",B,[s("全排列 II"),t(o)])]),n("td",O,[t(e,{to:"/leetcode/problem/0047.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",A,[t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[R]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/backtracking.html"},{default:a(()=>[S]),_:1})]),n("td",D,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[F,n("td",G,[n("a",H,[s("排列序列"),t(o)])]),T,n("td",Y,[t(e,{to:"/leetcode/outline/tag/recursion.html"},{default:a(()=>[z]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/math.html"},{default:a(()=>[J]),_:1})]),n("td",K,[t(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})])]),n("tr",null,[P,n("td",Q,[n("a",U,[s("组合"),t(o)])]),n("td",W,[t(e,{to:"/leetcode/problem/0077.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",X,[t(e,{to:"/leetcode/outline/tag/backtracking.html"},{default:a(()=>[Z]),_:1})]),n("td",$,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])])])])])}const en=p(k,[["render",nn],["__file","0046.html.vue"]]);export{en as default};
