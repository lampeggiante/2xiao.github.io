import{_ as c,r as p,o as i,c as r,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-mvY9N9Pc.js";const k={},h={id:"_83-删除排序链表中的重复元素",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_83-删除排序链表中的重复元素","aria-hidden":"true"},"#",-1),_={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"链表",-1),f={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),g=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [1,1,2]</p><p>Output: [1,2]</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [1,1,2,3,3]</p><p>Output: [1,2,3]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>删除链表中重复的结点，以保障每个结点只出现一次。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>按照题意做即可。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">deleteDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> prev <span class="token operator">=</span> res<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 删除和 prev.next 重复的节点</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>
				prev<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span>
				prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span>
				prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val
			<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,17),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),y=n("td",{style:{"text-align":"center"}},"82",-1),w={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},j={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0082",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"left"}},I=n("code",null,"链表",-1),C=n("code",null,"双指针",-1),V={style:{"text-align":"left"}},q=n("td",{style:{"text-align":"center"}},"1836",-1),B={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/remove-duplicates-from-an-unsorted-linked-list",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"center"}},null,-1),z={style:{"text-align":"left"}},M=n("code",null,"哈希表",-1),O=n("code",null,"链表",-1),D={style:{"text-align":"left"}};function G(S,A){const a=p("ExternalLinkIcon"),l=p("font"),o=p("RouterLink");return i(),r("div",null,[n("h1",h,[m,t(),n("a",_,[t("83. 删除排序链表中的重复元素"),e(a)])]),n("p",null,[t("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),e(o,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[v]),_:1}),t("  🔗 "),n("a",f,[b,e(a)])]),g,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[y,n("td",w,[n("a",N,[t("删除排序链表中的重复元素 II"),e(a)])]),n("td",L,[n("a",j,[t("[✓]"),e(a)])]),n("td",E,[e(o,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[I]),_:1}),t(),e(o,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[C]),_:1})]),n("td",V,[e(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])]),n("tr",null,[q,n("td",B,[n("a",R,[t("从未排序的链表中移除重复元素"),e(a)])]),T,n("td",z,[e(o,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[M]),_:1}),t(),e(o,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[O]),_:1})]),n("td",D,[e(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])])])])])}const H=c(k,[["render",G],["__file","0083.html.vue"]]);export{H as default};
