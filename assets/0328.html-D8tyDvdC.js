import{_ as i,r as o,o as c,c as d,a as n,b as e,d as s,w as t,f as r,e as u}from"./app-mvY9N9Pc.js";const k={},h={id:"_328-奇偶链表",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#_328-奇偶链表","aria-hidden":"true"},"#",-1),v={href:"https://leetcode.com/problems/odd-even-linked-list",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"链表",-1),_={href:"https://leetcode.com/problems/odd-even-linked-list",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),b=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>head</code> of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return <em>the reordered list</em>.</p><p>The <strong>first</strong> node is considered <strong>odd</strong> , and the <strong>second</strong> node is <strong>even</strong> , and so on.</p><p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p><p>You must solve the problem in <code>O(1)</code> extra space complexity and <code>O(n)</code> time complexity.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [1,2,3,4,5]</p><p>Output: [1,3,5,2,4]</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [2,1,3,5,6,4,7]</p><p>Output: [2,3,6,7,1,5,4]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the linked list is in the range <code>[0, 10^4]</code>.</li><li><code>-10^6 &lt;= Node.val &lt;= 10^6</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>把所有奇数节点拼接在一起，然后再拼接上所有偶数节点。</p><p>请原地（in-place）实现，要求空间复杂度 O(1)，时间复杂度 O(n)。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>遍历链表，用两个指针 <code>odd</code> 和 <code>even</code> 分别指向奇数节点和偶数节点</li><li>不断地将 <code>even.next</code> 插入到 <code>odd</code> 的后面</li><li>eg: <ul><li><strong>1</strong>-&gt;<strong>2</strong>-&gt;3-&gt;4-&gt;5-&gt;6</li><li>1-&gt;<strong>3</strong>-&gt;2-&gt;<strong>4</strong>-&gt;5-&gt;6</li><li>1-&gt;3-&gt;<strong>5</strong>-&gt;2-&gt;4-&gt;<strong>6</strong></li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">oddEvenList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> odd <span class="token operator">=</span> head<span class="token punctuation">;</span>
	<span class="token keyword">let</span> even <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>even <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> even_next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token keyword">let</span> odd_next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		even<span class="token punctuation">.</span>next <span class="token operator">=</span> even_next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		even_next<span class="token punctuation">.</span>next <span class="token operator">=</span> odd_next<span class="token punctuation">;</span>
		odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even_next<span class="token punctuation">;</span>
		odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		even <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),y=n("td",{style:{"text-align":"center"}},"725",-1),w={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/split-linked-list-in-parts",target:"_blank",rel:"noopener noreferrer"},L=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},O=n("code",null,"链表",-1),j={style:{"text-align":"left"}};function C(V,q){const a=o("ExternalLinkIcon"),l=o("font"),p=o("RouterLink");return c(),d("div",null,[n("h1",h,[g,e(),n("a",v,[e("328. 奇偶链表"),s(a)])]),n("p",null,[e("🟠 "),s(l,{color:"#ffb800"},{default:t(()=>[e("Medium")]),_:1}),e("  🔖  "),s(p,{to:"/leetcode/outline/tag/linked-list.html"},{default:t(()=>[m]),_:1}),e("  🔗 "),n("a",_,[f,s(a)])]),b,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[y,n("td",w,[n("a",N,[e("分隔链表"),s(a)])]),L,n("td",E,[s(p,{to:"/leetcode/outline/tag/linked-list.html"},{default:t(()=>[O]),_:1})]),n("td",j,[s(l,{color:"#ffb800"},{default:t(()=>[e("Medium")]),_:1})])])])])])}const B=i(k,[["render",C],["__file","0328.html.vue"]]);export{B as default};
