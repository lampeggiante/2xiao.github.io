import{_ as d,r as c,o as i,c as p,a as t,b as n,d as e,w as s,f as r,e as u}from"./app-GnK0vSxb.js";const _={},h={id:"_70-爬楼梯",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_70-爬楼梯","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"记忆化搜索",-1),k=t("code",null,"数学",-1),y=t("code",null,"动态规划",-1),b={href:"https://leetcode.com/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p><p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 2</p><p>Output: 2</p><p>Explanation: There are two ways to climb to the top.</p><ol><li><p>1 step + 1 step</p></li><li><p>2 steps</p></li></ol></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 3</p><p>Output: 3</p><p>Explanation: There are three ways to climb to the top.</p><ol><li><p>1 step + 1 step + 1 step</p></li><li><p>1 step + 2 steps</p></li><li><p>2 steps + 1 step</p></li></ol></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这是一个经典的动态规划问题，通常被称为「爬楼梯问题」。假设你要爬上第 n 阶楼梯，你可以从第 n-1 阶爬一步上来，也可以从第 n-2 阶爬两步上来，因此到达第 n 阶楼梯的方法数等于到达第 n-1 阶和第 n-2 阶的方法数之和。这样，我们可以得到以下的递推关系：</p><p><code>dp(n) = dp(n - 1) + dp(n - 2)</code></p><p>其中，<code>dp(n)</code> 表示到达第 n 阶楼梯的方法数。</p><p>接下来，我们需要初始化边界条件。当 <code>n = 1</code> 时，只有一种方法爬到楼顶；当 <code>n = 2</code> 时，有两种方法爬到楼顶（一步一步或直接两步）。因此，我们可以初始化 <code>dp(1) = 1</code> 和 <code>dp(2) = 2</code>。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是到达楼顶的台阶数量。虽然使用了递归，但通过使用哈希表 <code>map</code> 存储已经计算过的结果，确保每个状态只计算一次。因此，最多会计算 <code>n</code> 次，整体时间复杂度为 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，主要的空间消耗来自于哈希表 <code>map</code>，其存储了从 <code>1</code> 到 <code>n</code> 的所有计算结果。此外，递归调用栈的深度也可能达到 <code>O(n)</code>，但主要的空间复杂度来源于 <code>map</code>。因此，整体空间复杂度为 <code>O(n)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token function">helper</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">helper</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),E=t("td",{style:{"text-align":"center"}},"509",-1),I={style:{"text-align":"left"}},M={href:"https://leetcode.com/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},N={style:{"text-align":"left"}},C=t("code",null,"递归",-1),L=t("code",null,"记忆化搜索",-1),V=t("code",null,"数学",-1),j=t("code",null,"1+",-1),q={style:{"text-align":"left"}},z=t("td",{style:{"text-align":"center"}},"746",-1),B={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/min-cost-climbing-stairs",target:"_blank",rel:"noopener noreferrer"},R=t("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},H=t("code",null,"数组",-1),K=t("code",null,"动态规划",-1),Y={style:{"text-align":"left"}},A=t("td",{style:{"text-align":"center"}},"1137",-1),D={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/n-th-tribonacci-number",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"center"}},J={style:{"text-align":"left"}},P=t("code",null,"记忆化搜索",-1),Q=t("code",null,"数学",-1),U=t("code",null,"动态规划",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"2244",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks",target:"_blank",rel:"noopener noreferrer"},tt=t("td",{style:{"text-align":"center"}},null,-1),et={style:{"text-align":"left"}},nt=t("code",null,"贪心",-1),st=t("code",null,"数组",-1),ot=t("code",null,"哈希表",-1),at=t("code",null,"1+",-1),lt={style:{"text-align":"left"}},ct=t("td",{style:{"text-align":"center"}},"2320",-1),dt={style:{"text-align":"left"}},it={href:"https://leetcode.com/problems/count-number-of-ways-to-place-houses",target:"_blank",rel:"noopener noreferrer"},pt=t("td",{style:{"text-align":"center"}},null,-1),rt={style:{"text-align":"left"}},ut=t("code",null,"动态规划",-1),_t={style:{"text-align":"left"}},ht=t("td",{style:{"text-align":"center"}},"2400",-1),mt={style:{"text-align":"left"}},ft={href:"https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},null,-1),kt={style:{"text-align":"left"}},yt=t("code",null,"数学",-1),bt=t("code",null,"动态规划",-1),xt=t("code",null,"组合数学",-1),vt={style:{"text-align":"left"}},wt=t("td",{style:{"text-align":"center"}},"2466",-1),Et={style:{"text-align":"left"}},It={href:"https://leetcode.com/problems/count-ways-to-build-good-strings",target:"_blank",rel:"noopener noreferrer"},Mt=t("td",{style:{"text-align":"center"}},null,-1),Ot={style:{"text-align":"left"}},Nt=t("code",null,"动态规划",-1),Ct={style:{"text-align":"left"}},Lt=t("td",{style:{"text-align":"center"}},"2498",-1),Vt={style:{"text-align":"left"}},jt={href:"https://leetcode.com/problems/frog-jump-ii",target:"_blank",rel:"noopener noreferrer"},qt=t("td",{style:{"text-align":"center"}},null,-1),zt={style:{"text-align":"left"}},Bt=t("code",null,"贪心",-1),Tt=t("code",null,"数组",-1),Rt=t("code",null,"二分查找",-1),St={style:{"text-align":"left"}},Ht=t("td",{style:{"text-align":"center"}},"3154",-1),Kt={style:{"text-align":"left"}},Yt={href:"https://leetcode.com/problems/find-number-of-ways-to-reach-the-k-th-stair",target:"_blank",rel:"noopener noreferrer"},At=t("td",{style:{"text-align":"center"}},null,-1),Dt={style:{"text-align":"left"}},Ft=t("code",null,"位运算",-1),Gt=t("code",null,"记忆化搜索",-1),Jt=t("code",null,"数学",-1),Pt=t("code",null,"2+",-1),Qt={style:{"text-align":"left"}},Ut=t("td",{style:{"text-align":"center"}},"3183",-1),Wt={style:{"text-align":"left"}},Xt={href:"https://leetcode.com/problems/the-number-of-ways-to-make-the-sum",target:"_blank",rel:"noopener noreferrer"},Zt=t("td",{style:{"text-align":"center"}},null,-1),$t={style:{"text-align":"left"}},te=t("code",null,"数组",-1),ee=t("code",null,"动态规划",-1),ne={style:{"text-align":"left"}};function se(oe,ae){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink");return i(),p("div",null,[t("h1",h,[m,n(),t("a",f,[n("70. 爬楼梯"),e(a)])]),t("p",null,[n("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(o,{to:"/leetcode/outline/tag/memoization.html"},{default:s(()=>[g]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[k]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[y]),_:1}),n("  🔗 "),t("a",b,[x,e(a)])]),v,r(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[E,t("td",I,[t("a",M,[n("斐波那契数"),e(a)])]),t("td",O,[e(o,{to:"/leetcode/problem/0509.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",N,[e(o,{to:"/leetcode/outline/tag/recursion.html"},{default:s(()=>[C]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/memoization.html"},{default:s(()=>[L]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[V]),_:1}),n(),j]),t("td",q,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[z,t("td",B,[t("a",T,[n("使用最小花费爬楼梯"),e(a)])]),R,t("td",S,[e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[H]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[K]),_:1})]),t("td",Y,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[A,t("td",D,[t("a",F,[n("第 N 个泰波那契数"),e(a)])]),t("td",G,[e(o,{to:"/leetcode/problem/1137.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",J,[e(o,{to:"/leetcode/outline/tag/memoization.html"},{default:s(()=>[P]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[Q]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[U]),_:1})]),t("td",W,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[X,t("td",Z,[t("a",$,[n("完成所有任务需要的最少轮数"),e(a)])]),tt,t("td",et,[e(o,{to:"/leetcode/outline/tag/greedy.html"},{default:s(()=>[nt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[st]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[ot]),_:1}),n(),at]),t("td",lt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[ct,t("td",dt,[t("a",it,[n("统计放置房子的方式数"),e(a)])]),pt,t("td",rt,[e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[ut]),_:1})]),t("td",_t,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[ht,t("td",mt,[t("a",ft,[n("恰好移动 k 步到达某一位置的方法数目"),e(a)])]),gt,t("td",kt,[e(o,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[yt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[bt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/combinatorics.html"},{default:s(()=>[xt]),_:1})]),t("td",vt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[wt,t("td",Et,[t("a",It,[n("统计构造好字符串的方案数"),e(a)])]),Mt,t("td",Ot,[e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[Nt]),_:1})]),t("td",Ct,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Lt,t("td",Vt,[t("a",jt,[n("青蛙过河 II"),e(a)])]),qt,t("td",zt,[e(o,{to:"/leetcode/outline/tag/greedy.html"},{default:s(()=>[Bt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Tt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/binary-search.html"},{default:s(()=>[Rt]),_:1})]),t("td",St,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Ht,t("td",Kt,[t("a",Yt,[n("到达第 K 级台阶的方案数"),e(a)])]),At,t("td",Dt,[e(o,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[Ft]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/memoization.html"},{default:s(()=>[Gt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[Jt]),_:1}),n(),Pt]),t("td",Qt,[e(l,{color:"#ff334b"},{default:s(()=>[n("Hard")]),_:1})])]),t("tr",null,[Ut,t("td",Wt,[t("a",Xt,[n("达到总和的方法数量"),e(a)])]),Zt,t("td",$t,[e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[te]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[ee]),_:1})]),t("td",ne,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])])])])])}const ce=d(_,[["render",se],["__file","0070.html.vue"]]);export{ce as default};
