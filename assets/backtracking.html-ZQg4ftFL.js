import{_ as r,r as p,o as k,c as d,a as n,b as s,d as a,w as t,f as u,e as i}from"./app-5VBZs9Uu.js";const m="/assets/3-4-1-aoXYlJ0A.png",b="/assets/3-4-2-1a3Ncl48.png",v="/assets/3-4-3-nC2Raavi.png",h="/assets/3-4-4-P3JsmT7a.png",_="/assets/3-4-5-hgzDFCDs.png",f="/assets/3-4-6-FM4nadUB.png",g="/assets/3-4-7-PeETHjmU.png",y={},w=i(`<h1 id="_3-4-回溯算法" tabindex="-1"><a class="header-anchor" href="#_3-4-回溯算法" aria-hidden="true">#</a> 3.4 回溯算法</h1><h2 id="回溯的定义" tabindex="-1"><a class="header-anchor" href="#回溯的定义" aria-hidden="true">#</a> 回溯的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>回溯（Backtracking）</strong> 又称为试探法，是一种通过不断地尝试，搜索问题的解的算法。它是一种深度优先搜索的过程，通常通过递归实现。回溯算法主要用于解决组合问题、排列问题和搜索问题，其核心思想是穷尽所有可能性，找到满足条件的解。</p></div><p>通过尝试不同的可能性，逐步构建问题的解，当达到某个条件或无法继续扩展时，就进行回退，尝试其他的可能性。</p><p>回溯算法和我们常说的 DFS 算法非常类似，本质上就是一种暴力穷举算法。回溯算法和 DFS 算法的细微差别是：回溯算法是在遍历「树枝」，DFS 算法是在遍历「节点」。</p><h2 id="回溯的原理" tabindex="-1"><a class="header-anchor" href="#回溯的原理" aria-hidden="true">#</a> 回溯的原理</h2><p>抽象地说，解决一个回溯问题，实际上就是遍历一棵决策树的过程，树的每个叶子节点存放着一个合法答案。把整棵树遍历一遍，把叶子节点上的答案都收集起来，就能得到所有的合法答案。站在回溯树的一个节点上，只需要思考 3 个问题：</p><ol><li>路径：也就是已经做出的选择。</li><li>选择列表：也就是你当前可以做的选择。</li><li>结束条件：也就是到达决策树底层，无法再做选择的条件。</li></ol><p>代码方面，回溯算法的框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> track <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 路径</span>
<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">选择列表</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>满足结束条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做选择</span>
		track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>选择<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 递归调用</span>
		<span class="token function">backtrack</span><span class="token punctuation">(</span>选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 撤销选择</span>
		track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。</p>`,11),x={href:"https://leetcode.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},j=i('<div class="hint-container info"><p class="hint-container-title">题目大意</p><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。<code>nums</code> 中的所有整数 <strong>互不相同</strong>。</p></div><p>高中的时候做过排列组合的数学题， <code>n</code> 个不重复的数，全排列共有 <code>n!</code> 个。那么是怎么穷举全排列的呢？比方说给三个数 <code>[1,2,3]</code>，一般是这样：</p><p>先固定第一位为 <code>1</code>，然后第二位可以是 <code>2</code>，那么第三位只能是 <code>3</code>；然后可以把第二位变成 <code>3</code>，第三位就只能是 <code>2</code> 了；然后就只能变化第一位，变成 <code>2</code>，然后再穷举后两位……</p><p>其实这就是回溯算法，可以直接画出如下这棵回溯树：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>只要从根遍历这棵树，记录路径上的数字，其实就是所有的全排列。 <strong>不妨把这棵树称为回溯算法的「决策树」，因为你在每个节点上其实都在做决策。</strong> 比如说站在下图的红色节点上，就在做决策，可以选择 <code>1</code> 那条树枝，也可以选择 <code>3</code> 那条树枝。为啥只能在 <code>1</code> 和 <code>3</code> 之中选择呢？因为 <code>2</code> 这个树枝在身后，这个选择之前做过了，而全排列是不允许重复使用数字的。</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在可以解答上面的几个名词：<strong><code>[2]</code> 就是「路径」，记录已经做过的选择；<code>[1,3]</code> 就是「选择列表」，表示当前可以做出的选择；「结束条件」就是遍历到树的底层叶子节点，这里也就是选择列表为空的时候。定义的 <code>backtrack</code> 函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层叶子节点，其「路径」就是一个全排列。</strong></p><p>全排列的代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">track</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>track<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 做选择</span>
			track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

			<span class="token comment">// 递归</span>
			<span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 撤销选择，回溯</span>
			track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里稍微做了些变通，没有显式记录「选择列表」，而是通过 <code>used</code> 数组排除已经存在 <code>track</code> 中的元素，从而推导出当前的选择列表。</p><p>至此，我们就通过全排列问题详解了回溯算法的底层原理。</p><h2 id="回溯的框架套路" tabindex="-1"><a class="header-anchor" href="#回溯的框架套路" aria-hidden="true">#</a> 回溯的框架套路</h2><p>虽然排列、组合、子集系列问题是高中就学过的，但如果想编写算法解决它们，还是非常考验计算机思维的，下面就讲讲编程解决这几个问题的核心思路，以后再有什么变体，也能手到擒来，以不变应万变。</p><p>无论是排列、组合还是子集问题，简单说无非就是让你从序列 <code>nums</code> 中以给定规则取若干元素，主要有以下几种变体：</p><ul><li>变体一：元素无重不可复选 <ul><li>即 <code>nums</code> 中的元素都是唯一的，每个元素最多只能被使用一次，这也是最基本的情况。</li><li>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 <code>7</code> 的组合应该只有 <code>[7]</code>。</li></ul></li><li>变体二：元素可重不可复选 <ul><li>即 <code>nums</code> 中的元素可以存在重复，每个元素最多只能被使用一次。</li><li>以组合为例，如果输入 <code>nums = [2,5,2,1,2]</code>，和为 <code>7</code> 的组合应该有两种 <code>[2,2,2,1]</code> 和 <code>[5,2]</code>。</li></ul></li><li>变体三：元素无重可复选 <ul><li>即 <code>nums</code> 中的元素都是唯一的，每个元素可以被使用若干次。</li><li>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 <code>7</code> 的组合应该有两种 <code>[2,2,3]</code> 和 <code>[7]</code>。</li></ul></li></ul><p>当然，也可以说有第四种变体，即元素可重可复选。但既然元素可复选，那又何必存在重复元素呢？元素去重之后就等同于形式三，所以这种情况不用考虑。</p><p>上面用组合问题举的例子，但 <strong>排列</strong>、<strong>组合</strong>、<strong>子集</strong> 问题都可以有这三种基本形式，所以共有 <code>9</code> 种变化。</p><h3 id="元素无重不可复选-子集" tabindex="-1"><a class="header-anchor" href="#元素无重不可复选-子集" aria-hidden="true">#</a> 元素无重不可复选 - 子集</h3>`,19),S={id:"📌-78-子集-leetcode",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#📌-78-子集-leetcode","aria-hidden":"true"},"#",-1),C={href:"https://leetcode.com/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},L=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),M=n("p",null,[s("给你一个整数数组 "),n("code",null,"nums"),s(" ，数组中的元素 "),n("strong",null,"互不相同"),s(" 。返回该数组所有可能的子集（幂集）。")],-1),D=n("p",null,[s("解集 "),n("strong",null,"不能"),s(" 包含重复的子集。你可以按 "),n("strong",null,"任意顺序"),s(" 返回解集。")],-1),T=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),A=n("p",null,[s("比如输入 "),n("code",null,"nums = [1,2,3]"),s("，算法应该返回如下子集："),n("code",null,"[ [],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3] ]"),s("，过程如下：")],-1),E=n("ul",null,[n("li",null,[s("首先，生成元素个数为 "),n("code",null,"0"),s(" 的子集，即空集 "),n("code",null,"[]"),s("，为了方便表示，称之为 "),n("code",null,"S_0"),s(";")]),n("li",null,[s("然后，在 "),n("code",null,"S_0"),s(" 的基础上生成元素个数为 "),n("code",null,"1"),s(" 的所有子集: "),n("code",null,"[1], [2], [3]"),s("，称为 "),n("code",null,"S_1"),s(";")]),n("li",null,[s("接着，可以在 "),n("code",null,"S_1"),s(" 的基础上推导出 "),n("code",null,"S_2"),s("，即元素个数为 "),n("code",null,"2"),s(" 的所有子集："),n("code",null,"[1, 2], [1, 3], [2, 3]"),s("。 "),n("ul",null,[n("li",null,[s("因为集合中的元素不用考虑顺序，"),n("code",null,"[1,2,3]"),s(" 中 "),n("code",null,"2"),s(" 后面只有 "),n("code",null,"3"),s("，如果添加了前面的 "),n("code",null,"1"),s("，那么 "),n("code",null,"[2,1]"),s(" 会和之前已经生成的子集 "),n("code",null,"[1,2]"),s(" 重复。")]),n("li",null,"换句话说，通过保证元素之间的相对顺序不变来防止出现重复的子集。")])]),n("li",null,[s("接着，我们可以通过 "),n("code",null,"S_2"),s(" 推出 "),n("code",null,"S_3"),s("，实际上 "),n("code",null,"S_3"),s(" 中只有一个集合 "),n("code",null,"[1,2,3]"),s("，它是通过 "),n("code",null,"[1,2]"),s(" 推出的;")])],-1),N=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z=n("p",null,"所以如果想计算所有子集，只要遍历这棵多叉树，把所有节点的值收集起来就行了。代码如下：",-1),R=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),B=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"subsets"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 用于存储结果"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token comment"},"// 用于记录回溯路径"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 前序遍历位置，每个节点的值都是一个子集"),s(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// 回溯算法标准框架"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 做选择"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token comment"},"// 回溯遍历下一层节点"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token comment"},"// 撤销选择"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("p",null,[s("使用 "),n("code",null,"start"),s(" 参数控制树枝的生长避免产生重复的子集，用 "),n("code",null,"track"),s(" 记录根节点到每个节点的路径的值，同时在前序位置把每个节点的路径值收集起来，完成回溯树的遍历就收集了所有子集。")],-1),F=n("p",null,[n("code",null,"backtrack"),s(" 函数开头看似没有 base case，会不会进入无限递归？其实不会的，当 "),n("code",null,"start == nums.length"),s(" 时，叶子节点的值会被装入 "),n("code",null,"res"),s("，但 "),n("code",null,"for"),s(" 循环不会执行，也就结束了递归。")],-1),P=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [78. 子集 - LeetCode](https://leetcode.com/problems/subsets/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你一个整数数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),s(" ，数组中的元素 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"互不相同"),n("span",{class:"token punctuation"},"**")]),s(` 。返回该数组所有可能的子集（幂集）。

解集 `),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"不能"),n("span",{class:"token punctuation"},"**")]),s(" 包含重复的子集。你可以按 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"任意顺序"),n("span",{class:"token punctuation"},"**")]),s(` 返回解集。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

比如输入 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,3]`"),s("，算法应该返回如下子集："),n("span",{class:"token code-snippet code keyword"},"`[ [],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3] ]`"),s(`，过程如下：

`),n("span",{class:"token list punctuation"},"-"),s(" 首先，生成元素个数为 "),n("span",{class:"token code-snippet code keyword"},"`0`"),s(" 的子集，即空集 "),n("span",{class:"token code-snippet code keyword"},"`[]`"),s("，为了方便表示，称之为 "),n("span",{class:"token code-snippet code keyword"},"`S_0`"),s(`;
`),n("span",{class:"token list punctuation"},"-"),s(" 然后，在 "),n("span",{class:"token code-snippet code keyword"},"`S_0`"),s(" 的基础上生成元素个数为 "),n("span",{class:"token code-snippet code keyword"},"`1`"),s(" 的所有子集: "),n("span",{class:"token code-snippet code keyword"},"`[1], [2], [3]`"),s("，称为 "),n("span",{class:"token code-snippet code keyword"},"`S_1`"),s(`;
`),n("span",{class:"token list punctuation"},"-"),s(" 接着，可以在 "),n("span",{class:"token code-snippet code keyword"},"`S_1`"),s(" 的基础上推导出 "),n("span",{class:"token code-snippet code keyword"},"`S_2`"),s("，即元素个数为 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 的所有子集："),n("span",{class:"token code-snippet code keyword"},"`[1, 2], [1, 3], [2, 3]`"),s(`。
  `),n("span",{class:"token list punctuation"},"-"),s(" 因为集合中的元素不用考虑顺序，"),n("span",{class:"token code-snippet code keyword"},"`[1,2,3]`"),s(" 中 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 后面只有 "),n("span",{class:"token code-snippet code keyword"},"`3`"),s("，如果添加了前面的 "),n("span",{class:"token code-snippet code keyword"},"`1`"),s("，那么 "),n("span",{class:"token code-snippet code keyword"},"`[2,1]`"),s(" 会和之前已经生成的子集 "),n("span",{class:"token code-snippet code keyword"},"`[1,2]`"),s(` 重复。
  `),n("span",{class:"token list punctuation"},"-"),s(` 换句话说，通过保证元素之间的相对顺序不变来防止出现重复的子集。
`),n("span",{class:"token list punctuation"},"-"),s(" 接着，我们可以通过 "),n("span",{class:"token code-snippet code keyword"},"`S_2`"),s(" 推出 "),n("span",{class:"token code-snippet code keyword"},"`S_3`"),s("，实际上 "),n("span",{class:"token code-snippet code keyword"},"`S_3`"),s(" 中只有一个集合 "),n("span",{class:"token code-snippet code keyword"},"`[1,2,3]`"),s("，它是通过 "),n("span",{class:"token code-snippet code keyword"},"`[1,2]`"),s(` 推出的;

![](../../../assets/image/3-4-3.png)

所以如果想计算所有子集，只要遍历这棵多叉树，把所有节点的值收集起来就行了。代码如下：

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"subsets"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 用于存储结果"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token comment"},"// 用于记录回溯路径"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 前序遍历位置，每个节点的值都是一个子集"),s(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// 回溯算法标准框架"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 做选择"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token comment"},"// 回溯遍历下一层节点"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token comment"},"// 撤销选择"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

使用 `),n("span",{class:"token code-snippet code keyword"},"`start`"),s(" 参数控制树枝的生长避免产生重复的子集，用 "),n("span",{class:"token code-snippet code keyword"},"`track`"),s(` 记录根节点到每个节点的路径的值，同时在前序位置把每个节点的路径值收集起来，完成回溯树的遍历就收集了所有子集。

`),n("span",{class:"token code-snippet code keyword"},"`backtrack`"),s(" 函数开头看似没有 base case，会不会进入无限递归？其实不会的，当 "),n("span",{class:"token code-snippet code keyword"},"`start == nums.length`"),s(" 时，叶子节点的值会被装入 "),n("span",{class:"token code-snippet code keyword"},"`res`"),s("，但 "),n("span",{class:"token code-snippet code keyword"},"`for`"),s(` 循环不会执行，也就结束了递归。
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("h3",{id:"元素无重不可复选-组合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元素无重不可复选-组合","aria-hidden":"true"},"#"),s(" 元素无重不可复选 - 组合")],-1),q={id:"📌-77-组合-leetcode",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#📌-77-组合-leetcode","aria-hidden":"true"},"#",-1),O={href:"https://leetcode.com/problems/combinations/",target:"_blank",rel:"noopener noreferrer"},J=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),W=n("p",null,[s("给定两个整数 "),n("code",null,"n"),s(" 和 "),n("code",null,"k"),s("，返回范围 "),n("code",null,"[1, n]"),s(" 中所有可能的 "),n("code",null,"k"),s(" 个数的组合。")],-1),X=n("p",null,[s("你可以按 "),n("strong",null,"任何顺序"),s(" 返回答案。")],-1),Y=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),G=n("p",null,[s("还是以 "),n("code",null,"nums = [1,2,3]"),s(" 为例（ "),n("code",null,"n = 3, k = 2"),s(" ），刚才让你求所有子集，就是把所有节点的值都收集起来；现在你只需要把第 "),n("code",null,"2"),s(" 层（根节点视为第 "),n("code",null,"0"),s(" 层）的节点收集起来，就是大小为 "),n("code",null,"2"),s(" 的所有组合："),n("code",null,"[ [1,2],[1,3],[2,3] ]"),s("。")],-1),K=n("figure",null,[n("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Q=n("p",null,[s("反映到代码上，只需要稍改 base case，控制算法仅收集第 "),n("code",null,"k"),s(" 层节点的值即可。")],-1),Z=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),$=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"n"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"k"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"combine"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("n"),n("span",{class:"token punctuation"},","),s(" k")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 仅收集第 k 层节点"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" k"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [77. 组合 - LeetCode](https://leetcode.com/problems/combinations/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定两个整数 `),n("span",{class:"token code-snippet code keyword"},"`n`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`k`"),s("，返回范围 "),n("span",{class:"token code-snippet code keyword"},"`[1, n]`"),s(" 中所有可能的 "),n("span",{class:"token code-snippet code keyword"},"`k`"),s(` 个数的组合。

你可以按 `),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"任何顺序"),n("span",{class:"token punctuation"},"**")]),s(` 返回答案。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

还是以 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,3]`"),s(" 为例（ "),n("span",{class:"token code-snippet code keyword"},"`n = 3, k = 2`"),s(" ），刚才让你求所有子集，就是把所有节点的值都收集起来；现在你只需要把第 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 层（根节点视为第 "),n("span",{class:"token code-snippet code keyword"},"`0`"),s(" 层）的节点收集起来，就是大小为 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 的所有组合："),n("span",{class:"token code-snippet code keyword"},"`[ [1,2],[1,3],[2,3] ]`"),s(`。

![](../../../assets/image/3-4-4.png)

反映到代码上，只需要稍改 base case，控制算法仅收集第 `),n("span",{class:"token code-snippet code keyword"},"`k`"),s(` 层节点的值即可。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"n"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"k"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"combine"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("n"),n("span",{class:"token punctuation"},","),s(" k")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 仅收集第 k 层节点"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" k"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("h3",{id:"元素无重不可复选-排列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元素无重不可复选-排列","aria-hidden":"true"},"#"),s(" 元素无重不可复选 - 排列")],-1),an={id:"📌-46-全排列-leetcode",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#📌-46-全排列-leetcode","aria-hidden":"true"},"#",-1),en={href:"https://leetcode.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},on=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),cn=n("p",null,[s("给定一个不含重复数字的数组 "),n("code",null,"nums"),s(" ，返回其 "),n("strong",null,"所有可能的全排列"),s(" 。你可以 "),n("strong",null,"按任意顺序"),s(" 返回答案。"),n("code",null,"nums"),s(" 中的所有整数 "),n("strong",null,"互不相同"),s("。")],-1),ln=n("h4",{id:"💡-解题思路-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-2","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),pn=n("p",null,[s("比如输入 "),n("code",null,"nums = [1,2,3]"),s("，函数的返回值应该是：")],-1),un=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`[
    [1,2,3],[1,3,2],
    [2,1,3],[2,3,1],
    [3,1,2],[3,2,1]
]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=n("p",null,[s("刚才讲的组合/子集问题使用 "),n("code",null,"start"),s(" 变量保证元素 "),n("code",null,"nums[start]"),s(" 之后只会出现 "),n("code",null,"nums[start+1..]"),s(" 中的元素，通过固定元素的相对位置保证不出现重复的子集。")],-1),kn=n("p",null,[s("但排列问题本身就是让你穷举元素的位置，"),n("code",null,"nums[i]"),s(" 之后也可以出现 "),n("code",null,"nums[i]"),s(" 左边的元素，所以之前的那一套不行了，需要额外使用 "),n("code",null,"used"),s(" 数组来标记哪些元素还可以被选择。标准全排列可以抽象成如下这棵多叉树：")],-1),dn=n("figure",null,[n("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),mn=n("p",null,"我们用 used 数组标记已经在路径上的元素避免重复选择，然后收集所有叶子节点上的值，就是所有全排列的结果。",-1),bn=n("h4",{id:"💎-代码-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-2","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),vn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"permute"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" used "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`

		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("used"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			`),n("span",{class:"token comment"},"// 做选择"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 递归"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 撤销选择，回溯"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hn=n("p",null,[s("如果题目不让你算全排列，而是让你算元素个数为 k 的排列，怎么算？也很简单，改下 "),n("code",null,"backtrack"),s(" 函数的 base case，仅收集第 "),n("code",null,"k"),s(" 层的节点值即可。")],-1),_n=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" k"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),fn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [46. 全排列 - LeetCode](https://leetcode.com/problems/permutations/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个不含重复数字的数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),s(" ，返回其 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"所有可能的全排列"),n("span",{class:"token punctuation"},"**")]),s(" 。你可以 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"按任意顺序"),n("span",{class:"token punctuation"},"**")]),s(" 返回答案。"),n("span",{class:"token code-snippet code keyword"},"`nums`"),s(" 中的所有整数 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"互不相同"),n("span",{class:"token punctuation"},"**")]),s(`。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

比如输入 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,3]`"),s(`，函数的返回值应该是：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),s(`
`),n("span",{class:"token code-block"},`[
    [1,2,3],[1,3,2],
    [2,1,3],[2,3,1],
    [3,1,2],[3,2,1]
]`),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

刚才讲的组合/子集问题使用 `),n("span",{class:"token code-snippet code keyword"},"`start`"),s(" 变量保证元素 "),n("span",{class:"token code-snippet code keyword"},"`nums[start]`"),s(" 之后只会出现 "),n("span",{class:"token code-snippet code keyword"},"`nums[start+1..]`"),s(` 中的元素，通过固定元素的相对位置保证不出现重复的子集。

但排列问题本身就是让你穷举元素的位置，`),n("span",{class:"token code-snippet code keyword"},"`nums[i]`"),s(" 之后也可以出现 "),n("span",{class:"token code-snippet code keyword"},"`nums[i]`"),s(" 左边的元素，所以之前的那一套不行了，需要额外使用 "),n("span",{class:"token code-snippet code keyword"},"`used`"),s(` 数组来标记哪些元素还可以被选择。标准全排列可以抽象成如下这棵多叉树：

![](../../../assets/image/3-4-5.png)

我们用 used 数组标记已经在路径上的元素避免重复选择，然后收集所有叶子节点上的值，就是所有全排列的结果。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"permute"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" used "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`

		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("used"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			`),n("span",{class:"token comment"},"// 做选择"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 递归"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 撤销选择，回溯"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

如果题目不让你算全排列，而是让你算元素个数为 k 的排列，怎么算？也很简单，改下 `),n("span",{class:"token code-snippet code keyword"},"`backtrack`"),s(" 函数的 base case，仅收集第 "),n("span",{class:"token code-snippet code keyword"},"`k`"),s(` 层的节点值即可。

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" k"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gn=n("h3",{id:"元素可重不可复选-子集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元素可重不可复选-子集","aria-hidden":"true"},"#"),s(" 元素可重不可复选 - 子集")],-1),yn={id:"📌-90-子集-ii-leetcode",tabindex:"-1"},wn=n("a",{class:"header-anchor",href:"#📌-90-子集-ii-leetcode","aria-hidden":"true"},"#",-1),xn={href:"https://leetcode.com/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},jn=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),Sn=n("p",null,[s("给你一个整数数组 "),n("code",null,"nums"),s(" ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。")],-1),In=n("p",null,[s("解集 "),n("strong",null,"不能"),s(" 包含重复的子集。返回的解集中，子集可以按 "),n("strong",null,"任意顺序"),s(" 排列。")],-1),Cn=n("h4",{id:"💡-解题思路-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-3","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Ln=n("p",null,[s("比如输入 "),n("code",null,"nums = [1,2,2]"),s("，函数的返回值应该是："),n("code",null,"[ [],[1],[2],[1,2],[2,2],[1,2,2] ]")],-1),Mn=n("p",null,"就以 nums = [1,2,2] 为例，为了区别两个 2 是不同元素，后面我们写作 nums = [1,2,2']。",-1),Dn=n("p",null,"按照之前的思路画出子集的树形结构，显然，两条值相同的相邻树枝会产生重复：",-1),Tn=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`[
    [],
    [1],[2],[2'],
    [1,2],[1,2'],[2,2'],
    [1,2,2']
]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),An=n("p",null,[s("可以看到，"),n("code",null,"[2] 与 [2']"),s("、"),n("code",null,"[1,2] 与 [1,2']"),s(" 这两个结果出现了重复，所以需要进行剪枝，如果一个节点有多条值相同的树枝相邻，则只遍历第一条，剩下的都剪掉，不要去遍历：")],-1),En=n("figure",null,[n("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Nn=n("p",null,[s("体现在代码上，需要先进行排序，让相同的元素靠在一起，如果发现 "),n("code",null,"nums[i] == nums[i-1]"),s("，则跳过。")],-1),zn=n("p",null,"代码和之前标准的子集问题的代码几乎相同，就是添加了排序和剪枝的逻辑。",-1),Rn=n("h4",{id:"💎-代码-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-3","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),Bn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"subsetsWithDup"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 排序，以便在后续的步骤中去重"),s(`
	nums`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 出现了重复元素，跳过"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(" start "),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Un=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [90. 子集 II - LeetCode](https://leetcode.com/problems/subsets-ii/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你一个整数数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),s(` ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。

解集 `),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"不能"),n("span",{class:"token punctuation"},"**")]),s(" 包含重复的子集。返回的解集中，子集可以按 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"任意顺序"),n("span",{class:"token punctuation"},"**")]),s(` 排列。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

比如输入 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,2]`"),s("，函数的返回值应该是："),n("span",{class:"token code-snippet code keyword"},"`[ [],[1],[2],[1,2],[2,2],[1,2,2] ]`"),s(`

就以 nums = [1,2,2] 为例，为了区别两个 2 是不同元素，后面我们写作 nums = [1,2,2']。

按照之前的思路画出子集的树形结构，显然，两条值相同的相邻树枝会产生重复：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),s(`
`),n("span",{class:"token code-block"},`[
    [],
    [1],[2],[2'],
    [1,2],[1,2'],[2,2'],
    [1,2,2']
]`),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

可以看到，`),n("span",{class:"token code-snippet code keyword"},"`[2] 与 [2']`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`[1,2] 与 [1,2']`"),s(` 这两个结果出现了重复，所以需要进行剪枝，如果一个节点有多条值相同的树枝相邻，则只遍历第一条，剩下的都剪掉，不要去遍历：

![](../../../assets/image/3-4-6.png)

体现在代码上，需要先进行排序，让相同的元素靠在一起，如果发现 `),n("span",{class:"token code-snippet code keyword"},"`nums[i] == nums[i-1]`"),s(`，则跳过。

代码和之前标准的子集问题的代码几乎相同，就是添加了排序和剪枝的逻辑。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"subsetsWithDup"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 排序，以便在后续的步骤中去重"),s(`
	nums`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 出现了重复元素，跳过"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(" start "),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Fn=n("h3",{id:"元素可重不可复选-组合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元素可重不可复选-组合","aria-hidden":"true"},"#"),s(" 元素可重不可复选 - 组合")],-1),Pn={id:"📌-40-组合总和-ii-leetcode",tabindex:"-1"},Vn=n("a",{class:"header-anchor",href:"#📌-40-组合总和-ii-leetcode","aria-hidden":"true"},"#",-1),qn={href:"https://leetcode.com/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"},Hn=n("h4",{id:"💻-题目大意-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-4","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),On=n("p",null,[s("给定一个候选人编号的集合 "),n("code",null,"candidates"),s(" 和一个目标数 "),n("code",null,"target"),s(" ，找出 "),n("code",null,"candidates"),s(" 中所有可以使数字和为 "),n("code",null,"target"),s(" 的组合。"),n("code",null,"candidates"),s(" 中的每个数字在每个组合中只能使用 "),n("strong",null,"一次"),s(" 。解集不能包含重复的组合。")],-1),Jn=n("h4",{id:"💡-解题思路-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-4","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Wn=n("p",null,[s("组合问题和子集问题是等价的，说这是一个组合问题，其实换个问法就变成子集问题：请你计算 "),n("code",null,"candidates"),s(" 中所有和为 "),n("code",null,"target"),s(" 的子集。")],-1),Xn=n("p",null,[s("对比子集问题的解法，只要额外用一个 "),n("code",null,"sum"),s(" 变量记录回溯路径上的元素和，然后将 base case 改一改即可解决这道题：")],-1),Yn=n("h4",{id:"💎-代码-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-4","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),Gn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"candidates"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"target"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"combinationSum2"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("candidates"),n("span",{class:"token punctuation"},","),s(" target")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	candidates`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"=="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" candidates"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 若子集和超过 target ，则直接结束循环"),s(`
			`),n("span",{class:"token comment"},"// 这是因为数组已排序，后边元素更大，子集和一定超过 target"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"-"),s(" sum "),n("span",{class:"token operator"},"-"),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(" start "),n("span",{class:"token operator"},"&&"),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"+="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"-="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Kn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [40. 组合总和 II - LeetCode](https://leetcode.com/problems/combination-sum-ii/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个候选人编号的集合 `),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 和一个目标数 "),n("span",{class:"token code-snippet code keyword"},"`target`"),s(" ，找出 "),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 中所有可以使数字和为 "),n("span",{class:"token code-snippet code keyword"},"`target`"),s(" 的组合。"),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 中的每个数字在每个组合中只能使用 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"一次"),n("span",{class:"token punctuation"},"**")]),s(` 。解集不能包含重复的组合。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

组合问题和子集问题是等价的，说这是一个组合问题，其实换个问法就变成子集问题：请你计算 `),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 中所有和为 "),n("span",{class:"token code-snippet code keyword"},"`target`"),s(` 的子集。

对比子集问题的解法，只要额外用一个 `),n("span",{class:"token code-snippet code keyword"},"`sum`"),s(` 变量记录回溯路径上的元素和，然后将 base case 改一改即可解决这道题：

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"candidates"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"target"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"combinationSum2"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("candidates"),n("span",{class:"token punctuation"},","),s(" target")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	candidates`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"=="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" candidates"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 若子集和超过 target ，则直接结束循环"),s(`
			`),n("span",{class:"token comment"},"// 这是因为数组已排序，后边元素更大，子集和一定超过 target"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"-"),s(" sum "),n("span",{class:"token operator"},"-"),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(" start "),n("span",{class:"token operator"},"&&"),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"+="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"-="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Qn=n("h3",{id:"元素可重不可复选-排列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元素可重不可复选-排列","aria-hidden":"true"},"#"),s(" 元素可重不可复选 - 排列")],-1),Zn={id:"📌-47-全排列-ii-leetcode",tabindex:"-1"},$n=n("a",{class:"header-anchor",href:"#📌-47-全排列-ii-leetcode","aria-hidden":"true"},"#",-1),ns={href:"https://leetcode.com/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},ss=n("h4",{id:"💻-题目大意-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-5","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),as=n("p",null,[s("给定一个可包含重复数字的序列 "),n("code",null,"nums"),s(" ，"),n("strong",null,"按任意顺序"),s(" 返回所有不重复的全排列。")],-1),ts=n("h4",{id:"💡-解题思路-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-5","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),es=n("p",null,"排列问题的输入如果存在重复，比子集/组合问题稍微复杂一点。对比之前的标准全排列解法，需要增加两个点：",-1),os=n("ol",null,[n("li",null,[s("对 "),n("code",null,"nums"),s(" 进行排序；")]),n("li",null,[s("添加一句额外的剪枝逻辑："),n("code",null,"i > 0 && nums[i] == nums[i - 1] && !used[i - 1]"),s("；")])],-1),cs=n("p",null,"这个地方理解起来需要一些技巧，为了方便研究，依然把相同的元素用上标 ' 以示区别。",-1),ls=n("p",null,[s("假设输入为 "),n("code",null,"nums = [1,2,2']"),s("，标准的全排列算法会得出如下答案：")],-1),ps=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`[
    [1,2,2'],[1,2',2],
    [2,1,2'],[2,2',1],
    [2',1,2],[2',2,1]
]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),us=n("p",null,[s("显然这个结果存在重复，比如 "),n("code",null,"[1,2,2']"),s(" 和 "),n("code",null,"[1,2',2]"),s(" 应该只被算作同一个排列，但被算作了两个不同的排列。所以现在的关键在于，如何设计剪枝逻辑，把这种重复去除掉？答案是，"),n("strong",null,"保证相同元素在排列中的相对位置保持不变。")],-1),is=n("p",null,[s("比如说 "),n("code",null,"nums = [1,2,2']"),s(" 这个例子，保持排列中 "),n("code",null,"2"),s(" 一直在 "),n("code",null,"2'"),s(" 前面。这样的话，从上面 "),n("code",null,"6"),s(" 个排列中只能挑出 "),n("code",null,"3"),s(" 个排列符合这个条件："),n("code",null,"[ [1,2,2'],[2,1,2'],[2,2',1] ]"),s("，也就是正确答案。")],-1),rs=n("p",null,[s("进一步，如果 "),n("code",null,"nums = [1,2,2',2'']"),s("，只要保证重复元素 "),n("code",null,"2"),s(" 的相对位置固定，比如说 "),n("code",null,"2 -> 2' -> 2''"),s("，也可以得到无重复的全排列结果。")],-1),ks=n("p",null,[n("strong",null,"标准全排列算法之所以出现重复，是因为把相同元素形成的排列序列视为不同的序列，但实际上它们应该是相同的；而如果固定相同元素形成的序列顺序，当然就避免了重复"),s("。反映到代码上，就是这个剪枝逻辑：")],-1),ds=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("used"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 如果前面的相邻相等元素没有用过，则跳过"),s(`
    `),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 选择 nums[i]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ms=n("p",null,[n("strong",null,[s("当出现重复元素时，比如输入 "),n("code",null,"nums = [1,2,2',2'']"),s("，"),n("code",null,"2'"),s(" 只有在 "),n("code",null,"2"),s(" 已经被使用的情况下才会被选择，同理，"),n("code",null,"2''"),s(" 只有在 "),n("code",null,"2'"),s(" 已经被使用的情况下才会被选择，这就保证了相同元素在排列中的相对位置保证固定。")])],-1),bs=n("h4",{id:"💎-代码-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-5","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),vs=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"permuteUnique"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" used "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 先排序，让相同的元素靠在一起"),s(`
	nums`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("used"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("used"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hs=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [47. 全排列 II - LeetCode](https://leetcode.com/problems/permutations-ii/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个可包含重复数字的序列 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),s(" ，"),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"按任意顺序"),n("span",{class:"token punctuation"},"**")]),s(` 返回所有不重复的全排列。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

排列问题的输入如果存在重复，比子集/组合问题稍微复杂一点。对比之前的标准全排列解法，需要增加两个点：

`),n("span",{class:"token list punctuation"},"1."),s(" 对 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),s(` 进行排序；
`),n("span",{class:"token list punctuation"},"2."),s(" 添加一句额外的剪枝逻辑："),n("span",{class:"token code-snippet code keyword"},"`i > 0 && nums[i] == nums[i - 1] && !used[i - 1]`"),s(`；

这个地方理解起来需要一些技巧，为了方便研究，依然把相同的元素用上标 ' 以示区别。

假设输入为 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,2']`"),s(`，标准的全排列算法会得出如下答案：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),s(`
`),n("span",{class:"token code-block"},`[
    [1,2,2'],[1,2',2],
    [2,1,2'],[2,2',1],
    [2',1,2],[2',2,1]
]`),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

显然这个结果存在重复，比如 `),n("span",{class:"token code-snippet code keyword"},"`[1,2,2']`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`[1,2',2]`"),s(" 应该只被算作同一个排列，但被算作了两个不同的排列。所以现在的关键在于，如何设计剪枝逻辑，把这种重复去除掉？答案是，"),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"保证相同元素在排列中的相对位置保持不变。"),n("span",{class:"token punctuation"},"**")]),s(`

比如说 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,2']`"),s(" 这个例子，保持排列中 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 一直在 "),n("span",{class:"token code-snippet code keyword"},"`2'`"),s(" 前面。这样的话，从上面 "),n("span",{class:"token code-snippet code keyword"},"`6`"),s(" 个排列中只能挑出 "),n("span",{class:"token code-snippet code keyword"},"`3`"),s(" 个排列符合这个条件："),n("span",{class:"token code-snippet code keyword"},"`[ [1,2,2'],[2,1,2'],[2,2',1] ]`"),s(`，也就是正确答案。

进一步，如果 `),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,2',2'']`"),s("，只要保证重复元素 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 的相对位置固定，比如说 "),n("span",{class:"token code-snippet code keyword"},"`2 -> 2' -> 2''`"),s(`，也可以得到无重复的全排列结果。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"标准全排列算法之所以出现重复，是因为把相同元素形成的排列序列视为不同的序列，但实际上它们应该是相同的；而如果固定相同元素形成的序列顺序，当然就避免了重复"),n("span",{class:"token punctuation"},"**")]),s(`。反映到代码上，就是这个剪枝逻辑：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token comment"},"// 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("used"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 如果前面的相邻相等元素没有用过，则跳过"),s(`
    `),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 选择 nums[i]")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},[s("当出现重复元素时，比如输入 "),n("span",{class:"token code-snippet code keyword"},"`nums = [1,2,2',2'']`"),s("，"),n("span",{class:"token code-snippet code keyword"},"`2'`"),s(" 只有在 "),n("span",{class:"token code-snippet code keyword"},"`2`"),s(" 已经被使用的情况下才会被选择，同理，"),n("span",{class:"token code-snippet code keyword"},"`2''`"),s(" 只有在 "),n("span",{class:"token code-snippet code keyword"},"`2'`"),s(" 已经被使用的情况下才会被选择，这就保证了相同元素在排列中的相对位置保证固定。")]),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"permuteUnique"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" used "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 先排序，让相同的元素靠在一起"),s(`
	nums`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("used"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("used"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			used`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_s=n("h3",{id:"元素无重可复选-子集-组合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元素无重可复选-子集-组合","aria-hidden":"true"},"#"),s(" 元素无重可复选 - 子集 / 组合")],-1),fs={id:"📌-39-组合总和-leetcode",tabindex:"-1"},gs=n("a",{class:"header-anchor",href:"#📌-39-组合总和-leetcode","aria-hidden":"true"},"#",-1),ys={href:"https://leetcode.com/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},ws=n("h4",{id:"💻-题目大意-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-6","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),xs=n("p",null,[s("给你一个 "),n("strong",null,"无重复元素"),s(" 的整数数组 "),n("code",null,"candidates"),s(" 和一个目标整数 "),n("code",null,"target"),s(" ，找出 "),n("code",null,"candidates"),s(" 中可以使数字和为目标数 "),n("code",null,"target"),s(" 的 "),n("strong",null,"所有"),s(" 不同组合 ，并以列表形式返回。你可以按 "),n("strong",null,"任意顺序"),s(" 返回这些组合。")],-1),js=n("p",null,[n("code",null,"candidates"),s(" 中的 "),n("strong",null,"同一个"),s(" 数字可以 "),n("strong",null,"无限制重复被选取"),s(" 。如果至少一个数字的被选数量不同，则两种组合是不同的。")],-1),Ss=n("p",null,[s("比如输入 "),n("code",null,"candidates = [1,2,3], target = 3"),s("，算法应该返回："),n("code",null,"[ [1,1,1],[1,2],[3] ]")],-1),Is=n("h4",{id:"💡-解题思路-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-6","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Cs=n("p",null,[s("这道题说是组合问题，实际上也是子集问题："),n("code",null,"candidates"),s(" 的哪些子集的和为 "),n("code",null,"target"),s("？")],-1),Ls=n("p",null,"想解决这种类型的问题，也得回到回溯树上。",-1),Ms=n("p",null,[s("先思考，标准的子集/组合问题是如何保证不重复使用元素的？答案在于 "),n("code",null,"backtrack"),s(" 递归时输入的参数 "),n("code",null,"start"),s("：")],-1),Ds=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// ..."),s(`

		`),n("span",{class:"token comment"},"// 递归遍历下一层回溯树，注意参数"),s(`
		`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// ..."),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ts=n("p",null,[s("这个 "),n("code",null,"i"),s(" 从 "),n("code",null,"start"),s(" 开始，那么下一层回溯树就是从 "),n("code",null,"start + 1"),s(" 开始，从而保证 "),n("code",null,"nums[start]"),s(" 这个元素不会被重复使用。那么反过来，如果我想让每个元素被重复使用，我只要把 "),n("code",null,"i + 1"),s(" 改成 "),n("code",null,"i"),s(" 即可：")],-1),As=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// ..."),s(`

		`),n("span",{class:"token comment"},"// 递归遍历下一层回溯树，注意参数"),s(`
		`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// ..."),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Es=n("p",null,"这相当于给之前的回溯树添加了一条树枝，在遍历这棵树的过程中，一个元素可以被无限次使用：",-1),Ns=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),zs=n("p",null,[s("当然，这样这棵回溯树会永远生长下去，所以我们的递归函数需要设置合适的 base case 以结束算法，即路径和大于 "),n("code",null,"target"),s(" 时就没必要再遍历下去了。")],-1),Rs=n("h4",{id:"💎-代码-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-6","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),Bs=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"candidates"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"target"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"combinationSum"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("candidates"),n("span",{class:"token punctuation"},","),s(" target")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" len "),n("span",{class:"token operator"},"="),s(" candidates"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 满足条件"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"=="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token comment"},"// 剪枝"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},">"),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"+="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 注意这里传入的参数是 i 而不是 i + 1，表示可以重复使用当前的数字"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"-="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Us=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [39. 组合总和 - LeetCode](https://leetcode.com/problems/combination-sum/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你一个 `),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"无重复元素"),n("span",{class:"token punctuation"},"**")]),s(" 的整数数组 "),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 和一个目标整数 "),n("span",{class:"token code-snippet code keyword"},"`target`"),s(" ，找出 "),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 中可以使数字和为目标数 "),n("span",{class:"token code-snippet code keyword"},"`target`"),s(" 的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"所有"),n("span",{class:"token punctuation"},"**")]),s(" 不同组合 ，并以列表形式返回。你可以按 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"任意顺序"),n("span",{class:"token punctuation"},"**")]),s(` 返回这些组合。

`),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 中的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"同一个"),n("span",{class:"token punctuation"},"**")]),s(" 数字可以 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"无限制重复被选取"),n("span",{class:"token punctuation"},"**")]),s(` 。如果至少一个数字的被选数量不同，则两种组合是不同的。

比如输入 `),n("span",{class:"token code-snippet code keyword"},"`candidates = [1,2,3], target = 3`"),s("，算法应该返回："),n("span",{class:"token code-snippet code keyword"},"`[ [1,1,1],[1,2],[3] ]`"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

这道题说是组合问题，实际上也是子集问题：`),n("span",{class:"token code-snippet code keyword"},"`candidates`"),s(" 的哪些子集的和为 "),n("span",{class:"token code-snippet code keyword"},"`target`"),s(`？

想解决这种类型的问题，也得回到回溯树上。

先思考，标准的子集/组合问题是如何保证不重复使用元素的？答案在于 `),n("span",{class:"token code-snippet code keyword"},"`backtrack`"),s(" 递归时输入的参数 "),n("span",{class:"token code-snippet code keyword"},"`start`"),s(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// ..."),s(`

		`),n("span",{class:"token comment"},"// 递归遍历下一层回溯树，注意参数"),s(`
		`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// ..."),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

这个 `),n("span",{class:"token code-snippet code keyword"},"`i`"),s(" 从 "),n("span",{class:"token code-snippet code keyword"},"`start`"),s(" 开始，那么下一层回溯树就是从 "),n("span",{class:"token code-snippet code keyword"},"`start + 1`"),s(" 开始，从而保证 "),n("span",{class:"token code-snippet code keyword"},"`nums[start]`"),s(" 这个元素不会被重复使用。那么反过来，如果我想让每个元素被重复使用，我只要把 "),n("span",{class:"token code-snippet code keyword"},"`i + 1`"),s(" 改成 "),n("span",{class:"token code-snippet code keyword"},"`i`"),s(` 即可：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// ..."),s(`

		`),n("span",{class:"token comment"},"// 递归遍历下一层回溯树，注意参数"),s(`
		`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// ..."),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

这相当于给之前的回溯树添加了一条树枝，在遍历这棵树的过程中，一个元素可以被无限次使用：

![](../../../assets/image/3-4-7.png)

当然，这样这棵回溯树会永远生长下去，所以我们的递归函数需要设置合适的 base case 以结束算法，即路径和大于 `),n("span",{class:"token code-snippet code keyword"},"`target`"),s(` 时就没必要再遍历下去了。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"candidates"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"target"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"combinationSum"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("candidates"),n("span",{class:"token punctuation"},","),s(" target")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" len "),n("span",{class:"token operator"},"="),s(" candidates"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 满足条件"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"=="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("track"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token comment"},"// 剪枝"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},">"),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"+="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 注意这里传入的参数是 i 而不是 i + 1，表示可以重复使用当前的数字"),s(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			sum `),n("span",{class:"token operator"},"-="),s(" candidates"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Fs=i(`<h3 id="元素无重可复选-排列" tabindex="-1"><a class="header-anchor" href="#元素无重可复选-排列" aria-hidden="true">#</a> 元素无重可复选 - 排列</h3><p>力扣上没有类似的题目，不妨自己算一下，<code>nums</code> 数组中的元素无重复且可复选的情况下，有哪些排列？</p><p>比如输入 <code>nums = [1,2,3]</code>，那么这种条件下的全排列共有 <code>3^3 = 27</code> 种：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[
  [1,1,1],[1,1,2],[1,1,3],[1,2,1],[1,2,2],[1,2,3],[1,3,1],[1,3,2],[1,3,3],
  [2,1,1],[2,1,2],[2,1,3],[2,2,1],[2,2,2],[2,2,3],[2,3,1],[2,3,2],[2,3,3],
  [3,1,1],[3,1,2],[3,1,3],[3,2,1],[3,2,2],[3,2,3],[3,3,1],[3,3,2],[3,3,3]
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标准的全排列算法利用 <code>used</code> 数组进行剪枝，避免重复使用同一个元素。如果允许重复使用元素的话，直接放飞自我，去除所有 <code>used</code> 数组的剪枝逻辑就行了。代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">permuteRepeat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> track <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// base case，到达叶子节点</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>track<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，排列、组合、子集问题的九种变化就都讲完了。</p>`,7),Ps=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),Vs=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),qs=n("td",{style:{"text-align":"center"}},"46",-1),Hs={style:{"text-align":"left"}},Os={href:"https://leetcode.com/problems/permutations",target:"_blank",rel:"noopener noreferrer"},Js={style:{"text-align":"center"}},Ws={style:{"text-align":"left"}},Xs=n("code",null,"数组",-1),Ys=n("code",null,"回溯",-1),Gs={style:{"text-align":"left"}},Ks=n("td",{style:{"text-align":"center"}},"47",-1),Qs={style:{"text-align":"left"}},Zs={href:"https://leetcode.com/problems/permutations-ii",target:"_blank",rel:"noopener noreferrer"},$s={style:{"text-align":"center"}},na={style:{"text-align":"left"}},sa=n("code",null,"数组",-1),aa=n("code",null,"回溯",-1),ta={style:{"text-align":"left"}},ea=n("td",{style:{"text-align":"center"}},"37",-1),oa={style:{"text-align":"left"}},ca={href:"https://leetcode.com/problems/sudoku-solver",target:"_blank",rel:"noopener noreferrer"},la={style:{"text-align":"center"}},pa={style:{"text-align":"left"}},ua=n("code",null,"数组",-1),ia=n("code",null,"哈希表",-1),ra=n("code",null,"回溯",-1),ka=n("code",null,"1+",-1),da={style:{"text-align":"left"}},ma=n("td",{style:{"text-align":"center"}},"22",-1),ba={style:{"text-align":"left"}},va={href:"https://leetcode.com/problems/generate-parentheses",target:"_blank",rel:"noopener noreferrer"},ha={style:{"text-align":"center"}},_a={style:{"text-align":"left"}},fa=n("code",null,"字符串",-1),ga=n("code",null,"动态规划",-1),ya=n("code",null,"回溯",-1),wa={style:{"text-align":"left"}},xa=n("td",{style:{"text-align":"center"}},"17",-1),ja={style:{"text-align":"left"}},Sa={href:"https://leetcode.com/problems/letter-combinations-of-a-phone-number",target:"_blank",rel:"noopener noreferrer"},Ia={style:{"text-align":"center"}},Ca={style:{"text-align":"left"}},La=n("code",null,"哈希表",-1),Ma=n("code",null,"字符串",-1),Da=n("code",null,"回溯",-1),Ta={style:{"text-align":"left"}},Aa=n("td",{style:{"text-align":"center"}},"784",-1),Ea={style:{"text-align":"left"}},Na={href:"https://leetcode.com/problems/letter-case-permutation",target:"_blank",rel:"noopener noreferrer"},za=n("td",{style:{"text-align":"center"}},null,-1),Ra={style:{"text-align":"left"}},Ba=n("code",null,"位运算",-1),Ua=n("code",null,"字符串",-1),Fa=n("code",null,"回溯",-1),Pa={style:{"text-align":"left"}},Va=n("td",{style:{"text-align":"center"}},"39",-1),qa={style:{"text-align":"left"}},Ha={href:"https://leetcode.com/problems/combination-sum",target:"_blank",rel:"noopener noreferrer"},Oa={style:{"text-align":"center"}},Ja={style:{"text-align":"left"}},Wa=n("code",null,"数组",-1),Xa=n("code",null,"回溯",-1),Ya={style:{"text-align":"left"}},Ga=n("td",{style:{"text-align":"center"}},"40",-1),Ka={style:{"text-align":"left"}},Qa={href:"https://leetcode.com/problems/combination-sum-ii",target:"_blank",rel:"noopener noreferrer"},Za={style:{"text-align":"center"}},$a={style:{"text-align":"left"}},nt=n("code",null,"数组",-1),st=n("code",null,"回溯",-1),at={style:{"text-align":"left"}},tt=n("td",{style:{"text-align":"center"}},"78",-1),et={style:{"text-align":"left"}},ot={href:"https://leetcode.com/problems/subsets",target:"_blank",rel:"noopener noreferrer"},ct={style:{"text-align":"center"}},lt={style:{"text-align":"left"}},pt=n("code",null,"位运算",-1),ut=n("code",null,"数组",-1),it=n("code",null,"回溯",-1),rt={style:{"text-align":"left"}},kt=n("td",{style:{"text-align":"center"}},"90",-1),dt={style:{"text-align":"left"}},mt={href:"https://leetcode.com/problems/subsets-ii",target:"_blank",rel:"noopener noreferrer"},bt={style:{"text-align":"center"}},vt={style:{"text-align":"left"}},ht=n("code",null,"位运算",-1),_t=n("code",null,"数组",-1),ft=n("code",null,"回溯",-1),gt={style:{"text-align":"left"}},yt=n("td",{style:{"text-align":"center"}},"473",-1),wt={style:{"text-align":"left"}},xt={href:"https://leetcode.com/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},jt=n("td",{style:{"text-align":"center"}},null,-1),St={style:{"text-align":"left"}},It=n("code",null,"位运算",-1),Ct=n("code",null,"数组",-1),Lt=n("code",null,"动态规划",-1),Mt=n("code",null,"2+",-1),Dt={style:{"text-align":"left"}},Tt=n("td",{style:{"text-align":"center"}},"1593",-1),At={style:{"text-align":"left"}},Et={href:"https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings",target:"_blank",rel:"noopener noreferrer"},Nt=n("td",{style:{"text-align":"center"}},null,-1),zt={style:{"text-align":"left"}},Rt=n("code",null,"哈希表",-1),Bt=n("code",null,"字符串",-1),Ut=n("code",null,"回溯",-1),Ft={style:{"text-align":"left"}},Pt=n("td",{style:{"text-align":"center"}},"1079",-1),Vt={style:{"text-align":"left"}},qt={href:"https://leetcode.com/problems/letter-tile-possibilities",target:"_blank",rel:"noopener noreferrer"},Ht=n("td",{style:{"text-align":"center"}},null,-1),Ot={style:{"text-align":"left"}},Jt=n("code",null,"哈希表",-1),Wt=n("code",null,"字符串",-1),Xt=n("code",null,"回溯",-1),Yt=n("code",null,"1+",-1),Gt={style:{"text-align":"left"}},Kt=n("td",{style:{"text-align":"center"}},"93",-1),Qt={style:{"text-align":"left"}},Zt={href:"https://leetcode.com/problems/restore-ip-addresses",target:"_blank",rel:"noopener noreferrer"},$t={style:{"text-align":"center"}},ne={style:{"text-align":"left"}},se=n("code",null,"字符串",-1),ae=n("code",null,"回溯",-1),te={style:{"text-align":"left"}},ee=n("td",{style:{"text-align":"center"}},"79",-1),oe={style:{"text-align":"left"}},ce={href:"https://leetcode.com/problems/word-search",target:"_blank",rel:"noopener noreferrer"},le={style:{"text-align":"center"}},pe={style:{"text-align":"left"}},ue=n("code",null,"数组",-1),ie=n("code",null,"字符串",-1),re=n("code",null,"回溯",-1),ke=n("code",null,"1+",-1),de={style:{"text-align":"left"}},me=n("td",{style:{"text-align":"center"}},"679",-1),be={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/24-game",target:"_blank",rel:"noopener noreferrer"},he=n("td",{style:{"text-align":"center"}},null,-1),_e={style:{"text-align":"left"}},fe=n("code",null,"数组",-1),ge=n("code",null,"数学",-1),ye=n("code",null,"回溯",-1),we={style:{"text-align":"left"}};function xe(je,Se){const o=p("ExternalLinkIcon"),l=p("MdDemo"),e=p("RouterLink"),c=p("font");return k(),d("div",null,[w,n("p",null,[s("下面我们就通过"),n("a",x,[s("LeetCode 第 46 题 全排列"),a(o)]),s(" 来了解什么叫做选择和撤销选择，以及这个框架的底层原理。")]),j,a(l,{title:"相关题目",id:"md-demo-157"},{default:t(()=>[n("h4",S,[I,s(" 📌 "),n("a",C,[s("78. 子集 - LeetCode"),a(o)])]),L,M,D,T,A,E,N,z,R,B,U,F]),code:t(()=>[P]),_:1}),V,a(l,{title:"相关题目",id:"md-demo-231"},{default:t(()=>[n("h4",q,[H,s(" 📌 "),n("a",O,[s("77. 组合 - LeetCode"),a(o)])]),J,W,X,Y,G,K,Q,Z,$]),code:t(()=>[nn]),_:1}),sn,a(l,{title:"相关题目",id:"md-demo-265"},{default:t(()=>[n("h4",an,[tn,s(" 📌 "),n("a",en,[s("46. 全排列 - LeetCode"),a(o)])]),on,cn,ln,pn,un,rn,kn,dn,mn,bn,vn,hn,_n]),code:t(()=>[fn]),_:1}),gn,a(l,{title:"相关题目",id:"md-demo-307"},{default:t(()=>[n("h4",yn,[wn,s(" 📌 "),n("a",xn,[s("90. 子集 II - LeetCode"),a(o)])]),jn,Sn,In,Cn,Ln,Mn,Dn,Tn,An,En,Nn,zn,Rn,Bn]),code:t(()=>[Un]),_:1}),Fn,a(l,{title:"相关题目",id:"md-demo-354"},{default:t(()=>[n("h4",Pn,[Vn,s(" 📌 "),n("a",qn,[s("40. 组合总和 II - LeetCode"),a(o)])]),Hn,On,Jn,Wn,Xn,Yn,Gn]),code:t(()=>[Kn]),_:1}),Qn,a(l,{title:"相关题目",id:"md-demo-382"},{default:t(()=>[n("h4",Zn,[$n,s(" 📌 "),n("a",ns,[s("47. 全排列 II - LeetCode"),a(o)])]),ss,as,ts,es,os,cs,ls,ps,us,is,rs,ks,ds,ms,bs,vs]),code:t(()=>[hs]),_:1}),_s,a(l,{title:"相关题目",id:"md-demo-442"},{default:t(()=>[n("h4",fs,[gs,s(" 📌 "),n("a",ys,[s("39. 组合总和 - LeetCode"),a(o)])]),ws,xs,js,Ss,Is,Cs,Ls,Ms,Ds,Ts,As,Es,Ns,zs,Rs,Bs]),code:t(()=>[Us]),_:1}),Fs,u(" START TABLE "),u(" Please keep comment here to allow auto update "),u(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),Ps,u(" prettier-ignore "),n("table",null,[Vs,n("tbody",null,[n("tr",null,[qs,n("td",Hs,[n("a",Os,[s("全排列"),a(o)])]),n("td",Js,[a(e,{to:"/leetcode-js/problem/0046.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ws,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[Xs]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[Ys]),_:1})]),n("td",Gs,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ks,n("td",Qs,[n("a",Zs,[s("全排列 II"),a(o)])]),n("td",$s,[a(e,{to:"/leetcode-js/problem/0047.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",na,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[sa]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[aa]),_:1})]),n("td",ta,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[ea,n("td",oa,[n("a",ca,[s("解数独"),a(o)])]),n("td",la,[a(e,{to:"/leetcode-js/problem/0037.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",pa,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[ua]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:t(()=>[ia]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[ra]),_:1}),s(),ka]),n("td",da,[a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1})])]),n("tr",null,[ma,n("td",ba,[n("a",va,[s("括号生成"),a(o)])]),n("td",ha,[a(e,{to:"/leetcode-js/problem/0022.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",_a,[a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[fa]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:t(()=>[ga]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[ya]),_:1})]),n("td",wa,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[xa,n("td",ja,[n("a",Sa,[s("电话号码的字母组合"),a(o)])]),n("td",Ia,[a(e,{to:"/leetcode-js/problem/0017.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ca,[a(e,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:t(()=>[La]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[Ma]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[Da]),_:1})]),n("td",Ta,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Aa,n("td",Ea,[n("a",Na,[s("字母大小写全排列"),a(o)])]),za,n("td",Ra,[a(e,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:t(()=>[Ba]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[Ua]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[Fa]),_:1})]),n("td",Pa,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Va,n("td",qa,[n("a",Ha,[s("组合总和"),a(o)])]),n("td",Oa,[a(e,{to:"/leetcode-js/problem/0039.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ja,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[Wa]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[Xa]),_:1})]),n("td",Ya,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Ga,n("td",Ka,[n("a",Qa,[s("组合总和 II"),a(o)])]),n("td",Za,[a(e,{to:"/leetcode-js/problem/0040.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",$a,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[nt]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[st]),_:1})]),n("td",at,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[tt,n("td",et,[n("a",ot,[s("子集"),a(o)])]),n("td",ct,[a(e,{to:"/leetcode-js/problem/0078.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",lt,[a(e,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:t(()=>[pt]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[ut]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[it]),_:1})]),n("td",rt,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[kt,n("td",dt,[n("a",mt,[s("子集 II"),a(o)])]),n("td",bt,[a(e,{to:"/leetcode-js/problem/0090.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",vt,[a(e,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:t(()=>[ht]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[_t]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[ft]),_:1})]),n("td",gt,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[yt,n("td",wt,[n("a",xt,[s("火柴拼正方形"),a(o)])]),jt,n("td",St,[a(e,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:t(()=>[It]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[Ct]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:t(()=>[Lt]),_:1}),s(),Mt]),n("td",Dt,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Tt,n("td",At,[n("a",Et,[s("拆分字符串使唯一子字符串的数目最大"),a(o)])]),Nt,n("td",zt,[a(e,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:t(()=>[Rt]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[Bt]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[Ut]),_:1})]),n("td",Ft,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Pt,n("td",Vt,[n("a",qt,[s("活字印刷"),a(o)])]),Ht,n("td",Ot,[a(e,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:t(()=>[Jt]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[Wt]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[Xt]),_:1}),s(),Yt]),n("td",Gt,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Kt,n("td",Qt,[n("a",Zt,[s("复原 IP 地址"),a(o)])]),n("td",$t,[a(e,{to:"/leetcode-js/problem/0093.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ne,[a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[se]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[ae]),_:1})]),n("td",te,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[ee,n("td",oe,[n("a",ce,[s("单词搜索"),a(o)])]),n("td",le,[a(e,{to:"/leetcode-js/problem/0079.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",pe,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[ue]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[ie]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[re]),_:1}),s(),ke]),n("td",de,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[me,n("td",be,[n("a",ve,[s("24 点游戏"),a(o)])]),he,n("td",_e,[a(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[fe]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/math.html"},{default:t(()=>[ge]),_:1}),s(),a(e,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:t(()=>[ye]),_:1})]),n("td",we,[a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1})])])])])])}const Ce=r(y,[["render",xe],["__file","backtracking.html.vue"]]);export{Ce as default};
