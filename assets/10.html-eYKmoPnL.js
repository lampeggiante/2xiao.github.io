import{_ as r,r as p,o as k,c as d,a as n,b as s,d as t,w as a,e as l}from"./app-Vxhc7U41.js";const v={},m=n("h1",{id:"_10-实现单节点-update",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-实现单节点-update","aria-hidden":"true"},"#"),s(" 10. 实现单节点 update")],-1),b={class:"hint-container info"},w=n("p",{class:"hint-container-title"},"摘要",-1),y=n("ul",null,[n("li",null,"处理 beginWork 阶段"),n("li",null,"处理 completeWork 阶段"),n("li",null,"处理 commitWork 阶段"),n("li",null,"处理 useState 方法")],-1),g={href:"https://github.com/2xiao/my-react/tree/v1.10",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"git tag v1.10",-1),h=n("code",null,"useState",-1),F=n("code",null,"useState",-1),_=l(`<ul><li>对于 <code>beginWork</code> 阶段： <ul><li>需要处理节点删除的情况（<code>ChildDeletion</code>）；</li><li>需要处理节点移动的情况（例如从 <code>abc</code> 变为 <code>bca</code>）；</li></ul></li><li>对于 <code>completeWork</code> 阶段： <ul><li>需要处理 <code>HostText</code> 内容的更新情况；</li><li>需要处理 <code>HostComponent</code> 属性的变化情况；</li></ul></li><li>对于 <code>commitWork</code> 阶段： <ul><li>处理 <code>Update</code> flags；</li><li>处理 <code>ChildDeletion</code> flags，遍历被删除的子树；</li></ul></li><li>对于 <code>useState</code> 方法： <ul><li>需要实现与 <code>mountState</code> 相对应的 <code>updateState</code> 方法；</li></ul></li></ul><h2 id="_1-处理-beginwork-阶段" tabindex="-1"><a class="header-anchor" href="#_1-处理-beginwork-阶段" aria-hidden="true">#</a> 1. 处理 beginWork 阶段</h2><p>在本节中，我们仅处理单一节点的情况，先跳过多节点的情况，因此也不需要考虑节点移动的情况。具体的处理流程如下：</p><ul><li><p>首先，我们需要比较是否可以复用当前的 Fiber 节点。</p><ul><li>首先比较节点的 <code>key</code>，如果 <code>key</code> 不同，表示不能复用。</li><li>如果 <code>key</code> 相同，则继续比较节点的 <code>type</code>，如果 <code>type</code> 不同，同样不能复用。</li><li>如果 <code>key</code> 和 <code>type</code> 都相同，表示可以复用。</li></ul></li><li><p>如果不能复用当前的 Fiber 节点，则需要标记删除当前的 Fiber 节点，并创建一个新的 Fiber 节点。</p></li><li><p>如果可以复用，就直接复用旧的 Fiber 节点。</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 处理单个 Element 节点的情况</span>
<span class="token comment">// 对比 currentFiber 与 ReactElement，生成 workInProgress FiberNode</span>
<span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	currentFiber<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	element<span class="token operator">:</span> ReactElementType
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 组件的更新阶段</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>key <span class="token operator">===</span> element<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>type <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">// key 和 type 都相同，复用旧的 Fiber 节点</span>
					<span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>currentFiber<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
					existing<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
					<span class="token keyword">return</span> existing<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">// key 相同，但 type 不同，删除旧的 Fiber 节点</span>
				<span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;还未实现的 React 类型&#39;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// key 不同，删除旧的 Fiber 节点</span>
			<span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 创建新的 Fiber 节点</span>
	<span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">createFiberFromElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
	fiber<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
	<span class="token keyword">return</span> fiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理文本节点的情况</span>
<span class="token comment">// 对比 currentFiber 与 ReactElement，生成 workInProgress FiberNode</span>
<span class="token keyword">function</span> <span class="token function">reconcileSingleTextNode</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	currentFiber<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	content<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 组件的更新阶段</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>tag <span class="token operator">===</span> HostText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 复用旧的 Fiber 节点</span>
			<span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>currentFiber<span class="token punctuation">,</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			existing<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
			<span class="token keyword">return</span> existing<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 删除旧的 Fiber 节点</span>
			<span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 创建新的 Fiber 节点</span>
	<span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span>HostText<span class="token punctuation">,</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	fiber<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
	<span class="token keyword">return</span> fiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>useFiber</code> 函数中，我们实现了复用旧的 Fiber 节点的功能。需要注意的是，对于同一个 Fiber 节点，在多次更新中，<code>current</code> 和 <code>workInProgress</code> 这两个 Fiber 节点会被反复重用。</p><p>这是因为在 React 中，每个 Fiber 节点都有一个 <code>alternate</code> 指针，指向其在上一次渲染中对应的 Fiber 节点。在 <code>createWorkInProgress</code> 函数中，我们通过 <code>current.alternate</code> 指针获取了上一次渲染中对应的 Fiber 节点 <code>workInProgress</code>，并且返回了经过处理后的 <code>workInProgress</code>，这种重用机制有助于减少内存消耗和提高性能。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 复用 Fiber 节点</span>
<span class="token keyword">function</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span> pendingProps<span class="token operator">:</span> Props<span class="token punctuation">)</span><span class="token operator">:</span> FiberNode <span class="token punctuation">{</span>
	<span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token function">createWorkInProgress</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> pendingProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
	clone<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	clone<span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>deleteChild</code> 函数中，我们实现了删除旧的 Fiber 节点的功能。具体来说，就是将旧的 Fiber 节点加入到其父节点的 <code>deletions</code> 参数中，并为其父节点增加 <code>ChildDeletion</code> flags 标记。</p><p><code>deletions</code> 参数是一个数组，用于记录需要被删除的节点，然后在适当的时机，React 会遍历 deletions 数组，执行相应节点的删除操作。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 从父节点中删除指定的子节点</span>
<span class="token keyword">function</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span> childToDelete<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> deletions <span class="token operator">=</span> returnFiber<span class="token punctuation">.</span>deletions<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>deletions <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		returnFiber<span class="token punctuation">.</span>deletions <span class="token operator">=</span> <span class="token punctuation">[</span>childToDelete<span class="token punctuation">]</span><span class="token punctuation">;</span>
		returnFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> ChildDeletion<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		deletions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-处理-completework-阶段" tabindex="-1"><a class="header-anchor" href="#_2-处理-completework-阶段" aria-hidden="true">#</a> 2. 处理 completeWork 阶段</h2><p>在 <code>completeWork</code> 阶段，会根据 Fiber 节点的类型（<code>HostRoot</code>、<code>HostComponent</code>、<code>HostText</code> 等）构建 DOM 节点，收集更新 flags，并根据更新 flags 执行不同的 DOM 操作。</p><p>之前我们已经实现首屏渲染时的 <code>completeWork</code> 函数，现在只需要在其中增加组件更新的情况处理，分别是：</p><ul><li>处理 <code>HostComponent</code> 属性的变化情况；</li><li>处理 <code>HostText</code> 内容的更新情况；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 生成更新计划，计算和收集更新 flags</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">completeWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
	<span class="token keyword">const</span> current <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>

		<span class="token keyword">case</span> HostComponent<span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 组件的更新阶段</span>
				<span class="token function">updateHostComponent</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token comment">// ...</span>

		<span class="token keyword">case</span> HostText<span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 组件的更新阶段</span>
				<span class="token function">updateHostText</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">updateHostText</span><span class="token punctuation">(</span>current<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span> workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> oldText <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
	<span class="token keyword">const</span> newText <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>oldText <span class="token operator">!==</span> newText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>current<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span> workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为 Fiber 节点增加 Update flags</span>
<span class="token keyword">function</span> <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	workInProgress<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Update<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-处理-commitwork-阶段" tabindex="-1"><a class="header-anchor" href="#_3-处理-commitwork-阶段" aria-hidden="true">#</a> 3. 处理 commitWork 阶段</h2><p>在 <code>commitWork</code> 阶段，会深度优先遍历 Fiber 树，递归地向下寻找子节点是否存在需要执行的 flags，而 <code>commitMutationEffectsOnFiber</code> 函数会根据每个节点的 flags 和更新计划中的信息执行相应的 DOM 操作。</p><p>因此我们需要在 <code>commitMutationEffectsOnFiber</code> 函数中增加对 <code>Update</code> 和 <code>ChildDeletion</code> flags 的处理。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/commitWork.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitMutationEffectsOnFiber</span> <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> flags <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> Placement<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">commitPlacement</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 处理完之后，从 flags 中删除 Placement 标记</span>
		finishedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>Placement<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> ChildDeletion<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> deletions <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>deletions<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>deletions <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			deletions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token function">commitDeletion</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		finishedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>ChildDeletion<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> Update<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">commitUpdate</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
		finishedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>Update<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若 Fiber 节点包含 <code>Update</code> flags，需要更新相应的 DOM 节点，先只处理节点为 <code>HostText</code> 类型的情况：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/hostConfig.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">commitUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> HostComponent<span class="token operator">:</span>
			<span class="token comment">// TODO</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> HostText<span class="token operator">:</span>
			<span class="token keyword">const</span> text <span class="token operator">=</span> fiber<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
			<span class="token function">commitTextUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;未实现的 commitUpdate 类型&#39;</span><span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">commitTextUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	textInstance<span class="token operator">:</span> TextInstance<span class="token punctuation">,</span>
	content<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	textInstance<span class="token punctuation">.</span>textContent <span class="token operator">=</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若 Fiber 节点包含 <code>ChildDeletion</code> flags，不仅需要删除该节点及其子树，还需要对子树进行如下处理：</p><ul><li>对于 <code>FunctionComponent</code>，需要处理 <code>useEffect unmount</code>，解绑 ref；</li><li>对于 <code>HostComponent</code>，需要解绑 ref；</li><li>对于子树的「根 <code>HostComponent</code>」，需要移除 DOM；</li></ul>`,24),H=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/commitWork.ts"),s(`

`),n("span",{class:"token comment"},"// 删除节点及其子树"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"commitDeletion"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("childToDelete"),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'执行 Deletion 操作'"),n("span",{class:"token punctuation"},","),s(" childToDelete"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// 子树的根节点"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" rootHostNode"),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 递归遍历子树"),s(`
	`),n("span",{class:"token function"},"commitNestedUnmounts"),n("span",{class:"token punctuation"},"("),s("childToDelete"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("unmountFiber"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"switch"),s(),n("span",{class:"token punctuation"},"("),s("unmountFiber"),n("span",{class:"token punctuation"},"."),s("tag"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"case"),s(" HostComponent"),n("span",{class:"token operator"},":"),s(`
				`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("rootHostNode "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
					rootHostNode `),n("span",{class:"token operator"},"="),s(" unmountFiber"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token punctuation"},"}"),s(`
				`),n("span",{class:"token comment"},"// TODO 解绑ref"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"case"),s(" HostText"),n("span",{class:"token operator"},":"),s(`
				`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("rootHostNode "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
					rootHostNode `),n("span",{class:"token operator"},"="),s(" unmountFiber"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token punctuation"},"}"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"case"),s(" FunctionComponent"),n("span",{class:"token operator"},":"),s(`
				`),n("span",{class:"token comment"},"//  TODO useEffect unmount"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"default"),n("span",{class:"token operator"},":"),s(`
				`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
					`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'未实现的 delete 类型'"),n("span",{class:"token punctuation"},","),s(" unmountFiber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 移除 rootHostNode 的DOM"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("rootHostNode "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 找到待删除子树的根节点的 parent DOM"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hostParent "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getHostParent"),n("span",{class:"token punctuation"},"("),s("childToDelete"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"as"),s(" Container"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token function"},"removeChild"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("rootHostNode "),n("span",{class:"token keyword"},"as"),s(" FiberNode"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("stateNode"),n("span",{class:"token punctuation"},","),s(" hostParent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	childToDelete`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	childToDelete`),n("span",{class:"token punctuation"},"."),s("child "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 深度优先遍历 Fiber 树，执行 onCommitUnmount"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"commitNestedUnmounts"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s(`
	root`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
	`),n("span",{class:"token function-variable function"},"onCommitUnmount"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("unmountFiber"),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"void"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" node "),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token function"},"onCommitUnmount"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// 向下遍历，递"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("child "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			node`),n("span",{class:"token punctuation"},"."),s("child"),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
			node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("child"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token comment"},"// 终止条件"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"==="),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token comment"},"// 向上遍历，归"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("sibling "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 终止条件"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(" node"),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"=="),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		node`),n("span",{class:"token punctuation"},"."),s("sibling"),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("return"),n("span",{class:"token punctuation"},";"),s(`
		node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("sibling"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-dom/src/hostConfig.ts"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"removeChild"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s(`
	child`),n("span",{class:"token operator"},":"),s(" Instance "),n("span",{class:"token operator"},"|"),s(" TextInstance"),n("span",{class:"token punctuation"},","),s(`
	container`),n("span",{class:"token operator"},":"),s(` Container
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
	container`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"removeChild"),n("span",{class:"token punctuation"},"("),s("child"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=l(`<h2 id="_4-处理-usestate-方法" tabindex="-1"><a class="header-anchor" href="#_4-处理-usestate-方法" aria-hidden="true">#</a> 4. 处理 useState 方法</h2><p>之前我们实现了在首屏渲染阶段被调用的 Hooks 集合： <code>HooksDispatcherOnMount</code>，现在就来实现组件更新阶段调用的 Hooks 集合 <code>HooksDispatcherOnUpdate</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">const</span> HooksDispatcherOnUpdate<span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token punctuation">{</span>
	useState<span class="token operator">:</span> updateState
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">updateState</span><span class="token generic class-name"><span class="token operator">&lt;</span>State<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>State<span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updateState 开始&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 当前正在工作的 useState</span>
	<span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 计算新 state 的逻辑</span>
	<span class="token keyword">const</span> queue <span class="token operator">=</span> hook<span class="token punctuation">.</span>queue <span class="token keyword">as</span> UpdateQueue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> pending <span class="token operator">=</span> queue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> memoizedState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">processUpdateQueue</span><span class="token punctuation">(</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> pending<span class="token punctuation">)</span><span class="token punctuation">;</span>
		hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> memoizedState<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> queue<span class="token punctuation">.</span>dispatch <span class="token keyword">as</span> Dispatch<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>updateState</code> 中通过 <code>updateWorkInProgressHook</code> 函数来找到当前正在工作的 <code>useState</code>，从 <code>current</code> 中获取 Hook 的数据：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">function</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Hook <span class="token punctuation">{</span>
	<span class="token comment">// TODO render 阶段触发的更新</span>
	<span class="token comment">// 保存链表中的下一个 Hook</span>
	<span class="token keyword">let</span> nextCurrentHook<span class="token operator">:</span> Hook <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>currentHook <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 这是函数组件 update 时的第一个 hook</span>
		<span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token punctuation">(</span>currentlyRenderingFiber <span class="token keyword">as</span> FiberNode<span class="token punctuation">)</span><span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			nextCurrentHook <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			nextCurrentHook <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 这是函数组件 update 时后续的 hook</span>
		nextCurrentHook <span class="token operator">=</span> currentHook<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>nextCurrentHook <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
			<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">组件 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>currentlyRenderingFiber<span class="token operator">?.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 本次执行时的 Hooks 比上次执行多</span><span class="token template-punctuation string">\`</span></span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	currentHook <span class="token operator">=</span> nextCurrentHook <span class="token keyword">as</span> Hook<span class="token punctuation">;</span>
	<span class="token keyword">const</span> newHook<span class="token operator">:</span> Hook <span class="token operator">=</span> <span class="token punctuation">{</span>
		memoizedState<span class="token operator">:</span> currentHook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span>
		queue<span class="token operator">:</span> currentHook<span class="token punctuation">.</span>queue<span class="token punctuation">,</span>
		next<span class="token operator">:</span> <span class="token keyword">null</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressHook <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// update 时的第一个hook</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>currentlyRenderingFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			workInProgressHook <span class="token operator">=</span> newHook<span class="token punctuation">;</span>
			currentlyRenderingFiber<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> workInProgressHook<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// currentlyRenderingFiber == null 代表 Hook 执行的上下文不是一个函数组件</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Hooks 只能在函数组件中执行&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// update 时的其他 hook</span>
		<span class="token comment">// 将当前处理的 Hook.next 指向新建的 hook，形成 Hooks 链表</span>
		workInProgressHook<span class="token punctuation">.</span>next <span class="token operator">=</span> newHook<span class="token punctuation">;</span>
		<span class="token comment">// 更新当前处理的 Hook</span>
		workInProgressHook <span class="token operator">=</span> newHook<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> workInProgressHook<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就实现了单节点的更新流程。</p>`,6),N=n("code",null,"git tag v1.10",-1),P={href:"https://github.com/2xiao/my-react/tree/v1.10",target:"_blank",rel:"noopener noreferrer"};function D(T,I){const c=p("ExternalLinkIcon"),i=p("RouterLink"),u=p("CodeTabs");return k(),d("div",null,[m,n("div",b,[w,y,n("p",null,[s("相关代码可在 "),n("a",g,[f,t(c)]),s(" 查看")])]),n("p",null,[s("在"),t(i,{to:"/my-react/8.html"},{default:a(()=>[s("第 8 节")]),_:1}),s("中，我们已经完成了组件首次渲染时的 "),h,s(" 方法，现在我们将继续实现更新时的 "),F,s(" 方法。在更新流程和首次渲染流程中，存在一些关键区别：")]),_,t(u,{id:"209",data:[{id:"commitWork.ts"},{id:"hostConfig.ts"}]},{title0:a(({value:e,isActive:o})=>[s("commitWork.ts")]),title1:a(({value:e,isActive:o})=>[s("hostConfig.ts")]),tab0:a(({value:e,isActive:o})=>[H]),tab1:a(({value:e,isActive:o})=>[x]),_:1},8,["data"]),C,n("p",null,[s("相关代码可在 "),N,s(" 查看，地址："),n("a",P,[s("https://github.com/2xiao/my-react/tree/v1.10"),t(c)])])])}const W=r(v,[["render",D],["__file","10.html.vue"]]);export{W as default};
