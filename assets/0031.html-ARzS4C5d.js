import{_ as i,r as c,o as p,c as r,a as n,b as e,d as t,w as s,f as d,e as u}from"./app-mvY9N9Pc.js";const h={},m={id:"_31-下一个排列",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_31-下一个排列","aria-hidden":"true"},"#",-1),_={href:"https://leetcode.com/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"数组",-1),f=n("code",null,"双指针",-1),b={href:"https://leetcode.com/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A <strong>permutation</strong> of an array of integers is an arrangement of its members into a sequence or linear order.</p><ul><li>For example, for <code>arr = [1,2,3]</code>, the following are all the permutations of <code>arr</code>: <code>[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li></ul><p>The <strong>next permutation</strong> of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the <strong>next permutation</strong> of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p><ul><li>For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li><li>Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li><li>While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a lexicographical larger rearrangement.</li></ul><p>Given an array of integers <code>nums</code>, <em>find the next permutation of</em> <code>nums</code>.</p><p>The replacement must be <strong>[in place](http://en.wikipedia.org/wiki/In- place_algorithm)</strong> and use only constant extra memory.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3]</p><p>Output: [1,3,2]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [3,2,1]</p><p>Output: [1,2,3]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,1,5]</p><p>Output: [1,5,1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>整数数组的一个 <strong>排列</strong> 就是将其所有成员以序列或线性顺序排列。</p><ul><li>例如，<code>arr = [1,2,3]</code> ，以下这些都可以视作 <code>arr</code> 的排列：<code>[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1]</code> 。</li></ul><p>整数数组的 <strong>下一个排列</strong> 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 <strong>下一个排列</strong> 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p><ul><li>例如，<code>arr = [1,2,3]</code> 的下一个排列是 <code>[1,3,2]</code> 。</li><li>类似地，<code>arr = [2,3,1]</code> 的下一个排列是 <code>[3,1,2]</code> 。</li><li>而 <code>arr = [3,2,1]</code> 的下一个排列是 <code>[1,2,3]</code> ，因为 <code>[3,2,1]</code> 不存在一个字典序更大的排列。</li></ul><p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code> 的下一个排列。</p><p>必须 <strong>原地</strong> 修改，只允许使用额外常数空间。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>从后往前找到第一个下降点</strong>： <ul><li>从右向左扫描数组，找到第一个<strong>破坏升序</strong>的元素，也就是说，找到第一个位置 <code>i</code>，使得 <code>nums[i] &lt; nums[i + 1]</code>。这个位置 <code>i</code> 及其之前的元素是无法变得更大的，而我们可以通过调整 <code>i</code> 之后的元素来得到下一个更大的排列。</li></ul></li><li><strong>在 i 之后找到比 nums[i] 大的最小元素</strong>： <ul><li>继续从右向左扫描，找到第一个比 <code>nums[i]</code> 大的元素 <code>nums[j]</code>。交换 <code>nums[i]</code> 和 <code>nums[j]</code>，这样可以确保得到比当前排列大的下一个排列。</li></ul></li><li><strong>将 i 之后的元素翻转</strong>： <ul><li>由于 <code>i</code> 之后的部分是降序排列的（因为我们从后向前扫描），我们需要将这部分反转，变成升序排列，以获得字典序中下一个更大的排列。</li></ul></li><li><strong>特殊情况</strong>： <ul><li>如果整个数组是降序排列的，比如 <code>[3, 2, 1]</code>，那么我们已经处于字典序的最大排列，此时直接将整个数组反转为升序排列即可。</li></ul></li></ol><p>以数组 <code>[1, 2, 3, 4]</code> 为例：</p><ol><li><p>从后往前找到第一个下降点：</p><ul><li>从右向左看，<code>3 &lt; 4</code>，因此 <code>i = 2</code>（<code>nums[2] = 3</code>）。</li></ul></li><li><p>找到比 <code>3</code> 大的最小数：</p><ul><li>从右向左看，<code>4</code> 是比 <code>3</code> 大的最小数，所以 <code>j = 3</code>（<code>nums[3] = 4</code>）。</li><li>交换 <code>nums[i]</code> 和 <code>nums[j]</code>，即 <code>nums[2]</code> 和 <code>nums[3]</code> 交换，数组变为：<code>[1, 2, 4, 3]</code></li></ul></li><li><p>反转 <code>i</code> 之后的部分：</p><ul><li>现在 <code>i = 2</code>，<code>i</code> 之后的部分是 <code>[3]</code>。由于反转单个元素没有任何变化，所以反转后仍然是 <code>[3]</code>。</li></ul></li></ol><p>经过这三个步骤后，数组 <code>[1, 2, 3, 4]</code> 的下一个排列是： <code>[1, 2, 4, 3]</code></p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析：</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组的长度。我们从右向左扫描数组，最多扫描两次（一次找到下降点，一次找到交换点），然后再翻转一部分数组，所以整体复杂度是线性时间。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，因为只需要常数个额外的变量进行原地交换和反转操作，没有使用额外的数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">nextPermutation</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>

	<span class="token comment">// 从右向左找到第一个下降点</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 说明找到了第一个下降点</span>
		<span class="token keyword">let</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token comment">// 找到第一个比 nums[i] 大的数</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			j<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 交换 i 和 j 位置上的数</span>
		<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 翻转 i 之后的部分，使其变为升序</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		left<span class="token operator">++</span><span class="token punctuation">;</span>
		right<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,32),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),w=n("td",{style:{"text-align":"center"}},"46",-1),j={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/permutations",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},E={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0046",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"left"}},C=n("code",null,"数组",-1),L=n("code",null,"回溯",-1),N={style:{"text-align":"left"}},O=n("td",{style:{"text-align":"center"}},"47",-1),V={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/permutations-ii",target:"_blank",rel:"noopener noreferrer"},T={style:{"text-align":"center"}},F={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0047",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"left"}},S=n("code",null,"数组",-1),A=n("code",null,"回溯",-1),G={style:{"text-align":"left"}},H=n("td",{style:{"text-align":"center"}},"60",-1),P={style:{"text-align":"left"}},W={href:"https://leetcode.com/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"center"}},null,-1),D={style:{"text-align":"left"}},J=n("code",null,"递归",-1),K=n("code",null,"数学",-1),Q={style:{"text-align":"left"}},U=n("td",{style:{"text-align":"center"}},"267",-1),X={style:{"text-align":"left"}},Y={href:"https://leetcode.com/problems/palindrome-permutation-ii",target:"_blank",rel:"noopener noreferrer"},Z=n("td",{style:{"text-align":"center"}},null,-1),$={style:{"text-align":"left"}},nn=n("code",null,"哈希表",-1),tn=n("code",null,"字符串",-1),en=n("code",null,"回溯",-1),sn={style:{"text-align":"left"}},an=n("td",{style:{"text-align":"center"}},"1850",-1),on={style:{"text-align":"left"}},ln={href:"https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number",target:"_blank",rel:"noopener noreferrer"},cn=n("td",{style:{"text-align":"center"}},null,-1),pn={style:{"text-align":"left"}},rn=n("code",null,"贪心",-1),dn=n("code",null,"双指针",-1),un=n("code",null,"字符串",-1),hn={style:{"text-align":"left"}};function mn(kn,_n){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),r("div",null,[n("h1",m,[k,e(),n("a",_,[e("31. 下一个排列"),t(o)])]),n("p",null,[e("🟠 "),t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[g]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[f]),_:1}),e("  🔗 "),n("a",b,[v,t(o)])]),x,d(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,n("td",j,[n("a",I,[e("全排列"),t(o)])]),n("td",q,[n("a",E,[e("[✓]"),t(o)])]),n("td",M,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[C]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/backtracking.html"},{default:s(()=>[L]),_:1})]),n("td",N,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[O,n("td",V,[n("a",B,[e("全排列 II"),t(o)])]),n("td",T,[n("a",F,[e("[✓]"),t(o)])]),n("td",R,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[S]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/backtracking.html"},{default:s(()=>[A]),_:1})]),n("td",G,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[H,n("td",P,[n("a",W,[e("排列序列"),t(o)])]),z,n("td",D,[t(a,{to:"/leetcode/outline/tag/recursion.html"},{default:s(()=>[J]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[K]),_:1})]),n("td",Q,[t(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),n("tr",null,[U,n("td",X,[n("a",Y,[e("回文排列 II"),t(o)])]),Z,n("td",$,[t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[nn]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[tn]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/backtracking.html"},{default:s(()=>[en]),_:1})]),n("td",sn,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[an,n("td",on,[n("a",ln,[e("邻位交换的最小次数"),t(o)])]),cn,n("td",pn,[t(a,{to:"/leetcode/outline/tag/greedy.html"},{default:s(()=>[rn]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[dn]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[un]),_:1})]),n("td",hn,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const fn=i(h,[["render",mn],["__file","0031.html.vue"]]);export{fn as default};
