import{_ as p,r as c,o as i,c as r,a as n,b as t,d as s,w as a,f as u,e as d}from"./app-mvY9N9Pc.js";const k={},h={id:"_49-字母异位词分组",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_49-字母异位词分组","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"数组",-1),m=n("code",null,"哈希表",-1),b=n("code",null,"字符串",-1),v=n("code",null,"排序",-1),y={href:"https://leetcode.com/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p><p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;]</p><p>Output: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: strs = [&quot;&quot;]</p><p>Output: [[&quot;&quot;]]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: strs = [&quot;a&quot;]</p><p>Output: [[&quot;a&quot;]]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 10^4</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> consists of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><ul><li><code>strs[i]</code> 仅包含小写字母</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>异位词这类问题的关键在于，如何迅速判断两个字符串是异位词，主要考察数据编码和哈希表的使用。</p><p>可以尝试找到一种编码方法，使得字母异位词的编码相同？找到这种编码方式之后，就可以用一个哈希表存储编码相同的所有异位词，得到最终的答案。</p><p>对字符串排序可以是一种编码方案，如果是异位词，排序后就变成一样的了，但是这样时间复杂度略高，且会修改原始数据。</p><p>更好的编码方案是利用每个字符的出现次数进行编码，也就是下面的解法代码。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">strs</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">groupAnagrams</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> encodeStr <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>encodeStr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">[</span>encodeStr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		res<span class="token punctuation">[</span>encodeStr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">encode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> code <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		res<span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),E=n("td",{style:{"text-align":"center"}},"242",-1),C={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/valid-anagram",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"center"}},I={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0242",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"left"}},N=n("code",null,"哈希表",-1),S=n("code",null,"字符串",-1),V=n("code",null,"排序",-1),O={style:{"text-align":"left"}},B=n("td",{style:{"text-align":"center"}},"249",-1),M={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/group-shifted-strings",target:"_blank",rel:"noopener noreferrer"},G=n("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},T=n("code",null,"数组",-1),Y=n("code",null,"哈希表",-1),z=n("code",null,"字符串",-1),D={style:{"text-align":"left"}},F=n("td",{style:{"text-align":"center"}},"2273",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/find-resultant-array-after-removing-anagrams",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"center"}},null,-1),Q={style:{"text-align":"left"}},U=n("code",null,"数组",-1),W=n("code",null,"哈希表",-1),X=n("code",null,"字符串",-1),Z=n("code",null,"1+",-1),$={style:{"text-align":"left"}},nn=n("td",{style:{"text-align":"center"}},"2514",-1),tn={style:{"text-align":"left"}},sn={href:"https://leetcode.com/problems/count-anagrams",target:"_blank",rel:"noopener noreferrer"},an=n("td",{style:{"text-align":"center"}},null,-1),en={style:{"text-align":"left"}},on=n("code",null,"哈希表",-1),ln=n("code",null,"数学",-1),cn=n("code",null,"字符串",-1),pn=n("code",null,"2+",-1),rn={style:{"text-align":"left"}};function un(dn,kn){const o=c("ExternalLinkIcon"),l=c("font"),e=c("RouterLink");return i(),r("div",null,[n("h1",h,[_,t(),n("a",g,[t("49. 字母异位词分组"),s(o)])]),n("p",null,[t("🟠 "),s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1}),t("  🔖  "),s(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[f]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[m]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[b]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/sorting.html"},{default:a(()=>[v]),_:1}),t("  🔗 "),n("a",y,[x,s(o)])]),q,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[E,n("td",C,[n("a",j,[t("有效的字母异位词"),s(o)])]),n("td",A,[n("a",I,[t("[✓]"),s(o)])]),n("td",L,[s(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[N]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[S]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/sorting.html"},{default:a(()=>[V]),_:1})]),n("td",O,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[B,n("td",M,[n("a",R,[t("移位字符串分组"),s(o)])]),G,n("td",H,[s(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[T]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[Y]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[z]),_:1})]),n("td",D,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[F,n("td",J,[n("a",K,[t("移除字母异位词后的结果数组"),s(o)])]),P,n("td",Q,[s(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[U]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[W]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[X]),_:1}),t(),Z]),n("td",$,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[nn,n("td",tn,[n("a",sn,[t("统计同位异构字符串数目"),s(o)])]),an,n("td",en,[s(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[on]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/math.html"},{default:a(()=>[ln]),_:1}),t(),s(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[cn]),_:1}),t(),pn]),n("td",rn,[s(l,{color:"#ff334b"},{default:a(()=>[t("Hard")]),_:1})])])])])])}const _n=p(k,[["render",un],["__file","0049.html.vue"]]);export{_n as default};
