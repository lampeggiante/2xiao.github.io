import{_ as m}from"./2-6-10-GEaul7bj.js";import{_ as h,r,o as _,c as b,d as s,w as e,b as t,a as n,f as p,e as k}from"./app-5VBZs9Uu.js";const f="/assets/2-6-1-_jJk729L.png",v="/assets/2-6-2-5v377cba.png",g="/assets/2-6-3-JRML4jIi.png",y="/assets/2-6-4-L-oIO-zD.png",x="/assets/2-6-5-kPEW8S82.png",w="/assets/2-6-6-3FdOj8Fp.png",j="/assets/2-6-7-ja3CWOFJ.png",T="/assets/2-6-8-E2uKRyBr.png",S="/assets/2-6-9-BHhDWlBL.png",q="/assets/2-6-11-XdJeF-Sx.png",M="/assets/2-6-12-XSM2EmPJ.png",A="/assets/2-6-13-shSbkDov.png",L="/assets/2-6-14-Ca9Lswd_.png",B={},E=k('<h1 id="_2-6-树" tabindex="-1"><a class="header-anchor" href="#_2-6-树" aria-hidden="true">#</a> 2.6 树</h1><h2 id="树的定义" tabindex="-1"><a class="header-anchor" href="#树的定义" aria-hidden="true">#</a> 树的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>树（Tree）</strong> 是由 <code>n ≥ 0</code> 个节点与节点之间的关系组成的有限集合。当 <code>n = 0</code> 时称为空树，当 <code>n &gt; 0</code> 时称为非空树。。</p></div><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>“树”这种数据结构很像现实生活中的“树”，每个元素叫作“<strong>节点</strong>”；用来连线相邻节点之间的关系，叫作“<strong>父子关系</strong>”。</p><p>比如上图中的第三个树，A 节点就是 B 节点的<strong>父节点</strong>，B 节点是 A 节点的<strong>子节点</strong>。B、C、D 这三个节点的父节点是同一个节点，所以它们之间互称为<strong>兄弟节点</strong>。把没有父节点的节点叫作<strong>根节点</strong>，也就是图中的节点 E。把没有子节点的节点叫作<strong>叶子节点</strong>或者叶节点，比如图中的 G、H、I、J、K、L 都是叶子节点。</p><ul><li><strong>节点的高度</strong> ：节点到叶子节点的最长路径（边数）</li><li><strong>节点的深度</strong> ：根节点到这个节点所经历的变得个数</li><li><strong>节点的层数</strong> ：节点的深度 + 1</li><li><strong>节点的度</strong>： 节点所含有的子树个数</li><li><strong>树的高度</strong>：根节点的高度</li></ul><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>二叉树（Binary Tree）</strong> ：每个节点最多有两个子节点的树，称为二叉树。二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。通常树中的分支节点被称为 「左子树」 或 「右子树」，并且两个子树是有序的，不可以互换。</p></div><p>二叉树在逻辑上可以分为 5 种基本形态，如下图所示：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="满二叉树" tabindex="-1"><a class="header-anchor" href="#满二叉树" aria-hidden="true">#</a> 满二叉树</h3><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>满二叉树（Full Binary Tree）</strong> ：如果所有分支节点都存在左子树和右子树，并且所有叶子节点都在同一层上，则称该二叉树为满二叉树。</p></div><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h3><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>完全二叉树（Complete Binary Tree）</strong> ：如果叶子节点只出现在最下面两层，并且最下层的叶子节点都依次排列在该层最左边的位置上，具有这种特点的二叉树称为完全二叉树。</p></div><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二叉树的存储" tabindex="-1"><a class="header-anchor" href="#二叉树的存储" aria-hidden="true">#</a> 二叉树的存储</h2><p>存储一棵二叉树有两种方法，一种是基于指针或者引用的二叉链式存储，一种是基于数组的顺序存储。</p><h3 id="链式存储" tabindex="-1"><a class="header-anchor" href="#链式存储" aria-hidden="true">#</a> 链式存储</h3><p>链式存储中，每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针。只要拎住根节点，就可以通过左右子节点的指针，把整棵树都串起来。这种存储方式比较常用。大部分二叉树代码都是通过这种结构来实现的。</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="顺序存储" tabindex="-1"><a class="header-anchor" href="#顺序存储" aria-hidden="true">#</a> 顺序存储</h3><p>顺序存储中，把根节点存储在下标 <code>i = 1</code> 的位置，左子节点存储在下标 <code>2 * i = 2</code> 的位置，右子节点存储在 <code>2 * i + 1 = 3</code> 的位置。以此类推，B 节点的左子节点存储在 <code>2 * i = 2 * 2 = 4</code> 的位置，右子节点存储在 <code>2 * i + 1 = 2 * 2 + 1 = 5</code> 的位置。</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果节点 <code>X</code> 存储在数组中下标为 <code>i</code> 的位置，下标为 <code>2 * i</code> 的位置存储的就是左子节点，下标为 <code>2 * i + 1</code> 的位置存储的就是右子节点。反过来，下标为 <code>i / 2</code> 的位置存储就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为 <code>1</code> 的位置），这样就可以通过下标计算，把整棵树都串起来。</p><p>刚刚举的例子是一棵完全二叉树，所以仅仅“浪费”了一个下标为 <code>0</code> 的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间。</p><p>所以，如果某棵二叉树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树会单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。</p><p>堆就是一种完全二叉树，最常用的存储方式就是数组。</p><h2 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><p>想要将二叉树所有节点都遍历打印出来，经典的方法有三种，前序遍历、中序遍历和后序遍历。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。</p><ul><li><p><strong>前序遍历</strong> 是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</p></li><li><p><strong>中序遍历</strong> 是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。</p></li><li><p><strong>后序遍历</strong> 是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。</p></li></ul><figure><img src="'+T+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际上，二叉树的前、中、后序遍历就是一个递归的过程。写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键就是，如果要解决问题 A，就假设子问题 B、C 已经解决，然后再来看如何利用 B、C 来解决 A。递推公式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 前序遍历：</span>
<span class="token function-variable function">preOrder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">preOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">preOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 中序遍历：</span>
<span class="token function-variable function">inOrder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">inOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">inOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 后序遍历：</span>
<span class="token function-variable function">postOrder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">postOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">postOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二叉树的遍历中，每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数 <code>n</code> 成正比，即二叉树遍历的时间复杂度是 <code>O(n)</code> 。</p><h3 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历" aria-hidden="true">#</a> 前序遍历</h3>`,38),N={id:"📌-144-二叉树的前序遍历-leetcode",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#📌-144-二叉树的前序遍历-leetcode","aria-hidden":"true"},"#",-1),I={href:"https://2xiao.github.io/leetcode-js/problem/0144.html",target:"_blank",rel:"noopener noreferrer"},R=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),C=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"前序"),t(" 遍历。")],-1),z=n("p",null,[n("strong",null,"进阶"),t("：递归算法很简单，你可以通过迭代算法完成吗？")],-1),F=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),V=n("p",null,"思路一：递归",-1),H=n("p",null,"前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。而在访问左子树或者右子树的时候，按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，可以直接用递归函数来模拟这一过程。",-1),D=n("ul",null,[n("li",null,[t("先将 "),n("code",null,"root"),t(" 节点的值加入答案")]),n("li",null,[t("再递归调用 "),n("code",null,"preorderTraversal(root.left)"),t(" 来遍历 "),n("code",null,"root"),t(" 节点的左子树")]),n("li",null,[t("最后递归调用 "),n("code",null,"preorderTraversal(root.right)"),t(" 来遍历 "),n("code",null,"root"),t(" 节点的右子树即可")]),n("li",null,"递归终止的条件为碰到空节点")],-1),J=n("p",null,"思路二：迭代",-1),K=n("p",null,"也可以用迭代的方式实现思路一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。",-1),P=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),W=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [144. 二叉树的前序遍历 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0144.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"前序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),t(`：递归算法很简单，你可以通过迭代算法完成吗？

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：递归

前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。而在访问左子树或者右子树的时候，按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，可以直接用递归函数来模拟这一过程。

`),n("span",{class:"token list punctuation"},"-"),t(" 先将 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 节点的值加入答案
`),n("span",{class:"token list punctuation"},"-"),t(" 再递归调用 "),n("span",{class:"token code-snippet code keyword"},"`preorderTraversal(root.left)`"),t(" 来遍历 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 节点的左子树
`),n("span",{class:"token list punctuation"},"-"),t(" 最后递归调用 "),n("span",{class:"token code-snippet code keyword"},"`preorderTraversal(root.right)`"),t(" 来遍历 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 节点的右子树即可
`),n("span",{class:"token list punctuation"},"-"),t(` 递归终止的条件为碰到空节点

思路二：迭代

也可以用迭代的方式实现思路一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 递归

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 迭代

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("h3",{id:"后序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#后序遍历","aria-hidden":"true"},"#"),t(" 后序遍历")],-1),G={id:"📌-145-二叉树的后序遍历-leetcode",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#📌-145-二叉树的后序遍历-leetcode","aria-hidden":"true"},"#",-1),Y={href:"https://2xiao.github.io/leetcode-js/problem/0145.html",target:"_blank",rel:"noopener noreferrer"},Z=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),nn=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"后序"),t(" 遍历。")],-1),tn=n("p",null,[n("strong",null,"进阶"),t("：递归算法很简单，你可以通过迭代算法完成吗？")],-1),sn=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),en=n("p",null,"思路一：递归",-1),an=n("p",null,"原理和前序遍历一样，前序遍历是中左右，后续遍历是左右中。",-1),on=n("p",null,"思路二：迭代",-1),ln=n("p",null,"原理和前序遍历一样，只需要调整一下前序遍历的代码顺序，变成中右左，然后再反转 res 数组，输出的结果顺序就是左右中了。",-1),cn=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),pn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unshift"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [145. 二叉树的后序遍历 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0145.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"后序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),t(`：递归算法很简单，你可以通过迭代算法完成吗？

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：递归

原理和前序遍历一样，前序遍历是中左右，后续遍历是左右中。

思路二：迭代

原理和前序遍历一样，只需要调整一下前序遍历的代码顺序，变成中右左，然后再反转 res 数组，输出的结果顺序就是左右中了。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 递归

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 迭代

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unshift"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),dn=n("h3",{id:"中序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中序遍历","aria-hidden":"true"},"#"),t(" 中序遍历")],-1),kn={id:"📌-94-二叉树的中序遍历-leetcode",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#📌-94-二叉树的中序遍历-leetcode","aria-hidden":"true"},"#",-1),hn={href:"https://2xiao.github.io/leetcode-js/problem/0094.html",target:"_blank",rel:"noopener noreferrer"},_n=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),bn=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"中序"),t(" 遍历。")],-1),fn=n("p",null,[n("strong",null,"进阶"),t("：递归算法很简单，你可以通过迭代算法完成吗？")],-1),vn=n("h4",{id:"💡-解题思路-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-2","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),gn=n("p",null,"思路一：递归",-1),yn=n("p",null,"原理和前序遍历一样，前序遍历是中左右，中续遍历是左中右。",-1),xn=n("p",null,"思路二：迭代",-1),wn=n("p",null,"中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 res 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。",-1),jn=n("h4",{id:"💎-代码-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-2","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),Tn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Sn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" cur "),n("span",{class:"token operator"},"="),t(" root"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),t(),n("span",{class:"token operator"},"||"),t(" stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),qn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [94. 二叉树的中序遍历 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0094.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"中序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),t(`：递归算法很简单，你可以通过迭代算法完成吗？

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：递归

原理和前序遍历一样，前序遍历是中左右，中续遍历是左中右。

思路二：迭代

中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 res 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 递归

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 迭代

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" cur "),n("span",{class:"token operator"},"="),t(" root"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),t(),n("span",{class:"token operator"},"||"),t(" stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Mn=n("h3",{id:"层序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#层序遍历","aria-hidden":"true"},"#"),t(" 层序遍历")],-1),An={id:"📌-102-二叉树的层序遍历-leetcode",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#📌-102-二叉树的层序遍历-leetcode","aria-hidden":"true"},"#",-1),Bn={href:"https://2xiao.github.io/leetcode-js/problem/0102.html",target:"_blank",rel:"noopener noreferrer"},En=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),Nn=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"层序"),t(" 遍历。（即逐层地，从左到右访问所有节点）。")],-1),On=n("h4",{id:"💡-解题思路-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-3","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),In=n("p",null,"思路一：广度优先遍历(BFS)",-1),Rn=n("p",null,"使用队列实现",-1),Cn=n("ol",null,[n("li",null,"首先将根节点放入队列中；"),n("li",null,[t("更新队列的长度 "),n("code",null,"len"),t(" ，遍历队列的前 "),n("code",null,"len"),t(" 个节点；")]),n("li",null,"如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；"),n("li",null,[t("将队列的前 "),n("code",null,"len"),t(" 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；")]),n("li",null,"重复步骤 2、3、4，直至队列为空；")],-1),zn=n("p",null,"思路二：深度优先遍历(DFS)",-1),Fn=n("ol",null,[n("li",null,"维护一个递归函数，参数为节点和该节点的深度"),n("li",null,"先将根节点与深度 0 传入递归函数"),n("li",null,"将节点放入 index 与深度对应的数组内"),n("li",null,"将节点的左子节点和右子节点分别传入递归函数，深度 +1"),n("li",null,"重复步骤 3、4，直至子节点为空")],-1),Vn=n("h4",{id:"💎-代码-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-3","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),Hn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" queue "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" len "),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" temp "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" len"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			temp`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		queue `),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("len"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("temp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Dn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"traverse"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("node"),n("span",{class:"token punctuation"},","),t(" deep")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("res"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(" deep"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Jn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [102. 二叉树的层序遍历 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0102.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"层序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。（即逐层地，从左到右访问所有节点）。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：广度优先遍历(BFS)

使用队列实现

`),n("span",{class:"token list punctuation"},"1."),t(` 首先将根节点放入队列中；
`),n("span",{class:"token list punctuation"},"2."),t(" 更新队列的长度 "),n("span",{class:"token code-snippet code keyword"},"`len`"),t(" ，遍历队列的前 "),n("span",{class:"token code-snippet code keyword"},"`len`"),t(` 个节点；
`),n("span",{class:"token list punctuation"},"3."),t(` 如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；
`),n("span",{class:"token list punctuation"},"4."),t(" 将队列的前 "),n("span",{class:"token code-snippet code keyword"},"`len`"),t(` 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；
`),n("span",{class:"token list punctuation"},"5."),t(` 重复步骤 2、3、4，直至队列为空；

思路二：深度优先遍历(DFS)

`),n("span",{class:"token list punctuation"},"1."),t(` 维护一个递归函数，参数为节点和该节点的深度
`),n("span",{class:"token list punctuation"},"2."),t(` 先将根节点与深度 0 传入递归函数
`),n("span",{class:"token list punctuation"},"3."),t(` 将节点放入 index 与深度对应的数组内
`),n("span",{class:"token list punctuation"},"4."),t(` 将节点的左子节点和右子节点分别传入递归函数，深度 +1
`),n("span",{class:"token list punctuation"},"5."),t(` 重复步骤 3、4，直至子节点为空

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 广度优先遍历(BFS)

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" queue "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" len "),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" temp "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" len"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			temp`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		queue `),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("len"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("temp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 深度优先遍历(DFS)

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"traverse"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("node"),n("span",{class:"token punctuation"},","),t(" deep")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("res"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(" deep"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Kn=k('<h2 id="二叉树的还原" tabindex="-1"><a class="header-anchor" href="#二叉树的还原" aria-hidden="true">#</a> 二叉树的还原</h2><p>二叉树的还原：指的是通过二叉树的遍历序列，还原出对应的二叉树。</p><p>单凭 前序遍历序列 或 后序遍历序列 或 中序遍历序列 是 <strong>无法</strong> 恢复一棵二叉树的。</p><p>但是，如果已知一棵二叉树的<strong>前序序列和中序序列，可以唯一地确定</strong>这棵二叉树；如果已知一棵二叉树的<strong>中序序列和后序序列，可以唯一地确定</strong>这棵二叉树。</p><p>需要注意的是：如果已知二叉树的<strong>前序序列和后序序列，不能唯一地确定</strong>一棵二叉树。这是因为没有中序遍历序列无法确定左右部分，也就无法进行子序列的分割。</p><p>二叉树的构造问题一般都是使用「分解问题」的思路：<strong>构造整棵树 = 根节点 + 构造左子树 + 构造右子树</strong>。</p>',6),Pn={id:"📌-105-从前序与中序遍历序列构造二叉树-leetcode",tabindex:"-1"},Wn=n("a",{class:"header-anchor",href:"#📌-105-从前序与中序遍历序列构造二叉树-leetcode","aria-hidden":"true"},"#",-1),Xn={href:"https://2xiao.github.io/leetcode-js/problem/0105.html",target:"_blank",rel:"noopener noreferrer"},Un=n("h4",{id:"💻-题目大意-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-4","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),$n=n("p",null,"根据一棵树的前序遍历与中序遍历构造二叉树。你可以假设树中没有重复的元素。",-1),Gn=n("h4",{id:"💡-解题思路-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-4","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),Qn=n("p",null,"构造二叉树，第一件事一定是找根节点，然后想办法构造左右子树。",-1),Yn=n("p",null,"前序遍历结果第一个就是根节点的值，然后再根据中序遍历结果确定左右子树的节点。",-1),Zn=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),nt=n("p",null,"不断的递归直到所有的树都生成完成。",-1),tt=n("p",null,"递归时直接传入需要的 slice 范围作为输入, 可以避免申请对应 inorder 索引的内存。",-1),st=n("h4",{id:"💎-代码-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-4","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),et=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"buildTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("preorder"),n("span",{class:"token punctuation"},","),t(" inorder")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" preorder"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("inorder"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"==="),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),at={href:"https://2xiao.github.io/leetcode-js/problem/0106.html",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://2xiao.github.io/leetcode-js/problem/0889.html",target:"_blank",rel:"noopener noreferrer"},lt=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [105. 从前序与中序遍历序列构造二叉树 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0105.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

根据一棵树的前序遍历与中序遍历构造二叉树。你可以假设树中没有重复的元素。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

构造二叉树，第一件事一定是找根节点，然后想办法构造左右子树。

前序遍历结果第一个就是根节点的值，然后再根据中序遍历结果确定左右子树的节点。

![](../../../assets/image/2-6-10.png)

不断的递归直到所有的树都生成完成。

递归时直接传入需要的 slice 范围作为输入, 可以避免申请对应 inorder 索引的内存。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"buildTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("preorder"),n("span",{class:"token punctuation"},","),t(" inorder")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" preorder"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("inorder"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"==="),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

类似的题目还有 `),n("span",{class:"token url"},[t("["),n("span",{class:"token content"},"106. 从中序与后序遍历序列构造二叉树 - LeetCode"),t("]("),n("span",{class:"token url"},"https://2xiao.github.io/leetcode-js/problem/0106.html"),t(")")]),t(" 和 "),n("span",{class:"token url"},[t("["),n("span",{class:"token content"},"889. 根据前序和后序遍历构造二叉树 - LeetCode"),t("]("),n("span",{class:"token url"},"https://2xiao.github.io/leetcode-js/problem/0889.html"),t(")")]),t(`，原理类似，详见题解。
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ct={id:"📌-654-最大二叉树-leetcode",tabindex:"-1"},it=n("a",{class:"header-anchor",href:"#📌-654-最大二叉树-leetcode","aria-hidden":"true"},"#",-1),pt={href:"https://2xiao.github.io/leetcode-js/problem/0654.html",target:"_blank",rel:"noopener noreferrer"},ut=n("h4",{id:"💻-题目大意-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-5","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),rt=n("p",null,[t("给定一个不重复的整数数组 "),n("code",null,"nums"),t(" 。 最大二叉树 可以用下面的算法从 "),n("code",null,"nums"),t(" 递归地构建:")],-1),dt=n("ol",null,[n("li",null,[t("创建一个根节点，其值为 "),n("code",null,"nums"),t(" 中的最大值。")]),n("li",null,"递归地在最大值 左边 的 子数组前缀上 构建左子树。"),n("li",null,"递归地在最大值 右边 的 子数组后缀上 构建右子树。")],-1),kt=n("p",null,[t("返回 "),n("code",null,"nums"),t(" 构建的 最大二叉树 。")],-1),mt=n("p",null,[n("strong",null,"示例 1"),t("：")],-1),ht=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_t=n("p",null,[n("strong",null,"解释"),t("：递归调用如下所示：")],-1),bt=n("ul",null,[n("li",null,[t("[3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。 "),n("ul",null,[n("li",null,[t("[3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。 "),n("ul",null,[n("li",null,"空数组，无子节点。"),n("li",null,[t("[2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。 "),n("ul",null,[n("li",null,"空数组，无子节点。"),n("li",null,"只有一个元素，所以子节点是一个值为 1 的节点。")])])])]),n("li",null,[t("[0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。 "),n("ul",null,[n("li",null,"只有一个元素，所以子节点是一个值为 0 的节点。"),n("li",null,"空数组，无子节点。")])])])])],-1),ft=n("p",null,[n("strong",null,"示例 2"),t("：")],-1),vt=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`输入：nums = [3,2,1]
输出：[3,null,2,null,1]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gt=n("h4",{id:"💡-解题思路-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-5","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),yt=n("p",null,"每个二叉树节点都可以认为是一棵子树的根节点，对于根节点，首先要做的当然是把想办法把自己先构造出来，然后想办法构造自己的左右子树。",-1),xt=n("p",null,[t("所以，我们要遍历数组把找到最大值 "),n("code",null,"max"),t("，从而把根节点 "),n("code",null,"root"),t(" 做出来，然后对 "),n("code",null,"max"),t(" 左边的数组和右边的数组进行递归构建，作为 "),n("code",null,"root"),t(" 的左右子树。")],-1),wt=n("h4",{id:"💎-代码-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-5","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),jt=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"constructMaximumBinaryTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" max "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" maxIndex "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" nums"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},">"),t(" max"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			max `),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
			maxIndex `),n("span",{class:"token operator"},"="),t(" i"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("max"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" maxIndex"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("maxIndex "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Tt=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [654. 最大二叉树 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0654.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给定一个不重复的整数数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 。 最大二叉树 可以用下面的算法从 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 递归地构建:

`),n("span",{class:"token list punctuation"},"1."),t(" 创建一个根节点，其值为 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 中的最大值。
`),n("span",{class:"token list punctuation"},"2."),t(` 递归地在最大值 左边 的 子数组前缀上 构建左子树。
`),n("span",{class:"token list punctuation"},"3."),t(` 递归地在最大值 右边 的 子数组后缀上 构建右子树。

返回 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 构建的 最大二叉树 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1"),n("span",{class:"token punctuation"},"**")]),t(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),t(`
`),n("span",{class:"token code-block"},`输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]`),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"解释"),n("span",{class:"token punctuation"},"**")]),t(`：递归调用如下所示：

`),n("span",{class:"token list punctuation"},"-"),t(` [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。
  `),n("span",{class:"token list punctuation"},"-"),t(` [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。
    `),n("span",{class:"token list punctuation"},"-"),t(` 空数组，无子节点。
    `),n("span",{class:"token list punctuation"},"-"),t(` [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。
      `),n("span",{class:"token list punctuation"},"-"),t(` 空数组，无子节点。
      `),n("span",{class:"token list punctuation"},"-"),t(` 只有一个元素，所以子节点是一个值为 1 的节点。
  `),n("span",{class:"token list punctuation"},"-"),t(` [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。
    `),n("span",{class:"token list punctuation"},"-"),t(` 只有一个元素，所以子节点是一个值为 0 的节点。
    `),n("span",{class:"token list punctuation"},"-"),t(` 空数组，无子节点。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2"),n("span",{class:"token punctuation"},"**")]),t(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),t(`
`),n("span",{class:"token code-block"},`输入：nums = [3,2,1]
输出：[3,null,2,null,1]`),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

每个二叉树节点都可以认为是一棵子树的根节点，对于根节点，首先要做的当然是把想办法把自己先构造出来，然后想办法构造自己的左右子树。

所以，我们要遍历数组把找到最大值 `),n("span",{class:"token code-snippet code keyword"},"`max`"),t("，从而把根节点 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" 做出来，然后对 "),n("span",{class:"token code-snippet code keyword"},"`max`"),t(" 左边的数组和右边的数组进行递归构建，作为 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 的左右子树。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"constructMaximumBinaryTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" max "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" maxIndex "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" nums"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},">"),t(" max"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			max `),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
			maxIndex `),n("span",{class:"token operator"},"="),t(" i"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("max"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" maxIndex"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("maxIndex "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),St=k('<h2 id="二叉查找树" tabindex="-1"><a class="header-anchor" href="#二叉查找树" aria-hidden="true">#</a> 二叉查找树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>二叉查找树（Binary Search Tree）</strong> ：也叫二叉搜索树，在二叉查找树中，每个节点的左子树节点值都小于该节点的值，而右子树节点值都大于该节点的值。</p></div><p>下图是几个二叉查找树的例子：</p><figure><img src="'+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>二叉查找树（BST）是二叉树中最常用的一种类型。二叉查找树最大的特点就是，支持动态数据集合的快速插入、删除、查找操作。在实际应用中常用于快速查找和有序插入的场景，具有良好的平均时间复杂度。</p><p>下面我们来看下，这些操作是如何实现的。</p><p>首先，我们需要定义二叉查找树的节点：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>TreeNode</code> 类代表了二叉查找树中的一个节点，包括节点的值、左子树和右子树。</p><p>接下来，我们创建一个 <code>BinarySearchTree</code> 类，用于实现二叉查找树的基本操作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// ...(各种操作方法)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-插入操作" tabindex="-1"><a class="header-anchor" href="#_1-插入操作" aria-hidden="true">#</a> 1. 插入操作</h3><p>插入操作是向二叉查找树中插入新值的过程，通常涉及递归，因为我们需要找到新节点应该放置的位置。以下是增加节点的原理：</p><ol><li>如果树为空（即根节点为 <code>null</code>），则新节点将成为树的根。</li><li>如果树不为空，我们从树的根节点开始，比较新节点的值与当前节点的值。 <ul><li>如果新节点的值小于当前节点的值，则递归地将新节点插入到当前节点的左子树中。</li><li>如果新节点的值大于当前节点的值，则递归地将新节点插入到当前节点的右子树中。</li><li>如果新节点的值等于当前节点的值，通常可以选择将新节点丢弃，或者将其放在左子树或右子树中，取决于具体的实现策略。</li></ul></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_insert</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查找操作" tabindex="-1"><a class="header-anchor" href="#_2-查找操作" aria-hidden="true">#</a> 2. 查找操作</h3><p>查找操作是在二叉查找树中搜索特定值的过程。它是通过递归地比较节点的值和目标值来实现的。以下是查找节点的原理：</p><ol><li><p>从根节点开始，比较目标值与当前节点的值。</p><ul><li>如果目标值小于当前节点的值，则在左子树中继续查找。</li><li>如果目标值大于当前节点的值，则在右子树中继续查找。</li><li>如果目标值等于当前节点的值，找到了目标节点。</li></ul></li><li><p>重复上述步骤，直到找到目标节点或达到叶子节点（节点没有左子树和右子树）为止。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_search</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_search</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node <span class="token operator">||</span> node<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个基本操作是二叉查找树的核心。通过递归的方式，我们能够有效地在树中进行插入和查找操作。</p><h3 id="_3-删除操作" tabindex="-1"><a class="header-anchor" href="#_3-删除操作" aria-hidden="true">#</a> 3. 删除操作</h3><p>为了删除一个节点，我们需要分几种情况讨论：</p><ol><li>如果节点是叶子节点（没有左子树和右子树），直接删除即可。</li><li>如果节点只有一个子节点，将该节点替换为其子节点。</li><li>如果节点有两个子节点，找到右子树中的最小值节点，用该节点的值替换要删除的节点的值，然后递归地删除右子树中的最小值节点。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_delete</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Node to be deleted found</span>

			<span class="token comment">// Case 1 &amp; 2: No child or one child</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// Case 3: Two children</span>
			<span class="token keyword">const</span> minRight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_findMin</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
			node<span class="token punctuation">.</span>value <span class="token operator">=</span> minRight<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
			node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minRight<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_findMin</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-遍历操作" tabindex="-1"><a class="header-anchor" href="#_4-遍历操作" aria-hidden="true">#</a> 4. 遍历操作</h3><p>二叉查找树的遍历操作包括前序遍历、中序遍历和后序遍历，每一种遍历方式都有其特定的应用场景。</p><p>中序遍历是二叉查找树最常用的遍历方式。它按照从小到大的顺序遍历树中的节点，<strong>输出结果是有序的，时间复杂度是 O(n)，非常高效</strong> 。因此，二叉查找树也叫作二叉排序树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历的时间复杂度是 <code>O(n)</code>，其中 <code>n</code> 是树中节点的数量，这是因为遍历需要访问所有节点。</p><details class="hint-container details"><summary>👉 查看代码测试 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建二叉查找树</span>
<span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 插入节点</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查找节点</span>
<span class="token keyword">const</span> searchResult <span class="token operator">=</span> bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>searchResult <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>searchResult<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;Not Found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中序遍历</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nIn-order traversal:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除节点</span>
bst<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中序遍历查看删除后的结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nIn-order traversal after deletion:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行结果：</span>
<span class="token comment">// Found: 4</span>

<span class="token comment">// In-order traversal:</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
<span class="token comment">// 7</span>
<span class="token comment">// 8</span>

<span class="token comment">// In-order traversal after deletion:</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
<span class="token comment">// 7</span>
<span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>除了插入、删除、查找、遍历操作之外，二叉查找树还可以支持快速地查找最大节点和最小节点、前驱节点和后继节点。</p><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h3><ul><li>平均情况下，二叉查找树的插入、查找和删除操作的时间复杂度是 <code>O(log n)</code>。</li><li>最坏情况下，如果树是非平衡的，这些操作的时间复杂度会退化到 <code>O(n)</code>。</li><li>遍历操作的时间复杂度始终为 <code>O(n)</code>，因为需要访问所有节点。</li></ul><p>因此，保持二叉查找树的平衡对于维护高效性能是非常重要的。平衡二叉查找树的实现（如 AVL 树或红黑树）确保了在各种操作中都能保持较小的树高度，从而提供了可靠的性能。</p><h2 id="平衡二叉查找树" tabindex="-1"><a class="header-anchor" href="#平衡二叉查找树" aria-hidden="true">#</a> 平衡二叉查找树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>平衡二叉查找树（Balanced Binary Search Tree）</strong> ：是一种特殊的二叉查找树，其所有节点满足以下平衡性质：对于树中的每个节点，其左子树和右子树的高度差不超过 <code>1</code> 。</p></div><figure><img src="`+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在非平衡的二叉查找树中，最坏情况下可能会导致树的高度接近线性，使得查找、插入和删除等操作的时间复杂度变为 <code>O(n)</code> 。而平衡二叉查找树能够保持较小的高度，确保这些操作的平均时间复杂度保持在 <code>O(log n)</code> 水平，提高了性能。</p><p>通过自动保持树的平衡性，确保在各种操作中具有较低的时间复杂度。常见的平衡二叉查找树实现包括 AVL 树和红黑树。</p><p>学习 AVL 树和红黑树的关键在于理解它们的平衡性质、平衡因子以及插入、删除等操作时的调整策略。</p><h3 id="avl-树" tabindex="-1"><a class="header-anchor" href="#avl-树" aria-hidden="true">#</a> AVL 树</h3><p>AVL 树是一种自平衡二叉查找树，由两位前苏联的数学家 Adelson-Velsky 和 Landis 在 1962 年提出。AVL 树通过在每次插入或删除操作后进行旋转操作，保持了树的平衡性。</p><h4 id="平衡因子" tabindex="-1"><a class="header-anchor" href="#平衡因子" aria-hidden="true">#</a> 平衡因子</h4><p>在 AVL 树中，每个节点都有一个平衡因子（Balance Factor），定义为其左子树的高度减去右子树的高度。平衡因子的值只能是 <code>-1</code>、<code>0</code> 或 <code>1</code>。平衡因子的目标是保持所有节点的平衡因子在这个范围内。通过旋转操作，AVL 树确保所有节点的平衡因子在这个范围内，从而保持平衡。</p><h4 id="插入操作" tabindex="-1"><a class="header-anchor" href="#插入操作" aria-hidden="true">#</a> 插入操作</h4><p>在插入新节点时，需要逐级更新从插入点到树根的所有节点的平衡因子，并检查是否破坏了 AVL 树的平衡性。如果发现某个节点的平衡因子超出了范围，就需要通过旋转操作来修复。</p><h4 id="旋转操作" tabindex="-1"><a class="header-anchor" href="#旋转操作" aria-hidden="true">#</a> 旋转操作</h4><p>AVL 树通过四种基本的旋转操作来维护平衡：</p><ol><li><strong>左旋（Left Rotation）：</strong> 将一个节点的右子树提升为新的根，原根成为新根的左子树。</li><li><strong>右旋（Right Rotation）：</strong> 将一个节点的左子树提升为新的根，原根成为新根的右子树。</li><li><strong>左-右旋转（Left-Right Rotation）：</strong> 先对左子树进行左旋，然后再对根节点进行右旋。</li><li><strong>右-左旋转（Right-Left Rotation）：</strong> 先对右子树进行右旋，然后再对根节点进行左旋。</li></ol><p>通过这些旋转操作，AVL 树能够在插入节点后保持平衡。</p><h3 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h3><p>红黑树（Red-Black Tree）简称 R-B Tree，是另一种自平衡二叉查找树，它引入了颜色标记来确保平衡性，每个节点都被标记为红色或黑色。红黑树的平衡性质主要通过以下几点来维护：</p><ol><li><strong>根节点是黑色的。</strong></li><li><strong>所有叶子节点（NIL 节点）都是黑色的。</strong></li><li><strong>如果一个节点是红色的，则它的两个子节点都是黑色的。</strong></li><li><strong>从任意节点到其每个叶子的路径都包含相同数量的黑色节点。</strong></li></ol><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="插入操作-1" tabindex="-1"><a class="header-anchor" href="#插入操作-1" aria-hidden="true">#</a> 插入操作</h4><p>在红黑树中，插入节点时，首先按照二叉查找树的方式插入节点，然后通过一系列的颜色调整和旋转来保持红黑树的性质。</p><h4 id="旋转操作-1" tabindex="-1"><a class="header-anchor" href="#旋转操作-1" aria-hidden="true">#</a> 旋转操作</h4><p>红黑树的旋转操作包括左旋和右旋，与 AVL 树相似。旋转操作的目的是通过重新组织树的结构来保持平衡性。</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>红黑树相对于 AVL 树的优势在于，由于不需要保持严格的平衡，红黑树的旋转操作较少，插入和删除节点时的性能更为稳定。</p><p>红黑树的高度近似 <code>2log n</code>，所以它是近似平衡，插入、删除、查找操作的时间复杂度都是 <code>O(log n)</code>。</p><h2 id="线段树" tabindex="-1"><a class="header-anchor" href="#线段树" aria-hidden="true">#</a> 线段树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>线段树（Segment Tree）</strong> ：是一种解决范围查询问题的数据结构，主要用于处理数组中的子区间问题，如范围和、最小值、最大值等。</p></div><p>线段树是一种高效的数据结构，特别适用于需要频繁进行范围查询操作的场景。</p><figure><img src="'+L+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="构建线段树" tabindex="-1"><a class="header-anchor" href="#构建线段树" aria-hidden="true">#</a> 构建线段树</h3><p>线段树的节点通常包含以下信息：</p><ul><li><code>start</code>：表示节点对应区间的起始位置。</li><li><code>end</code>：表示节点对应区间的结束位置。</li><li><code>sum</code>、<code>min</code>、<code>max</code> 等：表示节点对应区间的信息。</li></ul><p>以下是一个简单的线段树节点的 JavaScript 实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建线段树的过程涉及将数组划分为不同的区间，并在每个节点上存储对应区间的信息。</p><p>线段树通常被构造为满二叉树，它的高度是对数级别的，从而使得范围查询的时间复杂度保持在 <code>O(log n)</code> 的水平，其中 <code>n</code> 是待处理区间的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
	root<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
	root<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>

	<span class="token comment">// 根据具体问题更新根节点的信息</span>
	root<span class="token punctuation">.</span>sum <span class="token operator">=</span> left<span class="token punctuation">.</span>sum <span class="token operator">+</span> right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>

	<span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新操作" tabindex="-1"><a class="header-anchor" href="#更新操作" aria-hidden="true">#</a> 更新操作</h3><p>更新操作用于修改原始数组的值，并相应地更新线段树节点的信息。通常使用递归实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">===</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		root<span class="token punctuation">.</span>sum <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">+</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 更新根节点的信息</span>
	root<span class="token punctuation">.</span>sum <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询操作" tabindex="-1"><a class="header-anchor" href="#查询操作" aria-hidden="true">#</a> 查询操作</h3><p>查询操作用于获取数组某个范围内的信息，比如求和、最小值、最大值等。同样使用递归实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> queryStart<span class="token punctuation">,</span> queryEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>end <span class="token operator">&lt;</span> queryStart <span class="token operator">||</span> root<span class="token punctuation">.</span>start <span class="token operator">&gt;</span> queryEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">&gt;=</span> queryStart <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>end <span class="token operator">&lt;=</span> queryEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> root<span class="token punctuation">.</span>sum<span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">+</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> leftSum <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> queryStart<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> queryEnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> rightSum <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> queryStart<span class="token punctuation">)</span><span class="token punctuation">,</span> queryEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,79),qt={id:"📌-307-区域和检索-数组可修改-leetcode",tabindex:"-1"},Mt=n("a",{class:"header-anchor",href:"#📌-307-区域和检索-数组可修改-leetcode","aria-hidden":"true"},"#",-1),At={href:"https://2xiao.github.io/leetcode-js/problem/0307.html",target:"_blank",rel:"noopener noreferrer"},Lt=n("h4",{id:"💻-题目大意-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-6","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),Bt=n("p",null,[t("给定一个整数数组 "),n("code",null,"nums"),t("，请你完成两类查询：")],-1),Et=n("ol",null,[n("li",null,[n("strong",null,"更新"),t(" 数组 "),n("code",null,"nums"),t(" 下标对应的值")]),n("li",null,[t("返回数组 "),n("code",null,"nums"),t(" 中索引 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t(" （包含 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t("）之间的 "),n("code",null,"nums"),t(" 元素的 "),n("strong",null,"和"),t(" ，其中 "),n("code",null,"left <= right")])],-1),Nt=n("p",null,[t("实现 "),n("code",null,"NumArray"),t(" 类：")],-1),Ot=n("ul",null,[n("li",null,[n("code",null,"NumArray(int[] nums)"),t(" 使用数组 "),n("code",null,"nums"),t(" 初始化对象")]),n("li",null,[n("code",null,"void update(int index, int val)"),t(" 将 "),n("code",null,"nums[index]"),t(" 的值 "),n("strong",null,"更新"),t(" 为 "),n("code",null,"val")]),n("li",null,[n("code",null,"int sumRange(int i, int j)"),t(" 返回数组 "),n("code",null,"nums"),t(" 中索引 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t(" 之间的元素的 总和 ，包含 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t(" 两点（也就是 "),n("code",null,"nums[left] + nums[left + 1] + ... + nums[right]"),t(" ）")])],-1),It=n("p",null,[n("strong",null,"示例 ：")],-1),Rt=n("blockquote",null,[n("p",null,"输入："),n("p",null,'["NumArray", "sumRange", "update", "sumRange"]'),n("p",null,"[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]"),n("p",null,"输出："),n("p",null,"[null, 9, null, 8]"),n("p",null,"解释："),n("p",null,"NumArray numArray = new NumArray([1, 3, 5]);"),n("p",null,"numArray.sumRange(0, 2); // 返回 1 + 3 + 5 = 9"),n("p",null,"numArray.update(1, 2); // nums = [1,2,5]"),n("p",null,"numArray.sumRange(0, 2); // 返回 1 + 2 + 5 = 8")],-1),Ct=n("h4",{id:"💡-解题思路-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-6","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),zt=n("p",null,"可以通过线段树来解决：",-1),Ft=n("ol",null,[n("li",null,[n("p",null,[n("strong",null,"初始化："),t(" 在 "),n("code",null,"NumArray"),t(" 类的构造函数中，首先将输入的数组 "),n("code",null,"nums"),t(" 存储起来，并构建一个线段树，表示整个数组的和。每个线段树节点包含一个区间的起始位置、结束位置和该区间的和。")])]),n("li",null,[n("p",null,[n("strong",null,"更新操作："),t(" 当调用 "),n("code",null,"update"),t(" 方法时，根据给定的索引和新的值，更新数组 "),n("code",null,"nums"),t(" 对应位置的值，并在线段树中更新对应的节点的值。这个更新过程是通过递归地向下更新线段树节点实现的。")])]),n("li",null,[n("p",null,[n("strong",null,"区间和查询："),t(" 当调用 "),n("code",null,"sumRange"),t(" 方法时，需要查询数组中指定区间 "),n("code",null,"[i, j]"),t(" 的和。在线段树中，可以通过递归地查询左右子树来获得区间 "),n("code",null,"[i, j]"),t(" 的和：")]),n("ul",null,[n("li",null,[t("如果当前节点的区间完全包含在 "),n("code",null,"[i, j]"),t(" 中，则直接返回该节点的和。")]),n("li",null,[t("否则，根据当前节点的中点将查询区间 "),n("code",null,"[i, j]"),t(" 分为左右两部分，递归地查询左右子树，并将两部分的和相加。")])])])],-1),Vt=n("h4",{id:"💎-代码-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-6","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),Ht=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"NumArray"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("nums "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token comment"},"// @param {number} start"),t(`
	`),n("span",{class:"token comment"},"// @param {number} end"),t(`
	`),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"=="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"left"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"right"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sum"),n("span",{class:"token operator"},":"),t(" nums"),n("span",{class:"token punctuation"},"["),t("start"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"+"),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" mid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" sum "),n("span",{class:"token operator"},"="),t(" left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"+"),t(" right"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},","),t(" sum "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} index"),t(`
	`),n("span",{class:"token comment"},"// @param {number} val"),t(`
	`),n("span",{class:"token comment"},"// @return {void}"),t(`
	`),n("span",{class:"token function"},"update"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"=="),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(" val"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("index "),n("span",{class:"token operator"},"<="),t(" mid"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(`
			`),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} left"),t(`
	`),n("span",{class:"token comment"},"// @param {number} right"),t(`
	`),n("span",{class:"token comment"},"// @return {number}"),t(`
	`),n("span",{class:"token function"},"sumRange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("left"),n("span",{class:"token punctuation"},","),t(" right")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">"),t(" end "),n("span",{class:"token operator"},"||"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<"),t(" start"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">="),t(" start "),n("span",{class:"token operator"},"&&"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" leftSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),t("mid"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" rightSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(`
			Math`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),t("mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
			end
		`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(" leftSum "),n("span",{class:"token operator"},"+"),t(" rightSum"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Dt=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [307. 区域和检索 - 数组可修改 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0307.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给定一个整数数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(`，请你完成两类查询：

`),n("span",{class:"token list punctuation"},"1."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"更新"),n("span",{class:"token punctuation"},"**")]),t(" 数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 下标对应的值
`),n("span",{class:"token list punctuation"},"2."),t(" 返回数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 中索引 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t(" （包含 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t("）之间的 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 元素的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"和"),n("span",{class:"token punctuation"},"**")]),t(" ，其中 "),n("span",{class:"token code-snippet code keyword"},"`left <= right`"),t(`

实现 `),n("span",{class:"token code-snippet code keyword"},"`NumArray`"),t(` 类：

`),n("span",{class:"token list punctuation"},"-"),t(),n("span",{class:"token code-snippet code keyword"},"`NumArray(int[] nums)`"),t(" 使用数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 初始化对象
`),n("span",{class:"token list punctuation"},"-"),t(),n("span",{class:"token code-snippet code keyword"},"`void update(int index, int val)`"),t(" 将 "),n("span",{class:"token code-snippet code keyword"},"`nums[index]`"),t(" 的值 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"更新"),n("span",{class:"token punctuation"},"**")]),t(" 为 "),n("span",{class:"token code-snippet code keyword"},"`val`"),t(`
`),n("span",{class:"token list punctuation"},"-"),t(),n("span",{class:"token code-snippet code keyword"},"`int sumRange(int i, int j)`"),t(" 返回数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 中索引 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t(" 之间的元素的 总和 ，包含 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t(" 两点（也就是 "),n("span",{class:"token code-snippet code keyword"},"`nums[left] + nums[left + 1] + ... + nums[right]`"),t(` ）

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 ："),n("span",{class:"token punctuation"},"**")]),t(`

`),n("span",{class:"token blockquote punctuation"},">"),t(` 输入：
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` ["NumArray", "sumRange", "update", "sumRange"]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` 输出：
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` [null, 9, null, 8]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` 解释：
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` NumArray numArray = new NumArray([1, 3, 5]);
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` numArray.sumRange(0, 2); // 返回 1 + 3 + 5 = 9
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` numArray.update(1, 2); // nums = [1,2,5]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` numArray.sumRange(0, 2); // 返回 1 + 2 + 5 = 8

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

可以通过线段树来解决：

`),n("span",{class:"token list punctuation"},"1."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"初始化："),n("span",{class:"token punctuation"},"**")]),t(" 在 "),n("span",{class:"token code-snippet code keyword"},"`NumArray`"),t(" 类的构造函数中，首先将输入的数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 存储起来，并构建一个线段树，表示整个数组的和。每个线段树节点包含一个区间的起始位置、结束位置和该区间的和。

`),n("span",{class:"token list punctuation"},"2."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"更新操作："),n("span",{class:"token punctuation"},"**")]),t(" 当调用 "),n("span",{class:"token code-snippet code keyword"},"`update`"),t(" 方法时，根据给定的索引和新的值，更新数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 对应位置的值，并在线段树中更新对应的节点的值。这个更新过程是通过递归地向下更新线段树节点实现的。

`),n("span",{class:"token list punctuation"},"3."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"区间和查询："),n("span",{class:"token punctuation"},"**")]),t(" 当调用 "),n("span",{class:"token code-snippet code keyword"},"`sumRange`"),t(" 方法时，需要查询数组中指定区间 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(" 的和。在线段树中，可以通过递归地查询左右子树来获得区间 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(` 的和：
   `),n("span",{class:"token list punctuation"},"-"),t(" 如果当前节点的区间完全包含在 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(` 中，则直接返回该节点的和。
   `),n("span",{class:"token list punctuation"},"-"),t(" 否则，根据当前节点的中点将查询区间 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(` 分为左右两部分，递归地查询左右子树，并将两部分的和相加。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"NumArray"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("nums "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token comment"},"// @param {number} start"),t(`
	`),n("span",{class:"token comment"},"// @param {number} end"),t(`
	`),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"=="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"left"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"right"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sum"),n("span",{class:"token operator"},":"),t(" nums"),n("span",{class:"token punctuation"},"["),t("start"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"+"),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" mid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" sum "),n("span",{class:"token operator"},"="),t(" left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"+"),t(" right"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},","),t(" sum "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} index"),t(`
	`),n("span",{class:"token comment"},"// @param {number} val"),t(`
	`),n("span",{class:"token comment"},"// @return {void}"),t(`
	`),n("span",{class:"token function"},"update"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"=="),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(" val"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("index "),n("span",{class:"token operator"},"<="),t(" mid"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(`
			`),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} left"),t(`
	`),n("span",{class:"token comment"},"// @param {number} right"),t(`
	`),n("span",{class:"token comment"},"// @return {number}"),t(`
	`),n("span",{class:"token function"},"sumRange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("left"),n("span",{class:"token punctuation"},","),t(" right")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">"),t(" end "),n("span",{class:"token operator"},"||"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<"),t(" start"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">="),t(" start "),n("span",{class:"token operator"},"&&"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" leftSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),t("mid"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" rightSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(`
			Math`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),t("mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
			end
		`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(" leftSum "),n("span",{class:"token operator"},"+"),t(" rightSum"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Jt=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),t(" 相关题目")],-1),Kt=n("h4",{id:"二叉树的遍历-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树的遍历-1","aria-hidden":"true"},"#"),t(" 二叉树的遍历")],-1),Pt=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Wt=n("td",{style:{"text-align":"center"}},"144",-1),Xt={style:{"text-align":"left"}},Ut={href:"https://leetcode.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},$t={style:{"text-align":"center"}},Gt={style:{"text-align":"left"}},Qt=n("code",null,"栈",-1),Yt=n("code",null,"树",-1),Zt=n("code",null,"深度优先搜索",-1),ns=n("code",null,"1+",-1),ts={style:{"text-align":"left"}},ss=n("td",{style:{"text-align":"center"}},"94",-1),es={style:{"text-align":"left"}},as={href:"https://leetcode.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},os={style:{"text-align":"center"}},ls={style:{"text-align":"left"}},cs=n("code",null,"栈",-1),is=n("code",null,"树",-1),ps=n("code",null,"深度优先搜索",-1),us=n("code",null,"1+",-1),rs={style:{"text-align":"left"}},ds=n("td",{style:{"text-align":"center"}},"145",-1),ks={style:{"text-align":"left"}},ms={href:"https://leetcode.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},hs={style:{"text-align":"center"}},_s={style:{"text-align":"left"}},bs=n("code",null,"栈",-1),fs=n("code",null,"树",-1),vs=n("code",null,"深度优先搜索",-1),gs=n("code",null,"1+",-1),ys={style:{"text-align":"left"}},xs=n("td",{style:{"text-align":"center"}},"102",-1),ws={style:{"text-align":"left"}},js={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Ts={style:{"text-align":"center"}},Ss={style:{"text-align":"left"}},qs=n("code",null,"树",-1),Ms=n("code",null,"广度优先搜索",-1),As=n("code",null,"二叉树",-1),Ls={style:{"text-align":"left"}},Bs=n("td",{style:{"text-align":"center"}},"103",-1),Es={style:{"text-align":"left"}},Ns={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Os={style:{"text-align":"center"}},Is={style:{"text-align":"left"}},Rs=n("code",null,"树",-1),Cs=n("code",null,"广度优先搜索",-1),zs=n("code",null,"二叉树",-1),Fs={style:{"text-align":"left"}},Vs=n("td",{style:{"text-align":"center"}},"107",-1),Hs={style:{"text-align":"left"}},Ds={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},Js={style:{"text-align":"center"}},Ks={style:{"text-align":"left"}},Ps=n("code",null,"树",-1),Ws=n("code",null,"广度优先搜索",-1),Xs=n("code",null,"二叉树",-1),Us={style:{"text-align":"left"}},$s=n("td",{style:{"text-align":"center"}},"104",-1),Gs={style:{"text-align":"left"}},Qs={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ys={style:{"text-align":"center"}},Zs={style:{"text-align":"left"}},ne=n("code",null,"树",-1),te=n("code",null,"深度优先搜索",-1),se=n("code",null,"广度优先搜索",-1),ee=n("code",null,"1+",-1),ae={style:{"text-align":"left"}},oe=n("td",{style:{"text-align":"center"}},"111",-1),le={style:{"text-align":"left"}},ce={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},ie={style:{"text-align":"center"}},pe={style:{"text-align":"left"}},ue=n("code",null,"树",-1),re=n("code",null,"深度优先搜索",-1),de=n("code",null,"广度优先搜索",-1),ke=n("code",null,"1+",-1),me={style:{"text-align":"left"}},he=n("td",{style:{"text-align":"center"}},"124",-1),_e={style:{"text-align":"left"}},be={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},fe={style:{"text-align":"center"}},ve={style:{"text-align":"left"}},ge=n("code",null,"树",-1),ye=n("code",null,"深度优先搜索",-1),xe=n("code",null,"动态规划",-1),we=n("code",null,"1+",-1),je={style:{"text-align":"left"}},Te=n("td",{style:{"text-align":"center"}},"101",-1),Se={style:{"text-align":"left"}},qe={href:"https://leetcode.com/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},Me={style:{"text-align":"center"}},Ae={style:{"text-align":"left"}},Le=n("code",null,"树",-1),Be=n("code",null,"深度优先搜索",-1),Ee=n("code",null,"广度优先搜索",-1),Ne=n("code",null,"1+",-1),Oe={style:{"text-align":"left"}},Ie=n("td",{style:{"text-align":"center"}},"112",-1),Re={style:{"text-align":"left"}},Ce={href:"https://leetcode.com/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},ze={style:{"text-align":"center"}},Fe={style:{"text-align":"left"}},Ve=n("code",null,"树",-1),He=n("code",null,"深度优先搜索",-1),De=n("code",null,"广度优先搜索",-1),Je=n("code",null,"1+",-1),Ke={style:{"text-align":"left"}},Pe=n("td",{style:{"text-align":"center"}},"113",-1),We={style:{"text-align":"left"}},Xe={href:"https://leetcode.com/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},Ue={style:{"text-align":"center"}},$e={style:{"text-align":"left"}},Ge=n("code",null,"树",-1),Qe=n("code",null,"深度优先搜索",-1),Ye=n("code",null,"回溯",-1),Ze=n("code",null,"1+",-1),na={style:{"text-align":"left"}},ta=n("td",{style:{"text-align":"center"}},"236",-1),sa={style:{"text-align":"left"}},ea={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},aa={style:{"text-align":"center"}},oa={style:{"text-align":"left"}},la=n("code",null,"树",-1),ca=n("code",null,"深度优先搜索",-1),ia=n("code",null,"二叉树",-1),pa={style:{"text-align":"left"}},ua=n("td",{style:{"text-align":"center"}},"199",-1),ra={style:{"text-align":"left"}},da={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},ka={style:{"text-align":"center"}},ma={style:{"text-align":"left"}},ha=n("code",null,"树",-1),_a=n("code",null,"深度优先搜索",-1),ba=n("code",null,"广度优先搜索",-1),fa=n("code",null,"1+",-1),va={style:{"text-align":"left"}},ga=n("td",{style:{"text-align":"center"}},"226",-1),ya={style:{"text-align":"left"}},xa={href:"https://leetcode.com/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},wa={style:{"text-align":"center"}},ja={style:{"text-align":"left"}},Ta=n("code",null,"树",-1),Sa=n("code",null,"深度优先搜索",-1),qa=n("code",null,"广度优先搜索",-1),Ma=n("code",null,"1+",-1),Aa={style:{"text-align":"left"}},La=n("td",{style:{"text-align":"center"}},"958",-1),Ba={style:{"text-align":"left"}},Ea={href:"https://leetcode.com/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Na={style:{"text-align":"center"}},Oa={style:{"text-align":"left"}},Ia=n("code",null,"树",-1),Ra=n("code",null,"广度优先搜索",-1),Ca=n("code",null,"二叉树",-1),za={style:{"text-align":"left"}},Fa=n("td",{style:{"text-align":"center"}},"572",-1),Va={style:{"text-align":"left"}},Ha={href:"https://leetcode.com/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},Da={style:{"text-align":"center"}},Ja={style:{"text-align":"left"}},Ka=n("code",null,"树",-1),Pa=n("code",null,"深度优先搜索",-1),Wa=n("code",null,"二叉树",-1),Xa=n("code",null,"2+",-1),Ua={style:{"text-align":"left"}},$a=n("td",{style:{"text-align":"center"}},"100",-1),Ga={style:{"text-align":"left"}},Qa={href:"https://leetcode.com/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},Ya={style:{"text-align":"center"}},Za={style:{"text-align":"left"}},no=n("code",null,"树",-1),to=n("code",null,"深度优先搜索",-1),so=n("code",null,"广度优先搜索",-1),eo=n("code",null,"1+",-1),ao={style:{"text-align":"left"}},oo=n("td",{style:{"text-align":"center"}},"116",-1),lo={style:{"text-align":"left"}},co={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},io={style:{"text-align":"center"}},po={style:{"text-align":"left"}},uo=n("code",null,"树",-1),ro=n("code",null,"深度优先搜索",-1),ko=n("code",null,"广度优先搜索",-1),mo=n("code",null,"2+",-1),ho={style:{"text-align":"left"}},_o=n("td",{style:{"text-align":"center"}},"117",-1),bo={style:{"text-align":"left"}},fo={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},vo={style:{"text-align":"center"}},go={style:{"text-align":"left"}},yo=n("code",null,"树",-1),xo=n("code",null,"深度优先搜索",-1),wo=n("code",null,"广度优先搜索",-1),jo=n("code",null,"2+",-1),To={style:{"text-align":"left"}},So=n("td",{style:{"text-align":"center"}},"297",-1),qo={style:{"text-align":"left"}},Mo={href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ao={style:{"text-align":"center"}},Lo={style:{"text-align":"left"}},Bo=n("code",null,"树",-1),Eo=n("code",null,"深度优先搜索",-1),No=n("code",null,"广度优先搜索",-1),Oo=n("code",null,"3+",-1),Io={style:{"text-align":"left"}},Ro=n("td",{style:{"text-align":"center"}},"114",-1),Co={style:{"text-align":"left"}},zo={href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},Fo={style:{"text-align":"center"}},Vo={style:{"text-align":"left"}},Ho=n("code",null,"栈",-1),Do=n("code",null,"树",-1),Jo=n("code",null,"深度优先搜索",-1),Ko=n("code",null,"2+",-1),Po={style:{"text-align":"left"}},Wo=n("h4",{id:"二叉树的还原-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树的还原-1","aria-hidden":"true"},"#"),t(" 二叉树的还原")],-1),Xo=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Uo=n("td",{style:{"text-align":"center"}},"105",-1),$o={style:{"text-align":"left"}},Go={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Qo={style:{"text-align":"center"}},Yo={style:{"text-align":"left"}},Zo=n("code",null,"树",-1),nl=n("code",null,"数组",-1),tl=n("code",null,"哈希表",-1),sl=n("code",null,"2+",-1),el={style:{"text-align":"left"}},al=n("td",{style:{"text-align":"center"}},"106",-1),ol={style:{"text-align":"left"}},ll={href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},cl={style:{"text-align":"center"}},il={style:{"text-align":"left"}},pl=n("code",null,"树",-1),ul=n("code",null,"数组",-1),rl=n("code",null,"哈希表",-1),dl=n("code",null,"2+",-1),kl={style:{"text-align":"left"}},ml=n("td",{style:{"text-align":"center"}},"889",-1),hl={style:{"text-align":"left"}},_l={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},bl={style:{"text-align":"center"}},fl={style:{"text-align":"left"}},vl=n("code",null,"树",-1),gl=n("code",null,"数组",-1),yl=n("code",null,"哈希表",-1),xl=n("code",null,"2+",-1),wl={style:{"text-align":"left"}},jl=n("h4",{id:"二叉搜索树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉搜索树","aria-hidden":"true"},"#"),t(" 二叉搜索树")],-1),Tl=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Sl=n("td",{style:{"text-align":"center"}},"98",-1),ql={style:{"text-align":"left"}},Ml={href:"https://leetcode.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Al={style:{"text-align":"center"}},Ll={style:{"text-align":"left"}},Bl=n("code",null,"树",-1),El=n("code",null,"深度优先搜索",-1),Nl=n("code",null,"二叉搜索树",-1),Ol=n("code",null,"1+",-1),Il={style:{"text-align":"left"}},Rl=n("td",{style:{"text-align":"center"}},"173",-1),Cl={style:{"text-align":"left"}},zl={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Fl={style:{"text-align":"center"}},Vl={style:{"text-align":"left"}},Hl=n("code",null,"栈",-1),Dl=n("code",null,"树",-1),Jl=n("code",null,"设计",-1),Kl=n("code",null,"3+",-1),Pl={style:{"text-align":"left"}},Wl=n("td",{style:{"text-align":"center"}},"700",-1),Xl={style:{"text-align":"left"}},Ul={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},$l={style:{"text-align":"center"}},Gl={style:{"text-align":"left"}},Ql=n("code",null,"树",-1),Yl=n("code",null,"二叉搜索树",-1),Zl=n("code",null,"二叉树",-1),nc={style:{"text-align":"left"}},tc=n("td",{style:{"text-align":"center"}},"701",-1),sc={style:{"text-align":"left"}},ec={href:"https://leetcode.com/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ac={style:{"text-align":"center"}},oc={style:{"text-align":"left"}},lc=n("code",null,"树",-1),cc=n("code",null,"二叉搜索树",-1),ic=n("code",null,"二叉树",-1),pc={style:{"text-align":"left"}},uc=n("td",{style:{"text-align":"center"}},"450",-1),rc={style:{"text-align":"left"}},dc={href:"https://leetcode.com/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},kc={style:{"text-align":"center"}},mc={style:{"text-align":"left"}},hc=n("code",null,"树",-1),_c=n("code",null,"二叉搜索树",-1),bc=n("code",null,"二叉树",-1),fc={style:{"text-align":"left"}},vc=n("td",{style:{"text-align":"center"}},"703",-1),gc={style:{"text-align":"left"}},yc={href:"https://leetcode.com/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},xc={style:{"text-align":"center"}},wc={style:{"text-align":"left"}},jc=n("code",null,"树",-1),Tc=n("code",null,"设计",-1),Sc=n("code",null,"二叉搜索树",-1),qc=n("code",null,"3+",-1),Mc={style:{"text-align":"left"}},Ac=n("td",{style:{"text-align":"center"}},"剑指 Offer 54",-1),Lc={style:{"text-align":"left"}},Bc={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof",target:"_blank",rel:"noopener noreferrer"},Ec={style:{"text-align":"center"}},Nc={style:{"text-align":"left"}},Oc=n("code",null,"树",-1),Ic=n("code",null,"深度优先搜索",-1),Rc=n("code",null,"二叉搜索树",-1),Cc=n("code",null,"1+",-1),zc={style:{"text-align":"left"}},Fc=n("td",{style:{"text-align":"center"}},"230",-1),Vc={style:{"text-align":"left"}},Hc={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},Dc={style:{"text-align":"center"}},Jc={style:{"text-align":"left"}},Kc=n("code",null,"树",-1),Pc=n("code",null,"深度优先搜索",-1),Wc=n("code",null,"二叉搜索树",-1),Xc=n("code",null,"1+",-1),Uc={style:{"text-align":"left"}},$c=n("td",{style:{"text-align":"center"}},"235",-1),Gc={style:{"text-align":"left"}},Qc={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Yc={style:{"text-align":"center"}},Zc={style:{"text-align":"left"}},ni=n("code",null,"树",-1),ti=n("code",null,"深度优先搜索",-1),si=n("code",null,"二叉搜索树",-1),ei=n("code",null,"1+",-1),ai={style:{"text-align":"left"}},oi=n("td",{style:{"text-align":"center"}},"426",-1),li={style:{"text-align":"left"}},ci={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},ii={style:{"text-align":"center"}},pi={style:{"text-align":"left"}},ui=n("code",null,"栈",-1),ri=n("code",null,"树",-1),di=n("code",null,"深度优先搜索",-1),ki=n("code",null,"4+",-1),mi={style:{"text-align":"left"}},hi=n("td",{style:{"text-align":"center"}},"108",-1),_i={style:{"text-align":"left"}},bi={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},fi={style:{"text-align":"center"}},vi={style:{"text-align":"left"}},gi=n("code",null,"树",-1),yi=n("code",null,"二叉搜索树",-1),xi=n("code",null,"数组",-1),wi=n("code",null,"2+",-1),ji={style:{"text-align":"left"}},Ti=n("td",{style:{"text-align":"center"}},"110",-1),Si={style:{"text-align":"left"}},qi={href:"https://leetcode.com/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},Mi={style:{"text-align":"center"}},Ai={style:{"text-align":"left"}},Li=n("code",null,"树",-1),Bi=n("code",null,"深度优先搜索",-1),Ei=n("code",null,"二叉树",-1),Ni={style:{"text-align":"left"}},Oi=n("h4",{id:"线段树-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线段树-1","aria-hidden":"true"},"#"),t(" 线段树")],-1),Ii=n("ul",null,[n("li",null,"单点更新")],-1),Ri=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Ci=n("td",{style:{"text-align":"center"}},"303",-1),zi={style:{"text-align":"left"}},Fi={href:"https://leetcode.com/problems/range-sum-query-immutable",target:"_blank",rel:"noopener noreferrer"},Vi={style:{"text-align":"center"}},Hi={style:{"text-align":"left"}},Di=n("code",null,"设计",-1),Ji=n("code",null,"数组",-1),Ki=n("code",null,"前缀和",-1),Pi={style:{"text-align":"left"}},Wi=n("td",{style:{"text-align":"center"}},"307",-1),Xi={style:{"text-align":"left"}},Ui={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},$i={style:{"text-align":"center"}},Gi={style:{"text-align":"left"}},Qi=n("code",null,"设计",-1),Yi=n("code",null,"树状数组",-1),Zi=n("code",null,"线段树",-1),np=n("code",null,"1+",-1),tp={style:{"text-align":"left"}},sp=n("td",{style:{"text-align":"center"}},"354",-1),ep={style:{"text-align":"left"}},ap={href:"https://leetcode.com/problems/russian-doll-envelopes",target:"_blank",rel:"noopener noreferrer"},op={style:{"text-align":"center"}},lp={style:{"text-align":"left"}},cp=n("code",null,"数组",-1),ip=n("code",null,"二分查找",-1),pp=n("code",null,"动态规划",-1),up=n("code",null,"1+",-1),rp={style:{"text-align":"left"}},dp=n("ul",null,[n("li",null,"区间更新")],-1),kp=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),mp=n("td",{style:{"text-align":"center"}},"370",-1),hp={style:{"text-align":"left"}},_p={href:"https://leetcode.com/problems/range-addition",target:"_blank",rel:"noopener noreferrer"},bp=n("td",{style:{"text-align":"center"}},null,-1),fp={style:{"text-align":"left"}},vp=n("code",null,"数组",-1),gp=n("code",null,"前缀和",-1),yp={style:{"text-align":"left"}},xp=n("td",{style:{"text-align":"center"}},"1109",-1),wp={style:{"text-align":"left"}},jp={href:"https://leetcode.com/problems/corporate-flight-bookings",target:"_blank",rel:"noopener noreferrer"},Tp=n("td",{style:{"text-align":"center"}},null,-1),Sp={style:{"text-align":"left"}},qp=n("code",null,"数组",-1),Mp=n("code",null,"前缀和",-1),Ap={style:{"text-align":"left"}},Lp=n("td",{style:{"text-align":"center"}},"1450",-1),Bp={style:{"text-align":"left"}},Ep={href:"https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},Np=n("td",{style:{"text-align":"center"}},null,-1),Op={style:{"text-align":"left"}},Ip=n("code",null,"数组",-1),Rp={style:{"text-align":"left"}},Cp=n("td",{style:{"text-align":"center"}},"673",-1),zp={style:{"text-align":"left"}},Fp={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},Vp=n("td",{style:{"text-align":"center"}},null,-1),Hp={style:{"text-align":"left"}},Dp=n("code",null,"树状数组",-1),Jp=n("code",null,"线段树",-1),Kp=n("code",null,"数组",-1),Pp=n("code",null,"1+",-1),Wp={style:{"text-align":"left"}},Xp=n("td",{style:{"text-align":"center"}},"1310",-1),Up={style:{"text-align":"left"}},$p={href:"https://leetcode.com/problems/xor-queries-of-a-subarray",target:"_blank",rel:"noopener noreferrer"},Gp=n("td",{style:{"text-align":"center"}},null,-1),Qp={style:{"text-align":"left"}},Yp=n("code",null,"位运算",-1),Zp=n("code",null,"数组",-1),nu=n("code",null,"前缀和",-1),tu={style:{"text-align":"left"}},su=n("td",{style:{"text-align":"center"}},"1851",-1),eu={style:{"text-align":"left"}},au={href:"https://leetcode.com/problems/minimum-interval-to-include-each-query",target:"_blank",rel:"noopener noreferrer"},ou=n("td",{style:{"text-align":"center"}},null,-1),lu={style:{"text-align":"left"}},cu=n("code",null,"数组",-1),iu=n("code",null,"二分查找",-1),pu=n("code",null,"排序",-1),uu=n("code",null,"2+",-1),ru={style:{"text-align":"left"}},du=n("ul",null,[n("li",null,"区间合并")],-1),ku=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),mu=n("td",{style:{"text-align":"center"}},"729",-1),hu={style:{"text-align":"left"}},_u={href:"https://leetcode.com/problems/my-calendar-i",target:"_blank",rel:"noopener noreferrer"},bu={style:{"text-align":"center"}},fu={style:{"text-align":"left"}},vu=n("code",null,"设计",-1),gu=n("code",null,"线段树",-1),yu=n("code",null,"数组",-1),xu=n("code",null,"2+",-1),wu={style:{"text-align":"left"}},ju=n("td",{style:{"text-align":"center"}},"731",-1),Tu={style:{"text-align":"left"}},Su={href:"https://leetcode.com/problems/my-calendar-ii",target:"_blank",rel:"noopener noreferrer"},qu={style:{"text-align":"center"}},Mu={style:{"text-align":"left"}},Au=n("code",null,"设计",-1),Lu=n("code",null,"线段树",-1),Bu=n("code",null,"数组",-1),Eu=n("code",null,"3+",-1),Nu={style:{"text-align":"left"}},Ou=n("td",{style:{"text-align":"center"}},"732",-1),Iu={style:{"text-align":"left"}},Ru={href:"https://leetcode.com/problems/my-calendar-iii",target:"_blank",rel:"noopener noreferrer"},Cu=n("td",{style:{"text-align":"center"}},null,-1),zu={style:{"text-align":"left"}},Fu=n("code",null,"设计",-1),Vu=n("code",null,"线段树",-1),Hu=n("code",null,"二分查找",-1),Du=n("code",null,"2+",-1),Ju={style:{"text-align":"left"}},Ku=n("ul",null,[n("li",null,"扫描线问题")],-1),Pu=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Wu=n("td",{style:{"text-align":"center"}},"218",-1),Xu={style:{"text-align":"left"}},Uu={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},$u=n("td",{style:{"text-align":"center"}},null,-1),Gu={style:{"text-align":"left"}},Qu=n("code",null,"树状数组",-1),Yu=n("code",null,"线段树",-1),Zu=n("code",null,"数组",-1),nr=n("code",null,"4+",-1),tr={style:{"text-align":"left"}},sr=n("td",{style:{"text-align":"center"}},"391",-1),er={style:{"text-align":"left"}},ar={href:"https://leetcode.com/problems/perfect-rectangle",target:"_blank",rel:"noopener noreferrer"},or=n("td",{style:{"text-align":"center"}},null,-1),lr={style:{"text-align":"left"}},cr=n("code",null,"数组",-1),ir=n("code",null,"扫描线",-1),pr={style:{"text-align":"left"}},ur=n("td",{style:{"text-align":"center"}},"850",-1),rr={style:{"text-align":"left"}},dr={href:"https://leetcode.com/problems/rectangle-area-ii",target:"_blank",rel:"noopener noreferrer"},kr=n("td",{style:{"text-align":"center"}},null,-1),mr={style:{"text-align":"left"}},hr=n("code",null,"线段树",-1),_r=n("code",null,"数组",-1),br=n("code",null,"有序集合",-1),fr=n("code",null,"1+",-1),vr={style:{"text-align":"left"}},gr=n("h4",{id:"树状数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#树状数组","aria-hidden":"true"},"#"),t(" 树状数组")],-1),yr=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),xr=n("td",{style:{"text-align":"center"}},"303",-1),wr={style:{"text-align":"left"}},jr={href:"https://leetcode.com/problems/range-sum-query-immutable",target:"_blank",rel:"noopener noreferrer"},Tr={style:{"text-align":"center"}},Sr={style:{"text-align":"left"}},qr=n("code",null,"设计",-1),Mr=n("code",null,"数组",-1),Ar=n("code",null,"前缀和",-1),Lr={style:{"text-align":"left"}},Br=n("td",{style:{"text-align":"center"}},"307",-1),Er={style:{"text-align":"left"}},Nr={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},Or={style:{"text-align":"center"}},Ir={style:{"text-align":"left"}},Rr=n("code",null,"设计",-1),Cr=n("code",null,"树状数组",-1),zr=n("code",null,"线段树",-1),Fr=n("code",null,"1+",-1),Vr={style:{"text-align":"left"}},Hr=n("td",{style:{"text-align":"center"}},"315",-1),Dr={style:{"text-align":"left"}},Jr={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Kr=n("td",{style:{"text-align":"center"}},null,-1),Pr={style:{"text-align":"left"}},Wr=n("code",null,"树状数组",-1),Xr=n("code",null,"线段树",-1),Ur=n("code",null,"数组",-1),$r=n("code",null,"4+",-1),Gr={style:{"text-align":"left"}},Qr=n("td",{style:{"text-align":"center"}},"1450",-1),Yr={style:{"text-align":"left"}},Zr={href:"https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},nd=n("td",{style:{"text-align":"center"}},null,-1),td={style:{"text-align":"left"}},sd=n("code",null,"数组",-1),ed={style:{"text-align":"left"}},ad=n("td",{style:{"text-align":"center"}},"354",-1),od={style:{"text-align":"left"}},ld={href:"https://leetcode.com/problems/russian-doll-envelopes",target:"_blank",rel:"noopener noreferrer"},cd={style:{"text-align":"center"}},id={style:{"text-align":"left"}},pd=n("code",null,"数组",-1),ud=n("code",null,"二分查找",-1),rd=n("code",null,"动态规划",-1),dd=n("code",null,"1+",-1),kd={style:{"text-align":"left"}},md=n("td",{style:{"text-align":"center"}},"673",-1),hd={style:{"text-align":"left"}},_d={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},bd=n("td",{style:{"text-align":"center"}},null,-1),fd={style:{"text-align":"left"}},vd=n("code",null,"树状数组",-1),gd=n("code",null,"线段树",-1),yd=n("code",null,"数组",-1),xd=n("code",null,"1+",-1),wd={style:{"text-align":"left"}},jd=n("td",{style:{"text-align":"center"}},"1310",-1),Td={style:{"text-align":"left"}},Sd={href:"https://leetcode.com/problems/xor-queries-of-a-subarray",target:"_blank",rel:"noopener noreferrer"},qd=n("td",{style:{"text-align":"center"}},null,-1),Md={style:{"text-align":"left"}},Ad=n("code",null,"位运算",-1),Ld=n("code",null,"数组",-1),Bd=n("code",null,"前缀和",-1),Ed={style:{"text-align":"left"}},Nd=n("td",{style:{"text-align":"center"}},"1893",-1),Od={style:{"text-align":"left"}},Id={href:"https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered",target:"_blank",rel:"noopener noreferrer"},Rd=n("td",{style:{"text-align":"center"}},null,-1),Cd={style:{"text-align":"left"}},zd=n("code",null,"数组",-1),Fd=n("code",null,"哈希表",-1),Vd=n("code",null,"前缀和",-1),Hd={style:{"text-align":"left"}},Dd=n("h4",{id:"并查集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#并查集","aria-hidden":"true"},"#"),t(" 并查集")],-1),Jd=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),Kd=n("td",{style:{"text-align":"center"}},"990",-1),Pd={style:{"text-align":"left"}},Wd={href:"https://leetcode.com/problems/satisfiability-of-equality-equations",target:"_blank",rel:"noopener noreferrer"},Xd=n("td",{style:{"text-align":"center"}},null,-1),Ud={style:{"text-align":"left"}},$d=n("code",null,"并查集",-1),Gd=n("code",null,"图",-1),Qd=n("code",null,"数组",-1),Yd=n("code",null,"1+",-1),Zd={style:{"text-align":"left"}},nk=n("td",{style:{"text-align":"center"}},"547",-1),tk={style:{"text-align":"left"}},sk={href:"https://leetcode.com/problems/number-of-provinces",target:"_blank",rel:"noopener noreferrer"},ek=n("td",{style:{"text-align":"center"}},null,-1),ak={style:{"text-align":"left"}},ok=n("code",null,"深度优先搜索",-1),lk=n("code",null,"广度优先搜索",-1),ck=n("code",null,"并查集",-1),ik=n("code",null,"1+",-1),pk={style:{"text-align":"left"}},uk=n("td",{style:{"text-align":"center"}},"684",-1),rk={style:{"text-align":"left"}},dk={href:"https://leetcode.com/problems/redundant-connection",target:"_blank",rel:"noopener noreferrer"},kk=n("td",{style:{"text-align":"center"}},null,-1),mk={style:{"text-align":"left"}},hk=n("code",null,"深度优先搜索",-1),_k=n("code",null,"广度优先搜索",-1),bk=n("code",null,"并查集",-1),fk=n("code",null,"1+",-1),vk={style:{"text-align":"left"}},gk=n("td",{style:{"text-align":"center"}},"1319",-1),yk={style:{"text-align":"left"}},xk={href:"https://leetcode.com/problems/number-of-operations-to-make-network-connected",target:"_blank",rel:"noopener noreferrer"},wk=n("td",{style:{"text-align":"center"}},null,-1),jk={style:{"text-align":"left"}},Tk=n("code",null,"深度优先搜索",-1),Sk=n("code",null,"广度优先搜索",-1),qk=n("code",null,"并查集",-1),Mk=n("code",null,"1+",-1),Ak={style:{"text-align":"left"}},Lk=n("td",{style:{"text-align":"center"}},"765",-1),Bk={style:{"text-align":"left"}},Ek={href:"https://leetcode.com/problems/couples-holding-hands",target:"_blank",rel:"noopener noreferrer"},Nk=n("td",{style:{"text-align":"center"}},null,-1),Ok={style:{"text-align":"left"}},Ik=n("code",null,"贪心",-1),Rk=n("code",null,"深度优先搜索",-1),Ck=n("code",null,"广度优先搜索",-1),zk=n("code",null,"2+",-1),Fk={style:{"text-align":"left"}},Vk=n("td",{style:{"text-align":"center"}},"399",-1),Hk={style:{"text-align":"left"}},Dk={href:"https://leetcode.com/problems/evaluate-division",target:"_blank",rel:"noopener noreferrer"},Jk={style:{"text-align":"center"}},Kk={style:{"text-align":"left"}},Pk=n("code",null,"深度优先搜索",-1),Wk=n("code",null,"广度优先搜索",-1),Xk=n("code",null,"并查集",-1),Uk=n("code",null,"4+",-1),$k={style:{"text-align":"left"}},Gk=n("td",{style:{"text-align":"center"}},"959",-1),Qk={style:{"text-align":"left"}},Yk={href:"https://leetcode.com/problems/regions-cut-by-slashes",target:"_blank",rel:"noopener noreferrer"},Zk=n("td",{style:{"text-align":"center"}},null,-1),nm={style:{"text-align":"left"}},tm=n("code",null,"深度优先搜索",-1),sm=n("code",null,"广度优先搜索",-1),em=n("code",null,"并查集",-1),am=n("code",null,"3+",-1),om={style:{"text-align":"left"}},lm=n("td",{style:{"text-align":"center"}},"1631",-1),cm={style:{"text-align":"left"}},im={href:"https://leetcode.com/problems/path-with-minimum-effort",target:"_blank",rel:"noopener noreferrer"},pm=n("td",{style:{"text-align":"center"}},null,-1),um={style:{"text-align":"left"}},rm=n("code",null,"深度优先搜索",-1),dm=n("code",null,"广度优先搜索",-1),km=n("code",null,"并查集",-1),mm=n("code",null,"4+",-1),hm={style:{"text-align":"left"}},_m=n("td",{style:{"text-align":"center"}},"778",-1),bm={style:{"text-align":"left"}},fm={href:"https://leetcode.com/problems/swim-in-rising-water",target:"_blank",rel:"noopener noreferrer"},vm=n("td",{style:{"text-align":"center"}},null,-1),gm={style:{"text-align":"left"}},ym=n("code",null,"深度优先搜索",-1),xm=n("code",null,"广度优先搜索",-1),wm=n("code",null,"并查集",-1),jm=n("code",null,"4+",-1),Tm={style:{"text-align":"left"}},Sm=n("td",{style:{"text-align":"center"}},"1202",-1),qm={style:{"text-align":"left"}},Mm={href:"https://leetcode.com/problems/smallest-string-with-swaps",target:"_blank",rel:"noopener noreferrer"},Am=n("td",{style:{"text-align":"center"}},null,-1),Lm={style:{"text-align":"left"}},Bm=n("code",null,"深度优先搜索",-1),Em=n("code",null,"广度优先搜索",-1),Nm=n("code",null,"并查集",-1),Om=n("code",null,"4+",-1),Im={style:{"text-align":"left"}},Rm=n("td",{style:{"text-align":"center"}},"947",-1),Cm={style:{"text-align":"left"}},zm={href:"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column",target:"_blank",rel:"noopener noreferrer"},Fm=n("td",{style:{"text-align":"center"}},null,-1),Vm={style:{"text-align":"left"}},Hm=n("code",null,"深度优先搜索",-1),Dm=n("code",null,"并查集",-1),Jm=n("code",null,"图",-1),Km=n("code",null,"1+",-1),Pm={style:{"text-align":"left"}},Wm=n("td",{style:{"text-align":"center"}},"803",-1),Xm={style:{"text-align":"left"}},Um={href:"https://leetcode.com/problems/bricks-falling-when-hit",target:"_blank",rel:"noopener noreferrer"},$m=n("td",{style:{"text-align":"center"}},null,-1),Gm={style:{"text-align":"left"}},Qm=n("code",null,"并查集",-1),Ym=n("code",null,"数组",-1),Zm=n("code",null,"矩阵",-1),nh={style:{"text-align":"left"}},th=n("td",{style:{"text-align":"center"}},"128",-1),sh={style:{"text-align":"left"}},eh={href:"https://leetcode.com/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},ah={style:{"text-align":"center"}},oh={style:{"text-align":"left"}},lh=n("code",null,"并查集",-1),ch=n("code",null,"数组",-1),ih=n("code",null,"哈希表",-1),ph={style:{"text-align":"left"}};function uh(rh,dh){const o=r("ExternalLinkIcon"),d=r("CodeTabs"),u=r("MdDemo"),a=r("RouterLink"),l=r("font");return _(),b("div",null,[E,s(u,{title:"相关题目",id:"md-demo-158"},{default:e(()=>[n("h4",N,[O,t(" 📌 "),n("a",I,[t("144. 二叉树的前序遍历 - LeetCode"),s(o)])]),R,C,z,F,V,H,D,J,K,P,s(d,{id:"211",data:[{id:"递归"},{id:"迭代"}]},{title0:e(({value:c,isActive:i})=>[t("递归")]),title1:e(({value:c,isActive:i})=>[t("迭代")]),tab0:e(({value:c,isActive:i})=>[W]),tab1:e(({value:c,isActive:i})=>[X]),_:1})]),code:e(()=>[U]),_:1}),$,s(u,{title:"相关题目",id:"md-demo-224"},{default:e(()=>[n("h4",G,[Q,t(" 📌 "),n("a",Y,[t("145. 二叉树的后序遍历 - LeetCode"),s(o)])]),Z,nn,tn,sn,en,an,on,ln,cn,s(d,{id:"255",data:[{id:"递归"},{id:"迭代"}]},{title0:e(({value:c,isActive:i})=>[t("递归")]),title1:e(({value:c,isActive:i})=>[t("迭代")]),tab0:e(({value:c,isActive:i})=>[pn]),tab1:e(({value:c,isActive:i})=>[un]),_:1})]),code:e(()=>[rn]),_:1}),dn,s(u,{title:"相关题目",id:"md-demo-268"},{default:e(()=>[n("h4",kn,[mn,t(" 📌 "),n("a",hn,[t("94. 二叉树的中序遍历 - LeetCode"),s(o)])]),_n,bn,fn,vn,gn,yn,xn,wn,jn,s(d,{id:"299",data:[{id:"递归"},{id:"迭代"}]},{title0:e(({value:c,isActive:i})=>[t("递归")]),title1:e(({value:c,isActive:i})=>[t("迭代")]),tab0:e(({value:c,isActive:i})=>[Tn]),tab1:e(({value:c,isActive:i})=>[Sn]),_:1})]),code:e(()=>[qn]),_:1}),Mn,s(u,{title:"相关题目",id:"md-demo-312"},{default:e(()=>[n("h4",An,[Ln,t(" 📌 "),n("a",Bn,[t("102. 二叉树的层序遍历 - LeetCode"),s(o)])]),En,Nn,On,In,Rn,Cn,zn,Fn,Vn,s(d,{id:"391",data:[{id:"广度优先遍历(BFS)"},{id:"深度优先遍历(DFS)"}]},{title0:e(({value:c,isActive:i})=>[t("广度优先遍历(BFS)")]),title1:e(({value:c,isActive:i})=>[t("深度优先遍历(DFS)")]),tab0:e(({value:c,isActive:i})=>[Hn]),tab1:e(({value:c,isActive:i})=>[Dn]),_:1})]),code:e(()=>[Jn]),_:1}),Kn,s(u,{title:"相关题目",id:"md-demo-419"},{default:e(()=>[n("h4",Pn,[Wn,t(" 📌 "),n("a",Xn,[t("105. 从前序与中序遍历序列构造二叉树 - LeetCode"),s(o)])]),Un,$n,Gn,Qn,Yn,Zn,nt,tt,st,et,n("p",null,[t("类似的题目还有 "),n("a",at,[t("106. 从中序与后序遍历序列构造二叉树 - LeetCode"),s(o)]),t(" 和 "),n("a",ot,[t("889. 根据前序和后序遍历构造二叉树 - LeetCode"),s(o)]),t("，原理类似，详见题解。")])]),code:e(()=>[lt]),_:1}),s(u,{title:"相关题目",id:"md-demo-456"},{default:e(()=>[n("h4",ct,[it,t(" 📌 "),n("a",pt,[t("654. 最大二叉树 - LeetCode"),s(o)])]),ut,rt,dt,kt,mt,ht,_t,bt,ft,vt,gt,yt,xt,wt,jt]),code:e(()=>[Tt]),_:1}),St,s(u,{title:"相关题目",id:"md-demo-922"},{default:e(()=>[n("h4",qt,[Mt,t(" 📌 "),n("a",At,[t("307. 区域和检索 - 数组可修改 - LeetCode"),s(o)])]),Lt,Bt,Et,Nt,Ot,It,Rt,Ct,zt,Ft,Vt,Ht]),code:e(()=>[Dt]),_:1}),p(" START TABLE "),p(" Please keep comment here to allow auto update "),p(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),Jt,Kt,p(" prettier-ignore "),n("table",null,[Pt,n("tbody",null,[n("tr",null,[Wt,n("td",Xt,[n("a",Ut,[t("二叉树的前序遍历"),s(o)])]),n("td",$t,[s(a,{to:"/leetcode-js/problem/0144.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Gt,[s(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[Qt]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Yt]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Zt]),_:1}),t(),ns]),n("td",ts,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[ss,n("td",es,[n("a",as,[t("二叉树的中序遍历"),s(o)])]),n("td",os,[s(a,{to:"/leetcode-js/problem/0094.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ls,[s(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[cs]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[is]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ps]),_:1}),t(),us]),n("td",rs,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[ds,n("td",ks,[n("a",ms,[t("二叉树的后序遍历"),s(o)])]),n("td",hs,[s(a,{to:"/leetcode-js/problem/0145.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",_s,[s(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[bs]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[fs]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[vs]),_:1}),t(),gs]),n("td",ys,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[xs,n("td",ws,[n("a",js,[t("二叉树的层序遍历"),s(o)])]),n("td",Ts,[s(a,{to:"/leetcode-js/problem/0102.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ss,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[qs]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Ms]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[As]),_:1})]),n("td",Ls,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Bs,n("td",Es,[n("a",Ns,[t("二叉树的锯齿形层序遍历"),s(o)])]),n("td",Os,[s(a,{to:"/leetcode-js/problem/0103.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Is,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Rs]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Cs]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[zs]),_:1})]),n("td",Fs,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Vs,n("td",Hs,[n("a",Ds,[t("二叉树的层序遍历 II"),s(o)])]),n("td",Js,[s(a,{to:"/leetcode-js/problem/0107.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ks,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ps]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Ws]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[Xs]),_:1})]),n("td",Us,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[$s,n("td",Gs,[n("a",Qs,[t("二叉树的最大深度"),s(o)])]),n("td",Ys,[s(a,{to:"/leetcode-js/problem/0104.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Zs,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[ne]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[te]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[se]),_:1}),t(),ee]),n("td",ae,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[oe,n("td",le,[n("a",ce,[t("二叉树的最小深度"),s(o)])]),n("td",ie,[s(a,{to:"/leetcode-js/problem/0111.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",pe,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[ue]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[re]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[de]),_:1}),t(),ke]),n("td",me,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[he,n("td",_e,[n("a",be,[t("二叉树中的最大路径和"),s(o)])]),n("td",fe,[s(a,{to:"/leetcode-js/problem/0124.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ve,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[ge]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ye]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:e(()=>[xe]),_:1}),t(),we]),n("td",je,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[Te,n("td",Se,[n("a",qe,[t("对称二叉树"),s(o)])]),n("td",Me,[s(a,{to:"/leetcode-js/problem/0101.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ae,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Le]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Be]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Ee]),_:1}),t(),Ne]),n("td",Oe,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Ie,n("td",Re,[n("a",Ce,[t("路径总和"),s(o)])]),n("td",ze,[s(a,{to:"/leetcode-js/problem/0112.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Fe,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ve]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[He]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[De]),_:1}),t(),Je]),n("td",Ke,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Pe,n("td",We,[n("a",Xe,[t("路径总和 II"),s(o)])]),n("td",Ue,[s(a,{to:"/leetcode-js/problem/0113.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",$e,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ge]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Qe]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:e(()=>[Ye]),_:1}),t(),Ze]),n("td",na,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[ta,n("td",sa,[n("a",ea,[t("二叉树的最近公共祖先"),s(o)])]),n("td",aa,[s(a,{to:"/leetcode-js/problem/0236.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",oa,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[la]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ca]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[ia]),_:1})]),n("td",pa,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[ua,n("td",ra,[n("a",da,[t("二叉树的右视图"),s(o)])]),n("td",ka,[s(a,{to:"/leetcode-js/problem/0199.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ma,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[ha]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[_a]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[ba]),_:1}),t(),fa]),n("td",va,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[ga,n("td",ya,[n("a",xa,[t("翻转二叉树"),s(o)])]),n("td",wa,[s(a,{to:"/leetcode-js/problem/0226.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ja,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ta]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Sa]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[qa]),_:1}),t(),Ma]),n("td",Aa,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[La,n("td",Ba,[n("a",Ea,[t("二叉树的完全性检验"),s(o)])]),n("td",Na,[s(a,{to:"/leetcode-js/problem/0958.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Oa,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ia]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Ra]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[Ca]),_:1})]),n("td",za,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Fa,n("td",Va,[n("a",Ha,[t("另一棵树的子树"),s(o)])]),n("td",Da,[s(a,{to:"/leetcode-js/problem/0572.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ja,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ka]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Pa]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[Wa]),_:1}),t(),Xa]),n("td",Ua,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[$a,n("td",Ga,[n("a",Qa,[t("相同的树"),s(o)])]),n("td",Ya,[s(a,{to:"/leetcode-js/problem/0100.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Za,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[no]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[to]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[so]),_:1}),t(),eo]),n("td",ao,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[oo,n("td",lo,[n("a",co,[t("填充每个节点的下一个右侧节点指针"),s(o)])]),n("td",io,[s(a,{to:"/leetcode-js/problem/0116.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",po,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[uo]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ro]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[ko]),_:1}),t(),mo]),n("td",ho,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[_o,n("td",bo,[n("a",fo,[t("填充每个节点的下一个右侧节点指针 II"),s(o)])]),n("td",vo,[s(a,{to:"/leetcode-js/problem/0117.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",go,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[yo]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[xo]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[wo]),_:1}),t(),jo]),n("td",To,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[So,n("td",qo,[n("a",Mo,[t("二叉树的序列化与反序列化"),s(o)])]),n("td",Ao,[s(a,{to:"/leetcode-js/problem/0297.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Lo,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Bo]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Eo]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[No]),_:1}),t(),Oo]),n("td",Io,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[Ro,n("td",Co,[n("a",zo,[t("二叉树展开为链表"),s(o)])]),n("td",Fo,[s(a,{to:"/leetcode-js/problem/0114.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Vo,[s(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[Ho]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Do]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Jo]),_:1}),t(),Ko]),n("td",Po,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])]),Wo,p(" prettier-ignore "),n("table",null,[Xo,n("tbody",null,[n("tr",null,[Uo,n("td",$o,[n("a",Go,[t("从前序与中序遍历序列构造二叉树"),s(o)])]),n("td",Qo,[s(a,{to:"/leetcode-js/problem/0105.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Yo,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Zo]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[nl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[tl]),_:1}),t(),sl]),n("td",el,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[al,n("td",ol,[n("a",ll,[t("从中序与后序遍历序列构造二叉树"),s(o)])]),n("td",cl,[s(a,{to:"/leetcode-js/problem/0106.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",il,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[pl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[ul]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[rl]),_:1}),t(),dl]),n("td",kl,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[ml,n("td",hl,[n("a",_l,[t("根据前序和后序遍历构造二叉树"),s(o)])]),n("td",bl,[s(a,{to:"/leetcode-js/problem/0889.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",fl,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[vl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[gl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[yl]),_:1}),t(),xl]),n("td",wl,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])]),jl,p(" prettier-ignore "),n("table",null,[Tl,n("tbody",null,[n("tr",null,[Sl,n("td",ql,[n("a",Ml,[t("验证二叉搜索树"),s(o)])]),n("td",Al,[s(a,{to:"/leetcode-js/problem/0098.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ll,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Bl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[El]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[Nl]),_:1}),t(),Ol]),n("td",Il,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Rl,n("td",Cl,[n("a",zl,[t("二叉搜索树迭代器"),s(o)])]),n("td",Fl,[s(a,{to:"/leetcode-js/problem/0173.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Vl,[s(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[Hl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Dl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Jl]),_:1}),t(),Kl]),n("td",Pl,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Wl,n("td",Xl,[n("a",Ul,[t("二叉搜索树中的搜索"),s(o)])]),n("td",$l,[s(a,{to:"/leetcode-js/problem/0700.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Gl,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Ql]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[Yl]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[Zl]),_:1})]),n("td",nc,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[tc,n("td",sc,[n("a",ec,[t("二叉搜索树中的插入操作"),s(o)])]),n("td",ac,[s(a,{to:"/leetcode-js/problem/0701.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",oc,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[lc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[cc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[ic]),_:1})]),n("td",pc,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[uc,n("td",rc,[n("a",dc,[t("删除二叉搜索树中的节点"),s(o)])]),n("td",kc,[s(a,{to:"/leetcode-js/problem/0450.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",mc,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[hc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[_c]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[bc]),_:1})]),n("td",fc,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[vc,n("td",gc,[n("a",yc,[t("数据流中的第 K 大元素"),s(o)])]),n("td",xc,[s(a,{to:"/leetcode-js/problem/0703.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",wc,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[jc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Tc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[Sc]),_:1}),t(),qc]),n("td",Mc,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Ac,n("td",Lc,[n("a",Bc,[t("二叉搜索树的第k大节点"),s(o)])]),n("td",Ec,[s(a,{to:"/leetcode-js/problem/jz_offer_54_1.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Nc,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Oc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Ic]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[Rc]),_:1}),t(),Cc]),n("td",zc,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Fc,n("td",Vc,[n("a",Hc,[t("二叉搜索树中第 K 小的元素"),s(o)])]),n("td",Dc,[s(a,{to:"/leetcode-js/problem/0230.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Jc,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Kc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Pc]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[Wc]),_:1}),t(),Xc]),n("td",Uc,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[$c,n("td",Gc,[n("a",Qc,[t("二叉搜索树的最近公共祖先"),s(o)])]),n("td",Yc,[s(a,{to:"/leetcode-js/problem/0235.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Zc,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[ni]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ti]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[si]),_:1}),t(),ei]),n("td",ai,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[oi,n("td",li,[n("a",ci,[t("将二叉搜索树转化为排序的双向链表"),s(o)])]),n("td",ii,[s(a,{to:"/leetcode-js/problem/0426.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",pi,[s(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[ui]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[ri]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[di]),_:1}),t(),ki]),n("td",mi,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[hi,n("td",_i,[n("a",bi,[t("将有序数组转换为二叉搜索树"),s(o)])]),n("td",fi,[s(a,{to:"/leetcode-js/problem/0108.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",vi,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[gi]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search-tree.html"},{default:e(()=>[yi]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[xi]),_:1}),t(),wi]),n("td",ji,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Ti,n("td",Si,[n("a",qi,[t("平衡二叉树"),s(o)])]),n("td",Mi,[s(a,{to:"/leetcode-js/problem/0110.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ai,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Li]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Bi]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[Ei]),_:1})]),n("td",Ni,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])])])]),Oi,Ii,p(" prettier-ignore "),n("table",null,[Ri,n("tbody",null,[n("tr",null,[Ci,n("td",zi,[n("a",Fi,[t("区域和检索 - 数组不可变"),s(o)])]),n("td",Vi,[s(a,{to:"/leetcode-js/problem/0303.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Hi,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Di]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ji]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[Ki]),_:1})]),n("td",Pi,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Wi,n("td",Xi,[n("a",Ui,[t("区域和检索 - 数组可修改"),s(o)])]),n("td",$i,[s(a,{to:"/leetcode-js/problem/0307.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Gi,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Qi]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[Yi]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[Zi]),_:1}),t(),np]),n("td",tp,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[sp,n("td",ep,[n("a",ap,[t("俄罗斯套娃信封问题"),s(o)])]),n("td",op,[s(a,{to:"/leetcode-js/problem/0354.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",lp,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[cp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:e(()=>[ip]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:e(()=>[pp]),_:1}),t(),up]),n("td",rp,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])])])]),dp,p(" prettier-ignore "),n("table",null,[kp,n("tbody",null,[n("tr",null,[mp,n("td",hp,[n("a",_p,[t("区间加法"),s(o)])]),bp,n("td",fp,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[vp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[gp]),_:1})]),n("td",yp,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[xp,n("td",wp,[n("a",jp,[t("航班预订统计"),s(o)])]),Tp,n("td",Sp,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[qp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[Mp]),_:1})]),n("td",Ap,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Lp,n("td",Bp,[n("a",Ep,[t("在既定时间做作业的学生人数"),s(o)])]),Np,n("td",Op,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ip]),_:1})]),n("td",Rp,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Cp,n("td",zp,[n("a",Fp,[t("最长递增子序列的个数"),s(o)])]),Vp,n("td",Hp,[s(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[Dp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[Jp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Kp]),_:1}),t(),Pp]),n("td",Wp,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Xp,n("td",Up,[n("a",$p,[t("子数组异或查询"),s(o)])]),Gp,n("td",Qp,[s(a,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:e(()=>[Yp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Zp]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[nu]),_:1})]),n("td",tu,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[su,n("td",eu,[n("a",au,[t("包含每个查询的最小区间"),s(o)])]),ou,n("td",lu,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[cu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:e(()=>[iu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:e(()=>[pu]),_:1}),t(),uu]),n("td",ru,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])])])]),du,p(" prettier-ignore "),n("table",null,[ku,n("tbody",null,[n("tr",null,[mu,n("td",hu,[n("a",_u,[t("我的日程安排表 I"),s(o)])]),n("td",bu,[s(a,{to:"/leetcode-js/problem/0729.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",fu,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[vu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[gu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[yu]),_:1}),t(),xu]),n("td",wu,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[ju,n("td",Tu,[n("a",Su,[t("我的日程安排表 II"),s(o)])]),n("td",qu,[s(a,{to:"/leetcode-js/problem/0731.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Mu,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Au]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[Lu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Bu]),_:1}),t(),Eu]),n("td",Nu,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Ou,n("td",Iu,[n("a",Ru,[t("我的日程安排表 III"),s(o)])]),Cu,n("td",zu,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Fu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[Vu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:e(()=>[Hu]),_:1}),t(),Du]),n("td",Ju,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])])])]),Ku,p(" prettier-ignore "),n("table",null,[Pu,n("tbody",null,[n("tr",null,[Wu,n("td",Xu,[n("a",Uu,[t("天际线问题"),s(o)])]),$u,n("td",Gu,[s(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[Qu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[Yu]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Zu]),_:1}),t(),nr]),n("td",tr,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[sr,n("td",er,[n("a",ar,[t("完美矩形"),s(o)])]),or,n("td",lr,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[cr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/line-sweep.html"},{default:e(()=>[ir]),_:1})]),n("td",pr,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[ur,n("td",rr,[n("a",dr,[t("矩形面积 II"),s(o)])]),kr,n("td",mr,[s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[hr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[_r]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/ordered-set.html"},{default:e(()=>[br]),_:1}),t(),fr]),n("td",vr,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])])])]),gr,p(" prettier-ignore "),n("table",null,[yr,n("tbody",null,[n("tr",null,[xr,n("td",wr,[n("a",jr,[t("区域和检索 - 数组不可变"),s(o)])]),n("td",Tr,[s(a,{to:"/leetcode-js/problem/0303.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Sr,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[qr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Mr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[Ar]),_:1})]),n("td",Lr,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[Br,n("td",Er,[n("a",Nr,[t("区域和检索 - 数组可修改"),s(o)])]),n("td",Or,[s(a,{to:"/leetcode-js/problem/0307.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ir,[s(a,{to:"/leetcode-js/outline/tag/design.html"},{default:e(()=>[Rr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[Cr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[zr]),_:1}),t(),Fr]),n("td",Vr,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Hr,n("td",Dr,[n("a",Jr,[t("计算右侧小于当前元素的个数"),s(o)])]),Kr,n("td",Pr,[s(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[Wr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[Xr]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ur]),_:1}),t(),$r]),n("td",Gr,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[Qr,n("td",Yr,[n("a",Zr,[t("在既定时间做作业的学生人数"),s(o)])]),nd,n("td",td,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[sd]),_:1})]),n("td",ed,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[ad,n("td",od,[n("a",ld,[t("俄罗斯套娃信封问题"),s(o)])]),n("td",cd,[s(a,{to:"/leetcode-js/problem/0354.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",id,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[pd]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:e(()=>[ud]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:e(()=>[rd]),_:1}),t(),dd]),n("td",kd,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[md,n("td",hd,[n("a",_d,[t("最长递增子序列的个数"),s(o)])]),bd,n("td",fd,[s(a,{to:"/leetcode-js/outline/tag/binary-indexed-tree.html"},{default:e(()=>[vd]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/segment-tree.html"},{default:e(()=>[gd]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[yd]),_:1}),t(),xd]),n("td",wd,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[jd,n("td",Td,[n("a",Sd,[t("子数组异或查询"),s(o)])]),qd,n("td",Md,[s(a,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:e(()=>[Ad]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ld]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[Bd]),_:1})]),n("td",Ed,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Nd,n("td",Od,[n("a",Id,[t("检查是否区域内所有整数都被覆盖"),s(o)])]),Rd,n("td",Cd,[s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[zd]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[Fd]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:e(()=>[Vd]),_:1})]),n("td",Hd,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])])])]),Dd,p(" prettier-ignore "),n("table",null,[Jd,n("tbody",null,[n("tr",null,[Kd,n("td",Pd,[n("a",Wd,[t("等式方程的可满足性"),s(o)])]),Xd,n("td",Ud,[s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[$d]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/graph.html"},{default:e(()=>[Gd]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Qd]),_:1}),t(),Yd]),n("td",Zd,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[nk,n("td",tk,[n("a",sk,[t("省份数量"),s(o)])]),ek,n("td",ak,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ok]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[lk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[ck]),_:1}),t(),ik]),n("td",pk,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[uk,n("td",rk,[n("a",dk,[t("冗余连接"),s(o)])]),kk,n("td",mk,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[hk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[_k]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[bk]),_:1}),t(),fk]),n("td",vk,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[gk,n("td",yk,[n("a",xk,[t("连通网络的操作次数"),s(o)])]),wk,n("td",jk,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Tk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Sk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[qk]),_:1}),t(),Mk]),n("td",Ak,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Lk,n("td",Bk,[n("a",Ek,[t("情侣牵手"),s(o)])]),Nk,n("td",Ok,[s(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[Ik]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Rk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Ck]),_:1}),t(),zk]),n("td",Fk,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[Vk,n("td",Hk,[n("a",Dk,[t("除法求值"),s(o)])]),n("td",Jk,[s(a,{to:"/leetcode-js/problem/0399.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Kk,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Pk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Wk]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[Xk]),_:1}),t(),Uk]),n("td",$k,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Gk,n("td",Qk,[n("a",Yk,[t("由斜杠划分区域"),s(o)])]),Zk,n("td",nm,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[tm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[sm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[em]),_:1}),t(),am]),n("td",om,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[lm,n("td",cm,[n("a",im,[t("最小体力消耗路径"),s(o)])]),pm,n("td",um,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[rm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[dm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[km]),_:1}),t(),mm]),n("td",hm,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[_m,n("td",bm,[n("a",fm,[t("水位上升的泳池中游泳"),s(o)])]),vm,n("td",gm,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[ym]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[xm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[wm]),_:1}),t(),jm]),n("td",Tm,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[Sm,n("td",qm,[n("a",Mm,[t("交换字符串中的元素"),s(o)])]),Am,n("td",Lm,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Bm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[Em]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[Nm]),_:1}),t(),Om]),n("td",Im,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Rm,n("td",Cm,[n("a",zm,[t("移除最多的同行或同列石头"),s(o)])]),Fm,n("td",Vm,[s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Hm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[Dm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/graph.html"},{default:e(()=>[Jm]),_:1}),t(),Km]),n("td",Pm,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[Wm,n("td",Xm,[n("a",Um,[t("打砖块"),s(o)])]),$m,n("td",Gm,[s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[Qm]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[Ym]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/matrix.html"},{default:e(()=>[Zm]),_:1})]),n("td",nh,[s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[th,n("td",sh,[n("a",eh,[t("最长连续序列"),s(o)])]),n("td",ah,[s(a,{to:"/leetcode-js/problem/0128.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",oh,[s(a,{to:"/leetcode-js/outline/tag/union-find.html"},{default:e(()=>[lh]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[ch]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[ih]),_:1})]),n("td",ph,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])])])}const hh=h(B,[["render",uh],["__file","tree.html.vue"]]);export{hh as default};
