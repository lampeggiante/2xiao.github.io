import{_ as r,r as c,o as i,c as p,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-qrCIIj1V.js";const h={},_={id:"_344-反转字符串",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_344-反转字符串","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"双指针",-1),f=n("code",null,"字符串",-1),b={href:"https://leetcode.com/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),y=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),t(" 题目")],-1),x=n("p",null,[t("Write a function that reverses a string. The input string is given as an array of characters "),n("code",null,"s"),t(".")],-1),w={href:"https://en.wikipedia.org/wiki/In-place_algorithm",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"O(1)",-1),I=n("p",null,[n("strong",null,"Example 1:")],-1),E=n("blockquote",null,[n("p",null,'Input: s = ["h","e","l","l","o"]'),n("p",null,'Output: ["o","l","l","e","h"]')],-1),C=n("p",null,[n("strong",null,"Example 2:")],-1),O=n("blockquote",null,[n("p",null,'Input: s = ["H","a","n","n","a","h"]'),n("p",null,'Output: ["h","a","n","n","a","H"]')],-1),L=n("p",null,[n("strong",null,"Constraints:")],-1),N=n("li",null,[n("code",null,"1 <= s.length <= 10^5")],-1),V=n("code",null,"s[i]",-1),B={href:"https://en.wikipedia.org/wiki/ASCII#Printable_characters",target:"_blank",rel:"noopener noreferrer"},S=u(`<h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 <code>O(1)</code> 的额外空间解决这一问题。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以将数组的首位元素一一交换即可。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n = s.length / 2</code>，要遍历一半的数组。</li><li><strong>空间复杂度</strong>：<code>O(1)</code></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify s in-place instead.
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,10),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),H=n("td",{style:{"text-align":"center"}},"345",-1),R={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/reverse-vowels-of-a-string",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"center"}},D={style:{"text-align":"left"}},P=n("code",null,"双指针",-1),W=n("code",null,"字符串",-1),Y={style:{"text-align":"left"}},z=n("td",{style:{"text-align":"center"}},"541",-1),F={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/reverse-string-ii",target:"_blank",rel:"noopener noreferrer"},J=n("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},M=n("code",null,"双指针",-1),Q=n("code",null,"字符串",-1),U={style:{"text-align":"left"}};function X(Z,$){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),p("div",null,[n("h1",_,[k,t(),n("a",m,[t("344. 反转字符串"),e(o)])]),n("p",null,[t("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),e(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[g]),_:1}),t(),e(a,{to:"/leetcode-js/outline/tag/string.html"},{default:s(()=>[f]),_:1}),t("  🔗 "),n("a",b,[v,e(o)])]),y,x,n("p",null,[t("You must do this by modifying the input array "),n("a",w,[t("in- place"),e(o)]),t(" with "),j,t(" extra memory.")]),I,E,C,O,L,n("ul",null,[N,n("li",null,[V,t(" is a "),n("a",B,[t("printable ascii character"),e(o)]),t(".")])]),S,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[H,n("td",R,[n("a",T,[t("反转字符串中的元音字母"),e(o)])]),n("td",A,[e(a,{to:"/leetcode-js/problem/0345.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",D,[e(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[P]),_:1}),t(),e(a,{to:"/leetcode-js/outline/tag/string.html"},{default:s(()=>[W]),_:1})]),n("td",Y,[e(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),n("tr",null,[z,n("td",F,[n("a",G,[t("反转字符串 II"),e(o)])]),J,n("td",K,[e(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[M]),_:1}),t(),e(a,{to:"/leetcode-js/outline/tag/string.html"},{default:s(()=>[Q]),_:1})]),n("td",U,[e(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])])])])])}const tn=r(h,[["render",X],["__file","0344.html.vue"]]);export{tn as default};
