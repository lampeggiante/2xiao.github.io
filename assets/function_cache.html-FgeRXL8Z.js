import{_ as n,o as s,c as a,e as t}from"./app-b4s7f53x.js";const p={},e=t(`<h1 id="javascript-中如何实现函数缓存-应用场景" tabindex="-1"><a class="header-anchor" href="#javascript-中如何实现函数缓存-应用场景" aria-hidden="true">#</a> Javascript 中如何实现函数缓存？应用场景？</h1><h2 id="如何实现函数缓存" tabindex="-1"><a class="header-anchor" href="#如何实现函数缓存" aria-hidden="true">#</a> 如何实现函数缓存？</h2><p>在 JavaScript 中，函数缓存（Memoization）是一种优化技术，旨在将函数的计算结果缓存起来，避免重复计算。它常用于需要反复计算相同结果的函数，尤其是在高成本的计算过程中。</p><p>实现函数缓存的基本思想是：对于每一组输入参数，记录下它的计算结果，若下次调用时参数相同，就直接返回缓存的结果，而不是再次计算。</p><p>以下是三种常见的实现方式：</p><h3 id="_1-使用对象和闭包实现缓存" tabindex="-1"><a class="header-anchor" href="#_1-使用对象和闭包实现缓存" aria-hidden="true">#</a> 1. 使用对象和闭包实现缓存</h3><p>最简单的一种方式是使用闭包，将函数计算的结果存储在一个对象中，通过对象的键值对来缓存计算结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 使用对象缓存计算结果</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将参数序列化为字符串作为缓存键</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 如果缓存中已有结果，直接返回</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 否则计算结果</span>
		cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span> <span class="token comment">// 存入缓存</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">const</span> memoizedAdd <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算并缓存结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从缓存中返回结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用-map-实现缓存" tabindex="-1"><a class="header-anchor" href="#_2-使用-map-实现缓存" aria-hidden="true">#</a> 2. 使用 Map 实现缓存</h3><p>Map 是一种更高效的数据结构，尤其在处理较复杂的键时（如对象、数组等）。与对象不同，Map 允许任何数据类型作为键。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 Map 缓存计算结果</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> key <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将参数连接成字符串作为缓存键</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果缓存中已有结果，直接返回</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 否则计算结果</span>
		cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存入缓存</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token keyword">const</span> memoizedMultiply <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedMultiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算并缓存结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedMultiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从缓存中返回结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用-weakmap-实现缓存" tabindex="-1"><a class="header-anchor" href="#_3-使用-weakmap-实现缓存" aria-hidden="true">#</a> 3. 使用 WeakMap 实现缓存</h3><p><code>WeakMap</code> 是一种特殊的 Map，它的键是弱引用，意味着当键不再被引用时，缓存会被自动清理。这对于缓存对象尤其有用，避免了内存泄漏问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 WeakMap 缓存对象结果</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果缓存中已有结果，直接返回</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 否则计算结果</span>
			cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存入缓存</span>
			<span class="token keyword">return</span> result<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对于非对象参数，直接计算</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟深拷贝</span>
<span class="token keyword">const</span> memoizedClone <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>deepClone<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算并缓存结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从缓存中返回结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数缓存的应用场景" tabindex="-1"><a class="header-anchor" href="#函数缓存的应用场景" aria-hidden="true">#</a> 函数缓存的应用场景</h2><p>尽管函数缓存能够显著提高性能，但并不是所有情况下都需要使用。以下是一些适合使用函数缓存的场景：</p><h3 id="_1-昂贵的计算函数" tabindex="-1"><a class="header-anchor" href="#_1-昂贵的计算函数" aria-hidden="true">#</a> 1. 昂贵的计算函数</h3><p>对于计算复杂、耗时的函数，缓存可以避免每次都重新计算。例如，涉及大数据运算、复杂数学计算等。</p><p>例如，计算斐波那契数列的递归版本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> memoizedFibonacci <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过缓存，避免了重复计算相同的斐波那契数值。</p><h3 id="_2-具有有限且高度重复输入范围的函数" tabindex="-1"><a class="header-anchor" href="#_2-具有有限且高度重复输入范围的函数" aria-hidden="true">#</a> 2. 具有有限且高度重复输入范围的函数</h3><p>当函数的输入范围较小，并且很多调用会重复相同的输入时，函数缓存能够极大地提高效率。例如，UI 组件渲染过程中，某些函数可能会反复计算相同的数据。</p><h3 id="_3-递归函数" tabindex="-1"><a class="header-anchor" href="#_3-递归函数" aria-hidden="true">#</a> 3. 递归函数</h3><p>对于递归函数，尤其是涉及重复子问题的递归，缓存可以显著减少计算次数，优化性能。例如，树或图遍历时，某些结果可能会被重复计算。</p><h3 id="_4-纯函数" tabindex="-1"><a class="header-anchor" href="#_4-纯函数" aria-hidden="true">#</a> 4. 纯函数</h3><p>纯函数是指对于相同的输入总是返回相同的输出，这种函数特别适合使用缓存。因为它们的输出与输入一一对应，不受外部因素影响。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> memoizedSquare <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不适合使用缓存的场景" tabindex="-1"><a class="header-anchor" href="#不适合使用缓存的场景" aria-hidden="true">#</a> 不适合使用缓存的场景</h2><p>尽管缓存具有优势，但并不是所有场景都适合使用缓存：</p><ul><li><strong>输入变化频繁</strong>：如果输入值变化频繁，缓存的优势不明显，甚至可能会增加额外的存储和查找开销。</li><li><strong>需要实时计算的场景</strong>：对于需要实时计算的函数，如时钟、传感器数据处理等，缓存可能不适合。</li><li><strong>不适合高并发的场景</strong>：如果缓存的计算过程依赖于大量共享资源，可能会遇到并发问题。</li></ul>`,31),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","function_cache.html.vue"]]);export{k as default};
