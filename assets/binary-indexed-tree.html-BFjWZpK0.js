import{_ as c,r as _,o as i,c as a,a as t,d as e,w as o,b as l,f as r}from"./app-mvY9N9Pc.js";const u={},h=t("h1",{id:"树状数组",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#树状数组","aria-hidden":"true"},"#"),l(" 树状数组")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),b=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),H=t("code",null,"单调栈",-1),q=t("code",null,"队列",-1),I=t("code",null,"单调队列",-1),w=t("code",null,"堆（优先队列）",-1),M=t("code",null,"哈希表",-1),v=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),B=t("code",null,"二叉树",-1),C=t("code",null,"二叉搜索树",-1),j=t("code",null,"最小生成树",-1),N=t("code",null,"图",-1),V=t("code",null,"有序集合",-1),E=t("code",null,"拓扑排序",-1),K=t("code",null,"最短路",-1),R=t("code",null,"强连通分量",-1),T=t("code",null,"欧拉回路",-1),A=t("code",null,"双连通分量",-1),O=t("code",null,"并查集",-1),P=t("code",null,"字典树",-1),U=t("code",null,"线段树",-1),D=t("span",{class:"blue"},"树状数组",-1),F=t("code",null,"后缀数组",-1),G=t("p",null,[t("strong",null,"算法")],-1),J=t("code",null,"枚举",-1),Q=t("code",null,"递归",-1),S=t("code",null,"分治",-1),W=t("code",null,"回溯",-1),X=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),lt=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),dt=t("code",null,"记忆化搜索",-1),st=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),ct=t("code",null,"双指针",-1),it=t("code",null,"位运算",-1),at=t("code",null,"前缀和",-1),rt=t("code",null,"计数",-1),ut=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),bt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Ht=t("code",null,"模拟",-1),qt=t("code",null,"组合数学",-1),It=t("code",null,"随机化",-1),wt=t("code",null,"概率与统计",-1),Mt=t("code",null,"水塘抽样",-1),vt=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Bt=t("code",null,"数据流",-1),Ct=t("code",null,"脑筋急转弯",-1),jt=t("code",null,"交互",-1),Nt=t("code",null,"迭代器",-1),Vt=t("code",null,"多线程",-1),Et=t("hr",null,null,-1),Kt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Rt=t("td",{style:{"text-align":"center"}},"218",-1),Tt={style:{"text-align":"left"}},At={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},Ot=t("td",{style:{"text-align":"center"}},null,-1),Pt={style:{"text-align":"left"}},Ut=t("code",null,"树状数组",-1),Dt=t("code",null,"线段树",-1),Ft=t("code",null,"数组",-1),Gt=t("code",null,"4+",-1),Jt={style:{"text-align":"left"}},Qt=t("td",{style:{"text-align":"center"}},"307",-1),St={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"center"}},Yt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0307",target:"_blank",rel:"noopener noreferrer"},Zt={style:{"text-align":"left"}},$t=t("code",null,"设计",-1),te=t("code",null,"树状数组",-1),ee=t("code",null,"线段树",-1),le=t("code",null,"1+",-1),oe={style:{"text-align":"left"}},ne=t("td",{style:{"text-align":"center"}},"308",-1),de={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/range-sum-query-2d-mutable",target:"_blank",rel:"noopener noreferrer"},_e=t("td",{style:{"text-align":"center"}},null,-1),ce={style:{"text-align":"left"}},ie=t("code",null,"设计",-1),ae=t("code",null,"树状数组",-1),re=t("code",null,"线段树",-1),ue=t("code",null,"2+",-1),he={style:{"text-align":"left"}},fe=t("td",{style:{"text-align":"center"}},"315",-1),ge={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},ye=t("td",{style:{"text-align":"center"}},null,-1),xe={style:{"text-align":"left"}},be=t("code",null,"树状数组",-1),pe=t("code",null,"线段树",-1),ke=t("code",null,"数组",-1),He=t("code",null,"4+",-1),qe={style:{"text-align":"left"}},Ie=t("td",{style:{"text-align":"center"}},"327",-1),we={style:{"text-align":"left"}},Me={href:"https://leetcode.com/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},ve=t("td",{style:{"text-align":"center"}},null,-1),Le={style:{"text-align":"left"}},ze=t("code",null,"树状数组",-1),Be=t("code",null,"线段树",-1),Ce=t("code",null,"数组",-1),je=t("code",null,"4+",-1),Ne={style:{"text-align":"left"}},Ve=t("td",{style:{"text-align":"center"}},"406",-1),Ee={style:{"text-align":"left"}},Ke={href:"https://leetcode.com/problems/queue-reconstruction-by-height",target:"_blank",rel:"noopener noreferrer"},Re=t("td",{style:{"text-align":"center"}},null,-1),Te={style:{"text-align":"left"}},Ae=t("code",null,"树状数组",-1),Oe=t("code",null,"线段树",-1),Pe=t("code",null,"数组",-1),Ue=t("code",null,"1+",-1),De={style:{"text-align":"left"}},Fe=t("td",{style:{"text-align":"center"}},"493",-1),Ge={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},Qe=t("td",{style:{"text-align":"center"}},null,-1),Se={style:{"text-align":"left"}},We=t("code",null,"树状数组",-1),Xe=t("code",null,"线段树",-1),Ye=t("code",null,"数组",-1),Ze=t("code",null,"4+",-1),$e={style:{"text-align":"left"}},tl=t("td",{style:{"text-align":"center"}},"673",-1),el={style:{"text-align":"left"}},ll={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},ol=t("td",{style:{"text-align":"center"}},null,-1),nl={style:{"text-align":"left"}},dl=t("code",null,"树状数组",-1),sl=t("code",null,"线段树",-1),_l=t("code",null,"数组",-1),cl=t("code",null,"1+",-1),il={style:{"text-align":"left"}},al=t("td",{style:{"text-align":"center"}},"683",-1),rl={style:{"text-align":"left"}},ul={href:"https://leetcode.com/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},hl=t("td",{style:{"text-align":"center"}},null,-1),fl={style:{"text-align":"left"}},gl=t("code",null,"树状数组",-1),ml=t("code",null,"线段树",-1),yl=t("code",null,"队列",-1),xl=t("code",null,"5+",-1),bl={style:{"text-align":"left"}},pl=t("td",{style:{"text-align":"center"}},"1157",-1),kl={style:{"text-align":"left"}},Hl={href:"https://leetcode.com/problems/online-majority-element-in-subarray",target:"_blank",rel:"noopener noreferrer"},ql=t("td",{style:{"text-align":"center"}},null,-1),Il={style:{"text-align":"left"}},wl=t("code",null,"设计",-1),Ml=t("code",null,"树状数组",-1),vl=t("code",null,"线段树",-1),Ll=t("code",null,"2+",-1),zl={style:{"text-align":"left"}},Bl=t("td",{style:{"text-align":"center"}},"1395",-1),Cl={style:{"text-align":"left"}},jl={href:"https://leetcode.com/problems/count-number-of-teams",target:"_blank",rel:"noopener noreferrer"},Nl=t("td",{style:{"text-align":"center"}},null,-1),Vl={style:{"text-align":"left"}},El=t("code",null,"树状数组",-1),Kl=t("code",null,"线段树",-1),Rl=t("code",null,"数组",-1),Tl=t("code",null,"1+",-1),Al={style:{"text-align":"left"}},Ol=t("td",{style:{"text-align":"center"}},"1409",-1),Pl={style:{"text-align":"left"}},Ul={href:"https://leetcode.com/problems/queries-on-a-permutation-with-key",target:"_blank",rel:"noopener noreferrer"},Dl=t("td",{style:{"text-align":"center"}},null,-1),Fl={style:{"text-align":"left"}},Gl=t("code",null,"树状数组",-1),Jl=t("code",null,"数组",-1),Ql=t("code",null,"模拟",-1),Sl={style:{"text-align":"left"}},Wl=t("td",{style:{"text-align":"center"}},"1505",-1),Xl={style:{"text-align":"left"}},Yl={href:"https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",target:"_blank",rel:"noopener noreferrer"},Zl=t("td",{style:{"text-align":"center"}},null,-1),$l={style:{"text-align":"left"}},to=t("code",null,"贪心",-1),eo=t("code",null,"树状数组",-1),lo=t("code",null,"线段树",-1),oo=t("code",null,"1+",-1),no={style:{"text-align":"left"}},so=t("td",{style:{"text-align":"center"}},"1649",-1),_o={style:{"text-align":"left"}},co={href:"https://leetcode.com/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},io=t("td",{style:{"text-align":"center"}},null,-1),ao={style:{"text-align":"left"}},ro=t("code",null,"树状数组",-1),uo=t("code",null,"线段树",-1),ho=t("code",null,"数组",-1),fo=t("code",null,"4+",-1),go={style:{"text-align":"left"}},mo=t("td",{style:{"text-align":"center"}},"1756",-1),yo={style:{"text-align":"left"}},xo={href:"https://leetcode.com/problems/design-most-recently-used-queue",target:"_blank",rel:"noopener noreferrer"},bo=t("td",{style:{"text-align":"center"}},null,-1),po={style:{"text-align":"left"}},ko=t("code",null,"栈",-1),Ho=t("code",null,"设计",-1),qo=t("code",null,"树状数组",-1),Io=t("code",null,"3+",-1),wo={style:{"text-align":"left"}},Mo=t("td",{style:{"text-align":"center"}},"1964",-1),vo={style:{"text-align":"left"}},Lo={href:"https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position",target:"_blank",rel:"noopener noreferrer"},zo=t("td",{style:{"text-align":"center"}},null,-1),Bo={style:{"text-align":"left"}},Co=t("code",null,"树状数组",-1),jo=t("code",null,"数组",-1),No=t("code",null,"二分查找",-1),Vo={style:{"text-align":"left"}},Eo=t("td",{style:{"text-align":"center"}},"2031",-1),Ko={style:{"text-align":"left"}},Ro={href:"https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},To=t("td",{style:{"text-align":"center"}},null,-1),Ao={style:{"text-align":"left"}},Oo=t("code",null,"树状数组",-1),Po=t("code",null,"线段树",-1),Uo=t("code",null,"数组",-1),Do=t("code",null,"4+",-1),Fo={style:{"text-align":"left"}},Go=t("td",{style:{"text-align":"center"}},"2179",-1),Jo={style:{"text-align":"left"}},Qo={href:"https://leetcode.com/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},So=t("td",{style:{"text-align":"center"}},null,-1),Wo={style:{"text-align":"left"}},Xo=t("code",null,"树状数组",-1),Yo=t("code",null,"线段树",-1),Zo=t("code",null,"数组",-1),$o=t("code",null,"4+",-1),tn={style:{"text-align":"left"}},en=t("td",{style:{"text-align":"center"}},"2193",-1),ln={style:{"text-align":"left"}},on={href:"https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome",target:"_blank",rel:"noopener noreferrer"},nn=t("td",{style:{"text-align":"center"}},null,-1),dn={style:{"text-align":"left"}},sn=t("code",null,"贪心",-1),_n=t("code",null,"树状数组",-1),cn=t("code",null,"双指针",-1),an=t("code",null,"1+",-1),rn={style:{"text-align":"left"}},un=t("td",{style:{"text-align":"center"}},"2250",-1),hn={style:{"text-align":"left"}},fn={href:"https://leetcode.com/problems/count-number-of-rectangles-containing-each-point",target:"_blank",rel:"noopener noreferrer"},gn=t("td",{style:{"text-align":"center"}},null,-1),mn={style:{"text-align":"left"}},yn=t("code",null,"树状数组",-1),xn=t("code",null,"数组",-1),bn=t("code",null,"二分查找",-1),pn=t("code",null,"1+",-1),kn={style:{"text-align":"left"}},Hn=t("td",{style:{"text-align":"center"}},"2286",-1),qn={style:{"text-align":"left"}},In={href:"https://leetcode.com/problems/booking-concert-tickets-in-groups",target:"_blank",rel:"noopener noreferrer"},wn=t("td",{style:{"text-align":"center"}},null,-1),Mn={style:{"text-align":"left"}},vn=t("code",null,"设计",-1),Ln=t("code",null,"树状数组",-1),zn=t("code",null,"线段树",-1),Bn=t("code",null,"1+",-1),Cn={style:{"text-align":"left"}},jn=t("td",{style:{"text-align":"center"}},"2407",-1),Nn={style:{"text-align":"left"}},Vn={href:"https://leetcode.com/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},En=t("td",{style:{"text-align":"center"}},null,-1),Kn={style:{"text-align":"left"}},Rn=t("code",null,"树状数组",-1),Tn=t("code",null,"线段树",-1),An=t("code",null,"队列",-1),On=t("code",null,"4+",-1),Pn={style:{"text-align":"left"}},Un=t("td",{style:{"text-align":"center"}},"2424",-1),Dn={style:{"text-align":"left"}},Fn={href:"https://leetcode.com/problems/longest-uploaded-prefix",target:"_blank",rel:"noopener noreferrer"},Gn=t("td",{style:{"text-align":"center"}},null,-1),Jn={style:{"text-align":"left"}},Qn=t("code",null,"并查集",-1),Sn=t("code",null,"设计",-1),Wn=t("code",null,"树状数组",-1),Xn=t("code",null,"4+",-1),Yn={style:{"text-align":"left"}},Zn=t("td",{style:{"text-align":"center"}},"2426",-1),$n={style:{"text-align":"left"}},td={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},ed=t("td",{style:{"text-align":"center"}},null,-1),ld={style:{"text-align":"left"}},od=t("code",null,"树状数组",-1),nd=t("code",null,"线段树",-1),dd=t("code",null,"数组",-1),sd=t("code",null,"4+",-1),_d={style:{"text-align":"left"}},cd=t("td",{style:{"text-align":"center"}},"2519",-1),id={style:{"text-align":"left"}},ad={href:"https://leetcode.com/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},rd=t("td",{style:{"text-align":"center"}},null,-1),ud={style:{"text-align":"left"}},hd=t("code",null,"树状数组",-1),fd=t("code",null,"线段树",-1),gd=t("code",null,"数组",-1),md=t("code",null,"4+",-1),yd={style:{"text-align":"left"}},xd=t("td",{style:{"text-align":"center"}},"2552",-1),bd={style:{"text-align":"left"}},pd={href:"https://leetcode.com/problems/count-increasing-quadruplets",target:"_blank",rel:"noopener noreferrer"},kd=t("td",{style:{"text-align":"center"}},null,-1),Hd={style:{"text-align":"left"}},qd=t("code",null,"树状数组",-1),Id=t("code",null,"数组",-1),wd=t("code",null,"动态规划",-1),Md=t("code",null,"2+",-1),vd={style:{"text-align":"left"}},Ld=t("td",{style:{"text-align":"center"}},"2659",-1),zd={style:{"text-align":"left"}},Bd={href:"https://leetcode.com/problems/make-array-empty",target:"_blank",rel:"noopener noreferrer"},Cd=t("td",{style:{"text-align":"center"}},null,-1),jd={style:{"text-align":"left"}},Nd=t("code",null,"贪心",-1),Vd=t("code",null,"树状数组",-1),Ed=t("code",null,"线段树",-1),Kd=t("code",null,"4+",-1),Rd={style:{"text-align":"left"}},Td=t("td",{style:{"text-align":"center"}},"2736",-1),Ad={style:{"text-align":"left"}},Od={href:"https://leetcode.com/problems/maximum-sum-queries",target:"_blank",rel:"noopener noreferrer"},Pd=t("td",{style:{"text-align":"center"}},null,-1),Ud={style:{"text-align":"left"}},Dd=t("code",null,"栈",-1),Fd=t("code",null,"树状数组",-1),Gd=t("code",null,"线段树",-1),Jd=t("code",null,"4+",-1),Qd={style:{"text-align":"left"}},Sd=t("td",{style:{"text-align":"center"}},"2907",-1),Wd={style:{"text-align":"left"}},Xd={href:"https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-i",target:"_blank",rel:"noopener noreferrer"},Yd=t("td",{style:{"text-align":"center"}},null,-1),Zd={style:{"text-align":"left"}},$d=t("code",null,"树状数组",-1),ts=t("code",null,"线段树",-1),es=t("code",null,"数组",-1),ls={style:{"text-align":"left"}},os=t("td",{style:{"text-align":"center"}},"2916",-1),ns={style:{"text-align":"left"}},ds={href:"https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-ii",target:"_blank",rel:"noopener noreferrer"},ss=t("td",{style:{"text-align":"center"}},null,-1),_s={style:{"text-align":"left"}},cs=t("code",null,"树状数组",-1),is=t("code",null,"线段树",-1),as=t("code",null,"数组",-1),rs=t("code",null,"1+",-1),us={style:{"text-align":"left"}},hs=t("td",{style:{"text-align":"center"}},"2921",-1),fs={style:{"text-align":"left"}},gs={href:"https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-ii",target:"_blank",rel:"noopener noreferrer"},ms=t("td",{style:{"text-align":"center"}},null,-1),ys={style:{"text-align":"left"}},xs=t("code",null,"树状数组",-1),bs=t("code",null,"线段树",-1),ps=t("code",null,"数组",-1),ks={style:{"text-align":"left"}},Hs=t("td",{style:{"text-align":"center"}},"2926",-1),qs={style:{"text-align":"left"}},Is={href:"https://leetcode.com/problems/maximum-balanced-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},ws=t("td",{style:{"text-align":"center"}},null,-1),Ms={style:{"text-align":"left"}},vs=t("code",null,"树状数组",-1),Ls=t("code",null,"线段树",-1),zs=t("code",null,"数组",-1),Bs=t("code",null,"2+",-1),Cs={style:{"text-align":"left"}},js=t("td",{style:{"text-align":"center"}},"2940",-1),Ns={style:{"text-align":"left"}},Vs={href:"https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet",target:"_blank",rel:"noopener noreferrer"},Es=t("td",{style:{"text-align":"center"}},null,-1),Ks={style:{"text-align":"left"}},Rs=t("code",null,"栈",-1),Ts=t("code",null,"树状数组",-1),As=t("code",null,"线段树",-1),Os=t("code",null,"4+",-1),Ps={style:{"text-align":"left"}},Us=t("td",{style:{"text-align":"center"}},"3009",-1),Ds={style:{"text-align":"left"}},Fs={href:"https://leetcode.com/problems/maximum-number-of-intersections-on-the-chart",target:"_blank",rel:"noopener noreferrer"},Gs=t("td",{style:{"text-align":"center"}},null,-1),Js={style:{"text-align":"left"}},Qs=t("code",null,"树状数组",-1),Ss=t("code",null,"几何",-1),Ws=t("code",null,"数组",-1),Xs=t("code",null,"1+",-1),Ys={style:{"text-align":"left"}},Zs=t("td",{style:{"text-align":"center"}},"3072",-1),$s={style:{"text-align":"left"}},t_={href:"https://leetcode.com/problems/distribute-elements-into-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},e_=t("td",{style:{"text-align":"center"}},null,-1),l_={style:{"text-align":"left"}},o_=t("code",null,"树状数组",-1),n_=t("code",null,"线段树",-1),d_=t("code",null,"数组",-1),s_=t("code",null,"1+",-1),__={style:{"text-align":"left"}},c_=t("td",{style:{"text-align":"center"}},"3109",-1),i_={style:{"text-align":"left"}},a_={href:"https://leetcode.com/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},r_=t("td",{style:{"text-align":"center"}},null,-1),u_={style:{"text-align":"left"}},h_=t("code",null,"树状数组",-1),f_=t("code",null,"线段树",-1),g_=t("code",null,"数组",-1),m_=t("code",null,"4+",-1),y_={style:{"text-align":"left"}},x_=t("td",{style:{"text-align":"center"}},"3161",-1),b_={style:{"text-align":"left"}},p_={href:"https://leetcode.com/problems/block-placement-queries",target:"_blank",rel:"noopener noreferrer"},k_=t("td",{style:{"text-align":"center"}},null,-1),H_={style:{"text-align":"left"}},q_=t("code",null,"树状数组",-1),I_=t("code",null,"线段树",-1),w_=t("code",null,"数组",-1),M_=t("code",null,"1+",-1),v_={style:{"text-align":"left"}},L_=t("td",{style:{"text-align":"center"}},"3187",-1),z_={style:{"text-align":"left"}},B_={href:"https://leetcode.com/problems/peaks-in-array",target:"_blank",rel:"noopener noreferrer"},C_=t("td",{style:{"text-align":"center"}},null,-1),j_={style:{"text-align":"left"}},N_=t("code",null,"树状数组",-1),V_=t("code",null,"线段树",-1),E_=t("code",null,"数组",-1),K_={style:{"text-align":"left"}},R_=t("td",{style:{"text-align":"center"}},"3245",-1),T_={style:{"text-align":"left"}},A_={href:"https://leetcode.com/problems/alternating-groups-iii",target:"_blank",rel:"noopener noreferrer"},O_=t("td",{style:{"text-align":"center"}},null,-1),P_={style:{"text-align":"left"}},U_=t("code",null,"树状数组",-1),D_=t("code",null,"数组",-1),F_={style:{"text-align":"left"}},G_=t("td",{style:{"text-align":"center"}},"LCP 05",-1),J_={style:{"text-align":"left"}},Q_={href:"https://leetcode.cn/problems/coin-bonus",target:"_blank",rel:"noopener noreferrer"},S_=t("td",{style:{"text-align":"center"}},null,-1),W_={style:{"text-align":"left"}},X_=t("code",null,"树状数组",-1),Y_=t("code",null,"线段树",-1),Z_=t("code",null,"数组",-1),$_={style:{"text-align":"left"}},tc=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),ec={style:{"text-align":"left"}},lc={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},oc=t("td",{style:{"text-align":"center"}},null,-1),nc={style:{"text-align":"left"}},dc=t("code",null,"树状数组",-1),sc=t("code",null,"线段树",-1),_c=t("code",null,"数组",-1),cc=t("code",null,"4+",-1),ic={style:{"text-align":"left"}},ac=t("td",{style:{"text-align":"center"}},"面试题 10.10",-1),rc={style:{"text-align":"left"}},uc={href:"https://leetcode.cn/problems/rank-from-stream-lcci",target:"_blank",rel:"noopener noreferrer"},hc=t("td",{style:{"text-align":"center"}},null,-1),fc={style:{"text-align":"left"}},gc=t("code",null,"设计",-1),mc=t("code",null,"树状数组",-1),yc=t("code",null,"二分查找",-1),xc=t("code",null,"1+",-1),bc={style:{"text-align":"left"}};function pc(kc,Hc){const n=_("RouterLink"),d=_("ExternalLinkIcon"),s=_("font");return i(),a("div",null,[h,t("details",f,[g,m,t("p",null,[e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/matrix.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/doubly-linked-list.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/monotonic-stack.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/monotonic-queue.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/heap-priority-queue.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/hash-table.html"},{default:o(()=>[M]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/string-matching.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-tree.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-search-tree.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/minimum-spanning-tree.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/graph.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/ordered-set.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/topological-sort.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/shortest-path.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/strongly-connected-component.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/eulerian-circuit.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/biconnected-component.html"},{default:o(()=>[A]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/union-find.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/trie.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[U]),_:1}),l(),D,l(),e(n,{to:"/leetcode/outline/tag/suffix-array.html"},{default:o(()=>[F]),_:1})]),G,t("p",null,[e(n,{to:"/leetcode/outline/tag/enumeration.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/recursion.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/backtracking.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/greedy.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:o(()=>[Y]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/sorting.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/counting-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/radix-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/merge-sort.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/quickselect.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-search.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/memoization.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/two-pointers.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/counting.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/sliding-window.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/bitmask.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/hash-function.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/rolling-hash.html"},{default:o(()=>[gt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/line-sweep.html"},{default:o(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/leetcode/outline/tag/math.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/number-theory.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/geometry.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/game-theory.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/simulation.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/combinatorics.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/randomized.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/probability-and-statistics.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/reservoir-sampling.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/rejection-sampling.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/database.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/data-stream.html"},{default:o(()=>[Bt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/brainteaser.html"},{default:o(()=>[Ct]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/interactive.html"},{default:o(()=>[jt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/iterator.html"},{default:o(()=>[Nt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/concurrency.html"},{default:o(()=>[Vt]),_:1})])]),Et,r(" prettier-ignore "),t("table",null,[Kt,t("tbody",null,[t("tr",null,[Rt,t("td",Tt,[t("a",At,[l("天际线问题"),e(d)])]),Ot,t("td",Pt,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ut]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Dt]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Ft]),_:1}),l(),Gt]),t("td",Jt,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Qt,t("td",St,[t("a",Wt,[l("区域和检索 - 数组可修改"),e(d)])]),t("td",Xt,[t("a",Yt,[l("[✓]"),e(d)])]),t("td",Zt,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[$t]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[te]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[ee]),_:1}),l(),le]),t("td",oe,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ne,t("td",de,[t("a",se,[l("二维区域和检索 - 矩阵可修改"),e(d)])]),_e,t("td",ce,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[ie]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[ae]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[re]),_:1}),l(),ue]),t("td",he,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[fe,t("td",ge,[t("a",me,[l("计算右侧小于当前元素的个数"),e(d)])]),ye,t("td",xe,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[be]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[pe]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[ke]),_:1}),l(),He]),t("td",qe,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ie,t("td",we,[t("a",Me,[l("区间和的个数"),e(d)])]),ve,t("td",Le,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[ze]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Be]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Ce]),_:1}),l(),je]),t("td",Ne,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ve,t("td",Ee,[t("a",Ke,[l("根据身高重建队列"),e(d)])]),Re,t("td",Te,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ae]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Oe]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Pe]),_:1}),l(),Ue]),t("td",De,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Fe,t("td",Ge,[t("a",Je,[l("翻转对"),e(d)])]),Qe,t("td",Se,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[We]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Xe]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Ye]),_:1}),l(),Ze]),t("td",$e,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[tl,t("td",el,[t("a",ll,[l("最长递增子序列的个数"),e(d)])]),ol,t("td",nl,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[dl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[sl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[_l]),_:1}),l(),cl]),t("td",il,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[al,t("td",rl,[t("a",ul,[l("K 个关闭的灯泡"),e(d)])]),hl,t("td",fl,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[gl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[ml]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:o(()=>[yl]),_:1}),l(),xl]),t("td",bl,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[pl,t("td",kl,[t("a",Hl,[l("子数组中占绝大多数的元素"),e(d)])]),ql,t("td",Il,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[wl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ml]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[vl]),_:1}),l(),Ll]),t("td",zl,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Bl,t("td",Cl,[t("a",jl,[l("统计作战单位数"),e(d)])]),Nl,t("td",Vl,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[El]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Kl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Rl]),_:1}),l(),Tl]),t("td",Al,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ol,t("td",Pl,[t("a",Ul,[l("查询带键的排列"),e(d)])]),Dl,t("td",Fl,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Gl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Jl]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/simulation.html"},{default:o(()=>[Ql]),_:1})]),t("td",Sl,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Wl,t("td",Xl,[t("a",Yl,[l("最多 K 次交换相邻数位后得到的最小整数"),e(d)])]),Zl,t("td",$l,[e(n,{to:"/leetcode/outline/tag/greedy.html"},{default:o(()=>[to]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[eo]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[lo]),_:1}),l(),oo]),t("td",no,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[so,t("td",_o,[t("a",co,[l("通过指令创建有序数组"),e(d)])]),io,t("td",ao,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[ro]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[uo]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[ho]),_:1}),l(),fo]),t("td",go,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[mo,t("td",yo,[t("a",xo,[l("设计最近使用（MRU）队列"),e(d)])]),bo,t("td",po,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:o(()=>[ko]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[Ho]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[qo]),_:1}),l(),Io]),t("td",wo,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Mo,t("td",vo,[t("a",Lo,[l("找出到每个位置为止最长的有效障碍赛跑路线"),e(d)])]),zo,t("td",Bo,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Co]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[jo]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-search.html"},{default:o(()=>[No]),_:1})]),t("td",Vo,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Eo,t("td",Ko,[t("a",Ro,[l("1 比 0 多的子数组个数"),e(d)])]),To,t("td",Ao,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Oo]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Po]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Uo]),_:1}),l(),Do]),t("td",Fo,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Go,t("td",Jo,[t("a",Qo,[l("统计数组中好三元组数目"),e(d)])]),So,t("td",Wo,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Xo]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Yo]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Zo]),_:1}),l(),$o]),t("td",tn,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[en,t("td",ln,[t("a",on,[l("得到回文串的最少操作次数"),e(d)])]),nn,t("td",dn,[e(n,{to:"/leetcode/outline/tag/greedy.html"},{default:o(()=>[sn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[_n]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/two-pointers.html"},{default:o(()=>[cn]),_:1}),l(),an]),t("td",rn,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[un,t("td",hn,[t("a",fn,[l("统计包含每个点的矩形数目"),e(d)])]),gn,t("td",mn,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[yn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[xn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-search.html"},{default:o(()=>[bn]),_:1}),l(),pn]),t("td",kn,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Hn,t("td",qn,[t("a",In,[l("以组为单位订音乐会的门票"),e(d)])]),wn,t("td",Mn,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[vn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ln]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[zn]),_:1}),l(),Bn]),t("td",Cn,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[jn,t("td",Nn,[t("a",Vn,[l("最长递增子序列 II"),e(d)])]),En,t("td",Kn,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Rn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Tn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:o(()=>[An]),_:1}),l(),On]),t("td",Pn,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Un,t("td",Dn,[t("a",Fn,[l("最长上传前缀"),e(d)])]),Gn,t("td",Jn,[e(n,{to:"/leetcode/outline/tag/union-find.html"},{default:o(()=>[Qn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[Sn]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Wn]),_:1}),l(),Xn]),t("td",Yn,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Zn,t("td",$n,[t("a",td,[l("满足不等式的数对数目"),e(d)])]),ed,t("td",ld,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[od]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[nd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[dd]),_:1}),l(),sd]),t("td",_d,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[cd,t("td",id,[t("a",ad,[l("统计 K-Big 索引的数量"),e(d)])]),rd,t("td",ud,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[hd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[fd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[gd]),_:1}),l(),md]),t("td",yd,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[xd,t("td",bd,[t("a",pd,[l("统计上升四元组"),e(d)])]),kd,t("td",Hd,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[qd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Id]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:o(()=>[wd]),_:1}),l(),Md]),t("td",vd,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ld,t("td",zd,[t("a",Bd,[l("将数组清空"),e(d)])]),Cd,t("td",jd,[e(n,{to:"/leetcode/outline/tag/greedy.html"},{default:o(()=>[Nd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Vd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Ed]),_:1}),l(),Kd]),t("td",Rd,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Td,t("td",Ad,[t("a",Od,[l("最大和查询"),e(d)])]),Pd,t("td",Ud,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:o(()=>[Dd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Fd]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Gd]),_:1}),l(),Jd]),t("td",Qd,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Sd,t("td",Wd,[t("a",Xd,[l("价格递增的最大利润三元组 I"),e(d)])]),Yd,t("td",Zd,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[$d]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[ts]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[es]),_:1})]),t("td",ls,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[os,t("td",ns,[t("a",ds,[l("子数组不同元素数目的平方和 II"),e(d)])]),ss,t("td",_s,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[cs]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[is]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[as]),_:1}),l(),rs]),t("td",us,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[hs,t("td",fs,[t("a",gs,[l("价格递增的最大利润三元组 II"),e(d)])]),ms,t("td",ys,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[xs]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[bs]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[ps]),_:1})]),t("td",ks,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Hs,t("td",qs,[t("a",Is,[l("平衡子序列的最大和"),e(d)])]),ws,t("td",Ms,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[vs]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Ls]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[zs]),_:1}),l(),Bs]),t("td",Cs,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[js,t("td",Ns,[t("a",Vs,[l("找到 Alice 和 Bob 可以相遇的建筑"),e(d)])]),Es,t("td",Ks,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:o(()=>[Rs]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ts]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[As]),_:1}),l(),Os]),t("td",Ps,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Us,t("td",Ds,[t("a",Fs,[l("折线图上的最大交点数量"),e(d)])]),Gs,t("td",Js,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Qs]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/geometry.html"},{default:o(()=>[Ss]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Ws]),_:1}),l(),Xs]),t("td",Ys,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Zs,t("td",$s,[t("a",t_,[l("将元素分配到两个数组中 II"),e(d)])]),e_,t("td",l_,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[o_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[n_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[d_]),_:1}),l(),s_]),t("td",__,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[c_,t("td",i_,[t("a",a_,[l("查找排列的下标"),e(d)])]),r_,t("td",u_,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[h_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[f_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[g_]),_:1}),l(),m_]),t("td",y_,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[x_,t("td",b_,[t("a",p_,[l("物块放置查询"),e(d)])]),k_,t("td",H_,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[q_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[I_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[w_]),_:1}),l(),M_]),t("td",v_,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[L_,t("td",z_,[t("a",B_,[l("数组中的峰值"),e(d)])]),C_,t("td",j_,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[N_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[V_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[E_]),_:1})]),t("td",K_,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[R_,t("td",T_,[t("a",A_,[l("交替组 III"),e(d)])]),O_,t("td",P_,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[U_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[D_]),_:1})]),t("td",F_,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[G_,t("td",J_,[t("a",Q_,[l("发 LeetCoin"),e(d)])]),S_,t("td",W_,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[X_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[Y_]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[Z_]),_:1})]),t("td",$_,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[tc,t("td",ec,[t("a",lc,[l("数组中的逆序对"),e(d)])]),oc,t("td",nc,[e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[dc]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:o(()=>[sc]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:o(()=>[_c]),_:1}),l(),cc]),t("td",ic,[e(s,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ac,t("td",rc,[t("a",uc,[l("数字流的秩"),e(d)])]),hc,t("td",fc,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:o(()=>[gc]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:o(()=>[mc]),_:1}),l(),e(n,{to:"/leetcode/outline/tag/binary-search.html"},{default:o(()=>[yc]),_:1}),l(),xc]),t("td",bc,[e(s,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])])])])])}const Ic=c(u,[["render",pc],["__file","binary-indexed-tree.html.vue"]]);export{Ic as default};
