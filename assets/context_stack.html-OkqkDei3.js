import{_ as n,o as s,c as a,e as t}from"./app-b4s7f53x.js";const o={},e=t(`<h1 id="javascript-中执行上下文和执行栈是什么" tabindex="-1"><a class="header-anchor" href="#javascript-中执行上下文和执行栈是什么" aria-hidden="true">#</a> JavaScript 中执行上下文和执行栈是什么？</h1><h2 id="一、执行上下文-execution-context" tabindex="-1"><a class="header-anchor" href="#一、执行上下文-execution-context" aria-hidden="true">#</a> 一、执行上下文（Execution Context）</h2><p><strong>执行上下文</strong>是 JavaScript 代码执行的运行环境，包含了变量、函数及其作用域链等关键信息。任何 JavaScript 代码都必须运行在某个执行上下文中。</p><p>执行上下文的类型有以下三种：</p><ol><li><p><strong>全局执行上下文</strong></p><ul><li>全局代码的默认环境。</li><li>创建时会绑定一个全局对象（浏览器中为 <code>window</code>，Node.js 中为 <code>global</code>），并将 <code>this</code> 指向全局对象。</li></ul></li><li><p><strong>函数执行上下文</strong></p><ul><li>每当一个函数被调用时，都会为该函数创建一个新的执行上下文。</li><li>包含函数内部的变量、参数和 <code>this</code> 的绑定。</li></ul></li><li><p><strong>Eval 执行上下文</strong></p><ul><li>仅在 <code>eval()</code> 函数中运行的代码会创建此上下文。</li><li>较少使用且不推荐。</li></ul></li></ol><h2 id="二、执行上下文的生命周期" tabindex="-1"><a class="header-anchor" href="#二、执行上下文的生命周期" aria-hidden="true">#</a> 二、执行上下文的生命周期</h2><p>每个执行上下文都有完整的生命周期，由以下三个阶段组成：</p><ol><li><p><strong>创建阶段</strong></p><ul><li><strong>确定 <code>this</code> 的值（This Binding）</strong><br> 根据调用方式确定 <code>this</code> 的值（全局上下文中指向全局对象，函数上下文中取决于调用形式）。</li><li><strong>创建词法环境（Lexical Environment）</strong><ul><li>包含环境记录（存储变量和函数声明）和外部环境的引用（作用域链）。</li><li>全局环境与函数环境的结构不同，全局环境的外部引用为 <code>null</code>。</li></ul></li><li><strong>创建变量环境（Variable Environment）</strong><ul><li>类似于词法环境，但专门用于处理 <code>var</code> 声明的变量。</li><li>在 ES6 中，<code>let</code> 和 <code>const</code> 被存储在词法环境中，而 <code>var</code> 被存储在变量环境中。</li></ul></li></ul></li><li><p><strong>执行阶段</strong></p><ul><li>变量和函数声明被赋值。</li><li>执行具体代码。</li></ul></li><li><p><strong>销毁阶段</strong></p><ul><li>当前执行上下文被销毁，内存释放。</li><li>若该上下文有闭包引用，则可能不会立即销毁。</li></ul></li></ol><h2 id="三、执行栈-execution-stack" tabindex="-1"><a class="header-anchor" href="#三、执行栈-execution-stack" aria-hidden="true">#</a> 三、执行栈（Execution Stack）</h2><p><strong>执行栈</strong>（又称调用栈）是一种后进先出（LIFO）的数据结构，用于管理代码执行过程中创建的执行上下文。</p><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h3><ol><li><p><strong>全局执行上下文入栈</strong><br> 脚本开始执行时，全局执行上下文被压入栈中。</p></li><li><p><strong>函数执行上下文入栈</strong><br> 每当函数被调用时，都会为该函数创建新的执行上下文并压入栈顶。</p></li><li><p><strong>执行栈顶上下文</strong><br> JavaScript 引擎总是运行栈顶的执行上下文。</p></li><li><p><strong>函数执行完毕</strong><br> 栈顶的执行上下文被弹出，控制权回到下一个上下文。</p></li><li><p><strong>全局执行上下文出栈</strong><br> 所有代码执行完毕后，全局执行上下文出栈，执行栈清空。</p></li></ol><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inside bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Global end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>栈变化</strong>：</p><table><thead><tr><th>执行步骤</th><th>执行栈内容</th></tr></thead><tbody><tr><td>初始化</td><td><code>[Global]</code></td></tr><tr><td>调用 <code>foo()</code></td><td><code>[Global, foo]</code></td></tr><tr><td>调用 <code>bar()</code></td><td><code>[Global, foo, bar]</code></td></tr><tr><td><code>bar()</code> 执行完毕</td><td><code>[Global, foo]</code></td></tr><tr><td><code>foo()</code> 执行完毕</td><td><code>[Global]</code></td></tr><tr><td>全局上下文结束</td><td><code>[]</code></td></tr></tbody></table><p>通过图表和过程，可以直观了解 JavaScript 如何管理代码执行和上下文。</p><h2 id="四、注意事项" tabindex="-1"><a class="header-anchor" href="#四、注意事项" aria-hidden="true">#</a> 四、注意事项</h2><ol><li><p><strong>变量提升</strong></p><ul><li>在创建阶段，<code>var</code> 声明的变量会被初始化为 <code>undefined</code>。</li><li><code>let</code> 和 <code>const</code> 声明的变量处于<strong>暂时性死区</strong>，必须等执行到声明语句才能访问。</li></ul></li><li><p><strong>闭包</strong><br> 闭包引用了外部上下文中的变量，可能会延长执行上下文的生命周期，导致变量无法被销毁。</p></li><li><p><strong>递归调用</strong><br> 每次递归调用都会生成新的执行上下文。如果递归层数过多，可能导致栈溢出。</p></li></ol>`,19),i=[e];function c(l,p){return s(),a("div",null,i)}const r=n(o,[["render",c],["__file","context_stack.html.vue"]]);export{r as default};
