import{_ as u}from"./react-3-LIJpDU1r.js";import{_ as r,r as c,o as k,c as d,a as n,b as s,d as o,w as a,e as l}from"./app--DHkBL1B.js";const m={},v=n("h1",{id:"_5-实现-render-阶段",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-实现-render-阶段","aria-hidden":"true"},"#"),s(" 5. 实现 Render 阶段")],-1),b={class:"hint-container info"},w=n("p",{class:"hint-container-title"},"摘要",-1),g=n("ul",null,[n("li",null,"开发环境打印日志"),n("li",null,"实现 beginWork"),n("li",null,"实现 completeWork"),n("li",null,"位运算简介")],-1),y={href:"https://github.com/2xiao/my-react/tree/v1.5",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"git tag v1.5",-1),h=l(`<p>在上一节，我们探讨了 React 应用在首次渲染或后续更新时的整体更新流程。在 <code>Reconciler</code> 工作流程中，<code>beginWork</code> 和 <code>completeWork</code> 两个方法起到了关键作用。<code>beginWork</code> 负责构建表示更新的 Fiber 树，而 <code>completeWork</code> 则将这个 Fiber 树映射到实际的 DOM 结构上。接下来，我们将深入实现这两个方法。</p><h2 id="_1-开发环境打印日志" tabindex="-1"><a class="header-anchor" href="#_1-开发环境打印日志" aria-hidden="true">#</a> 1. 开发环境打印日志</h2><p>首先，在开发环境下增加 <code>__DEV__</code> 标识，以便在开发环境中方便地打印日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span> @rollup/plugin-replace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，在 <code>scripts/rollup/utils.js</code> 中引入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// scripts/rollup/utils.js</span>
<span class="token comment">// ...</span>
<span class="token keyword">import</span> replace <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-replace&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getBaseRollupPlugins</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
	alias <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">__DEV__</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	typescript <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">replace</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ts</span><span class="token punctuation">(</span>typescript<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以在开发环境中打印日志了。</p><h2 id="_2-实现-beginwork" tabindex="-1"><a class="header-anchor" href="#_2-实现-beginwork" aria-hidden="true">#</a> 2. 实现 beginWork</h2><p><code>beginWork</code> 函数在向下遍历阶段执行，根据 Fiber 节点的类型（<code>HostRoot</code>、<code>HostComponent</code>、<code>HostText</code>）分发任务给不同的处理函数，处理具体节点类型的更新逻辑：</p><ul><li><p><strong>HostRoot</strong></p><ul><li>表示根节点，即应用的最顶层节点；</li><li>调用 <code>updateHostRoot</code> 函数，处理根节点的更新，包括协调处理根节点的属性以及子节点的更新逻辑；</li><li>调用 <code>reconcileChildren</code> 函数，处理根节点的子节点，可能会递归调用其他协调函数；</li><li>返回 <code>workInProgress.child</code> 表示经过协调后的新的子节点链表；</li></ul></li><li><p><strong>HostComponent</strong></p><ul><li>表示原生 DOM 元素节点，例如 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code> 等；</li><li>调用 <code>updateHostComponent</code> 函数，处理原生 DOM 元素节点的更新，负责协调处理属性和子节点的更新逻辑；</li><li>调用 <code>reconcileChildren</code> 函数，处理原生 DOM 元素的子节点更新；</li><li>返回 <code>workInProgress.child</code> 表示经过协调后的新的子节点链表；</li></ul></li><li><p><strong>HostText</strong></p><ul><li>表示文本节点，即 DOM 中的文本内容，例如 <code>&lt;p&gt;123&lt;/p&gt;</code> 中的 <code>123</code>；</li><li>调用 <code>updateHostText</code> 函数，协调处理文本节点的内容更新；</li><li>返回 <code>null</code> 表示已经是叶子节点，没有子节点了；</li></ul></li></ul><p>其中 <code>reconcileChildren</code> 函数的作用是，通过对比子节点的 <code>current FiberNode</code> 与 子节点的 <code>ReactElement</code>，来生成子节点对应的 <code>workInProgress FiberNode</code>。（<code>current</code> 是与视图中真实 UI 对应的 Fiber 树，<code>workInProgress</code> 是触发更新后正在 Reconciler 中计算的 Fiber 树。）</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/beginWork.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactElementType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;shared/ReactTypes&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FiberNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fiber&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UpdateQueue<span class="token punctuation">,</span> processUpdateQueue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./updateQueue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HostComponent<span class="token punctuation">,</span> HostRoot<span class="token punctuation">,</span> HostText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workTags&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> reconcileChildFibers<span class="token punctuation">,</span> mountChildFibers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./childFiber&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 比较并返回子 FiberNode</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">beginWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> HostRoot<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">updateHostRoot</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> HostComponent<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> HostText<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">updateHostText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;beginWork 未实现的类型&#39;</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">updateHostRoot</span><span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 根据当前节点和工作中节点的状态进行比较，处理属性等更新逻辑</span>
	<span class="token keyword">const</span> baseState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
	<span class="token keyword">const</span> updateQueue <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>updateQueue <span class="token keyword">as</span> UpdateQueue<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> pending <span class="token operator">=</span> updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>
	<span class="token comment">// 清空更新链表</span>
	updateQueue<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token comment">// 计算待更新状态的最新值</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> memoizedState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">processUpdateQueue</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> pending<span class="token punctuation">)</span><span class="token punctuation">;</span>
	workInProgress<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> memoizedState<span class="token punctuation">;</span>

	<span class="token comment">// 处理子节点的更新逻辑</span>
	<span class="token keyword">const</span> nextChildren <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
	<span class="token function">reconcileChildren</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 返回新的子节点</span>
	<span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> nextProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
	<span class="token keyword">const</span> nextChildren <span class="token operator">=</span> nextProps<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
	<span class="token function">reconcileChildren</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateHostText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 没有子节点，直接返回 null</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 对比子节点的 current FiberNode 与 子节点的 ReactElement</span>
<span class="token comment">// 生成子节点对应的 workInProgress FiberNode</span>
<span class="token keyword">function</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>
	workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	children<span class="token operator">?</span><span class="token operator">:</span> ReactElementType
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// alternate 指向节点的备份节点，即 current</span>
	<span class="token keyword">const</span> current <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 组件的更新阶段</span>
		workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>
			workInProgress<span class="token punctuation">,</span>
			current<span class="token operator">?.</span>child<span class="token punctuation">,</span>
			children
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 首屏渲染阶段</span>
		workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">mountChildFibers</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reconcileChildren</code> 函数中调用了 <code>reconcileChildFibers</code> 和 <code>mountChildFibers</code> 两个函数，它们分别负责处理更新阶段和首次渲染阶段的子节点协调。</p><ul><li><p><strong>reconcileChildFibers:</strong></p><ul><li><code>reconcileChildFibers</code> 函数作用于组件的更新阶段，即当组件已经存在于 DOM 中，需要进行更新时。</li><li>主要任务是协调处理当前组件实例的子节点，对比之前的子节点（<code>current</code>）和新的子节点（<code>workInProgress</code>）之间的变化。</li><li>根据子节点的类型和 key 进行对比，决定是复用、更新、插入还是删除子节点，最终形成新的子节点链表。</li></ul></li><li><p><strong>mountChildFibers:</strong></p><ul><li><code>mountChildFibers</code> 函数作用于组件的首次渲染阶段，即当组件第一次被渲染到 DOM 中时。</li><li>主要任务是协调处理首次渲染时组件实例的子节点。</li><li>但此时是首次渲染，没有之前的子节点，所以主要是创建新的子节点链表。</li></ul></li></ul>`,15),_=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/childFiber.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ReactElementType "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'shared/ReactTypes'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(" createFiberFromElement "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./fiber'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token constant"},"REACT_ELEMENT_TYPE"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'shared/ReactSymbols'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" HostText "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./workTags'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Placement "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./fiberFlags'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"ChildReconciler"),n("span",{class:"token punctuation"},"("),s("shouldTrackSideEffects"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"boolean"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 处理单个 Element 节点的情况"),s(`
	`),n("span",{class:"token comment"},"// 对比 currentFiber 与 ReactElement"),s(`
	`),n("span",{class:"token comment"},"// 生成 workInProgress FiberNode"),s(`
	`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reconcileSingleElement"),n("span",{class:"token punctuation"},"("),s(`
		returnFiber`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
		currentFiber`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
		element`),n("span",{class:"token operator"},":"),s(` ReactElementType
	`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" fiber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createFiberFromElement"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		fiber`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" returnFiber"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// 处理文本节点的情况"),s(`
	`),n("span",{class:"token comment"},"// 对比 currentFiber 与 ReactElement"),s(`
	`),n("span",{class:"token comment"},"// 生成 workInProgress FiberNode"),s(`
	`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reconcileSingleTextNode"),n("span",{class:"token punctuation"},"("),s(`
		returnFiber`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
		currentFiber`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
		content`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"number"),s(`
	`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" fiber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FiberNode"),n("span",{class:"token punctuation"},"("),s("HostText"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" content "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		fiber`),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(" returnFiber"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// 为 Fiber 节点添加更新 flags"),s(`
	`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"placeSingleChild"),n("span",{class:"token punctuation"},"("),s("fiber"),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 首屏渲染且追踪副作用时，才添加更新 flags"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("shouldTrackSideEffects "),n("span",{class:"token operator"},"&&"),s(" fiber"),n("span",{class:"token punctuation"},"."),s("alternate "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			fiber`),n("span",{class:"token punctuation"},"."),s("flags "),n("span",{class:"token operator"},"|="),s(" Placement"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// 闭包，根绝 shouldTrackSideEffects 返回不同 reconcileChildFibers 的实现"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reconcileChildFibers"),n("span",{class:"token punctuation"},"("),s(`
		returnFiber`),n("span",{class:"token operator"},":"),s(" FiberNode"),n("span",{class:"token punctuation"},","),s(`
		currentFiber`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
		newChild`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(` ReactElementType
	`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 判断当前 fiber 的类型"),s(`
		`),n("span",{class:"token comment"},"// 单个 Element 节点"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" newChild "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" newChild "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"switch"),s(),n("span",{class:"token punctuation"},"("),s("newChild"),n("span",{class:"token punctuation"},"."),s("$$"),n("span",{class:"token keyword"},"typeof"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token constant"},"REACT_ELEMENT_TYPE"),n("span",{class:"token operator"},":"),s(`
					`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"placeSingleChild"),n("span",{class:"token punctuation"},"("),s(`
						`),n("span",{class:"token function"},"reconcileSingleElement"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},","),s(" newChild"),n("span",{class:"token punctuation"},")"),s(`
					`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

				`),n("span",{class:"token keyword"},"default"),n("span",{class:"token operator"},":"),s(`
					`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
						`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'未实现的 reconcile 类型'"),n("span",{class:"token punctuation"},","),s(" newChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
					`),n("span",{class:"token punctuation"},"}"),s(`
					`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`

		`),n("span",{class:"token comment"},"// 多个 Element 节点"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("newChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// TODO: 暂时不处理"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'未实现的 reconcile 类型'"),n("span",{class:"token punctuation"},","),s(" newChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`

		`),n("span",{class:"token comment"},"// 文本节点"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" newChild "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},"'string'"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token keyword"},"typeof"),s(" newChild "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},"'number'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"placeSingleChild"),n("span",{class:"token punctuation"},"("),s(`
				`),n("span",{class:"token function"},"reconcileSingleTextNode"),n("span",{class:"token punctuation"},"("),s("returnFiber"),n("span",{class:"token punctuation"},","),s(" currentFiber"),n("span",{class:"token punctuation"},","),s(" newChild"),n("span",{class:"token punctuation"},")"),s(`
			`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`

		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'未实现的 reconcile 类型'"),n("span",{class:"token punctuation"},","),s(" newChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 组件的更新阶段中，追踪副作用"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" reconcileChildFibers "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ChildReconciler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 首屏渲染阶段中不追踪副作用，只对根节点执行一次 DOM 插入操作"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" mountChildFibers "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ChildReconciler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/fiber.ts"),s(`
`),n("span",{class:"token comment"},"// ..."),s(`

`),n("span",{class:"token comment"},"// 根据 DOM 节点创建新的 Fiber 节点"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createFiberFromElement"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token operator"},":"),s(" ReactElementType"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" props "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" element"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fiberTag"),n("span",{class:"token operator"},":"),s(" WorkTag "),n("span",{class:"token operator"},"="),s(" FunctionComponent"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" type "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},"'string'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 如: <div/> 的 type: 'div'"),s(`
		fiberTag `),n("span",{class:"token operator"},"="),s(" HostComponent"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" type "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'function'"),s(),n("span",{class:"token operator"},"&&"),s(" __DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'未定义的 type 类型'"),n("span",{class:"token punctuation"},","),s(" element"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token keyword"},"const"),s(" fiber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FiberNode"),n("span",{class:"token punctuation"},"("),s("fiberTag"),n("span",{class:"token punctuation"},","),s(" props"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	fiber`),n("span",{class:"token punctuation"},"."),s("type "),n("span",{class:"token operator"},"="),s(" type"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" fiber"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=l(`<h2 id="_3-实现-completework" tabindex="-1"><a class="header-anchor" href="#_3-实现-completework" aria-hidden="true">#</a> 3. 实现 completeWork</h2><p><code>completeWork</code> 函数在向上遍历阶段执行，根据 Fiber 节点的类型（<code>HostRoot</code>、<code>HostComponent</code>、<code>HostText</code> 等）构建 DOM 节点，收集更新 flags，并根据更新 flags 执行不同的 DOM 操作：</p><ul><li><p><strong>HostComponent:</strong></p><ul><li>表示原生 DOM 元素节点；</li><li>构建 DOM 节点，并调用 <code>appendAllChildren</code> 函数将 DOM 插入到 DOM 树中；</li><li>收集更新 flags，并根据更新 flags 执行不同的 DOM 操作，例如插入新节点、更新节点属性、删除节点等；</li></ul></li><li><p><strong>HostText:</strong></p><ul><li>表示文本节点；</li><li>构建 DOM 节点，并将 DOM 插入到 DOM 树中；</li><li>收集更新 flags，根据 flags 的值，更新文本节点的内容；</li></ul></li><li><p><strong>HostRoot:</strong></p><ul><li>表示根节点；</li><li>会执行一些与根节点相关的最终操作，例如处理根节点的属性，确保整个应用更新完毕；</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/completeWork.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
	appendInitialChild<span class="token punctuation">,</span>
	createInstance<span class="token punctuation">,</span>
	createTextInstance
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;hostConfig&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FiberNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fiber&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HostComponent<span class="token punctuation">,</span> HostRoot<span class="token punctuation">,</span> HostText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workTags&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NoFlags <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fiberFlags&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 生成更新计划，计算和收集更新 flags</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">completeWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
	<span class="token keyword">const</span> current <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> HostRoot<span class="token operator">:</span>
			<span class="token function">bubbleProperties</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

		<span class="token keyword">case</span> HostComponent<span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// TODO: 组件的更新阶段</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 首屏渲染阶段</span>
				<span class="token comment">// 构建 DOM</span>
				<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 将 DOM 插入到 DOM 树中</span>
				<span class="token function">appendAllChildren</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
				workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 收集更新 flags</span>
			<span class="token function">bubbleProperties</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

		<span class="token keyword">case</span> HostText<span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// TODO: 组件的更新阶段</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 首屏渲染阶段</span>
				<span class="token comment">// 构建 DOM</span>
				<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createTextInstance</span><span class="token punctuation">(</span>newProps<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
				workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 收集更新 flags</span>
			<span class="token function">bubbleProperties</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;completeWork 未实现的类型&#39;</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>appendAllChildren</code> 函数负责递归地将组件的子节点添加到指定的 <code>parent</code> 中，它通过深度优先遍历 <code>workInProgress</code> 的子节点链表，处理每个子节点的类型。先处理当前节点的所有子节点，再处理兄弟节点。</p><p>如果它是原生 DOM 元素节点或文本节点，则将其添加到父节点中；如果是其他类型的组件节点并且有子节点，则递归处理其子节点。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/completeWork.ts</span>
<span class="token comment">// ...</span>

<span class="token keyword">function</span> <span class="token function">appendAllChildren</span><span class="token punctuation">(</span>
	parent<span class="token operator">:</span> Container <span class="token operator">|</span> Instance<span class="token punctuation">,</span>
	workInProgress<span class="token operator">:</span> FiberNode
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> node <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag <span class="token operator">==</span> HostComponent <span class="token operator">||</span> node<span class="token punctuation">.</span>tag <span class="token operator">==</span> HostText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 处理原生 DOM 元素节点或文本节点</span>
			<span class="token function">appendInitialChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 递归处理其他类型的组件节点的子节点</span>
			node<span class="token punctuation">.</span>child<span class="token punctuation">.</span>return <span class="token operator">=</span> node<span class="token punctuation">;</span>
			node <span class="token operator">=</span> node<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> workInProgress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>sibling <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>return <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>return <span class="token operator">===</span> workInProgress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			node <span class="token operator">=</span> node<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 处理下一个兄弟节点</span>
		node<span class="token punctuation">.</span>sibling<span class="token punctuation">.</span>return <span class="token operator">=</span> node<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
		node <span class="token operator">=</span> node<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>bubbleProperties</code> 函数则负责在 <code>completeWork</code> 函数向上遍历的过程中，通过向上冒泡子节点的 flags，将所有更新 flags 收集到根节点。主要包含以下步骤：</p><ul><li>从当前需要冒泡属性的 Fiber 节点开始，检查是否有需要冒泡的属性。</li><li>如果当前节点有需要冒泡的属性，将这些属性冒泡到父节点的 <code>subtreeFlags</code> 或其他适当的属性中。</li><li>递归调用 <code>bubbleProperties</code> 函数，处理父节点，将属性继续冒泡到更上层的祖先节点，直至达到根节点。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/completeWork.ts</span>
<span class="token comment">// ...</span>

<span class="token comment">// 收集更新 flags，将子 FiberNode 的 flags 冒泡到父 FiberNode 上</span>
<span class="token keyword">function</span> <span class="token function">bubbleProperties</span><span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> subtreeFlags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>
	<span class="token keyword">let</span> child <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		subtreeFlags <span class="token operator">|=</span> child<span class="token punctuation">.</span>subtreeFlags<span class="token punctuation">;</span>
		subtreeFlags <span class="token operator">|=</span> child<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>

		child<span class="token punctuation">.</span>return <span class="token operator">=</span> workInProgress<span class="token punctuation">;</span>
		child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	workInProgress<span class="token punctuation">.</span>subtreeFlags <span class="token operator">|=</span> subtreeFlags<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-位运算简介" tabindex="-1"><a class="header-anchor" href="#_4-位运算简介" aria-hidden="true">#</a> 4. 位运算简介</h2><p>flags 是 React 中很重要的一环，具体作用是通过二进制在每个 Fiber 节点保存其本身与子节点的 flags。在保存与处理 flags 时，使用了一些二进制运算符，我们来复习一下：</p><h3 id="_1-运算" tabindex="-1"><a class="header-anchor" href="#_1-运算" aria-hidden="true">#</a> 1. <code>|</code> 运算</h3><p><code>|</code> 运算的两个位都为 0 时，结果才为 0：</p><ul><li><code>1 | 1 = 1</code></li><li><code>1 | 0 = 1</code></li><li><code>0 | 0 = 0</code></li></ul><p>React 利用了 <code>|</code> 运算符的特性来存储 flags，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> NoFlags <span class="token operator">=</span> <span class="token comment">/*            */</span> <span class="token number">0b0000000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> PerformedWork <span class="token operator">=</span> <span class="token comment">/*      */</span> <span class="token number">0b0000001</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Placement <span class="token operator">=</span> <span class="token comment">/*          */</span> <span class="token number">0b0000010</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Update <span class="token operator">=</span> <span class="token comment">/*             */</span> <span class="token number">0b0000100</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ChildDeletion <span class="token operator">=</span> <span class="token comment">/*      */</span> <span class="token number">0b0001000</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> flags <span class="token operator">=</span> Placement <span class="token operator">|</span> Update<span class="token punctuation">;</span> <span class="token comment">//此时 flags = 0b0000110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-运算" tabindex="-1"><a class="header-anchor" href="#_2-运算" aria-hidden="true">#</a> 2. <code>&amp;</code> 运算</h3><p><code>&amp;</code> 运算的两个位都为 1 时，结果才为 1：</p><ul><li><code>1 &amp; 1 = 1</code></li><li><code>1 &amp; 0 = 0</code></li><li><code>0 &amp; 0 = 0</code></li></ul><p>React 中会用一个 flags <code>&amp;</code> 某一个 flag，来判断 flags 中是否包含某一个 flag，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> flags <span class="token operator">=</span> Placement <span class="token operator">|</span> Update<span class="token punctuation">;</span> <span class="token comment">//此时 flags = 0b0000110</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> Placement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 说明 flags 中包含 Placement</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> ChildDeletion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 说明 flags 中不包含 ChildDeletion</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-运算" tabindex="-1"><a class="header-anchor" href="#_3-运算" aria-hidden="true">#</a> 3. <code>~</code> 运算</h3><p><code>～</code> 运算符会把每一位取反，0 变 1，1 变 0：</p><ul><li><code>~1 = 0</code></li><li><code>~0 = 1</code></li></ul><p>在 React 中，<code>~</code> 运算符同样是常用操作，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> flags <span class="token operator">=</span> Placement <span class="token operator">|</span> Update<span class="token punctuation">;</span> <span class="token comment">//此时 flags = 0b0000110</span>

flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>Placement<span class="token punctuation">;</span> <span class="token comment">//此时 flags = 0b0000100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>~</code> 运算符与 <code>&amp;</code> 运算符的结合，从 flags 中删除了 <code>Placement</code> 这个 flag。</p><hr><p>至此，我们就实现了 React 协调阶段中的 <code>beginWork</code> 和 <code>completeWork</code> 函数，生成了一棵表示更新的 Fiber 树，并收集了树中节点的更新 flags，下一节我们将根据这些 flags 执行对应的 DOM 操作。</p>`,30),C=n("code",null,"git tag v1.5",-1),I={href:"https://github.com/2xiao/my-react/tree/v1.5",target:"_blank",rel:"noopener noreferrer"};function x(T,N){const p=c("ExternalLinkIcon"),i=c("CodeTabs");return k(),d("div",null,[v,n("div",b,[w,g,n("p",null,[s("相关代码可在 "),n("a",y,[f,o(p)]),s(" 查看")])]),h,o(i,{id:"187",data:[{id:"childFiber.ts"},{id:"fiber.ts"}]},{title0:a(({value:t,isActive:e})=>[s("childFiber.ts")]),title1:a(({value:t,isActive:e})=>[s("fiber.ts")]),tab0:a(({value:t,isActive:e})=>[_]),tab1:a(({value:t,isActive:e})=>[F]),_:1},8,["data"]),P,n("p",null,[s("相关代码可在 "),C,s(" 查看，地址："),n("a",I,[s("https://github.com/2xiao/my-react/tree/v1.5"),o(p)])])])}const R=r(m,[["render",x],["__file","5.html.vue"]]);export{R as default};
