import{_ as u,r as c,o as r,c as k,a as n,b as s,d as p,w as a,e as i}from"./app-GnK0vSxb.js";const d={},v=n("h1",{id:"_11-实现事件系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-实现事件系统","aria-hidden":"true"},"#"),s(" 11. 实现事件系统")],-1),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"摘要",-1),h=n("ul",null,[n("li",null,"实现 ReactDOM 和 Reconciler 对接"),n("li",null,"模拟实现浏览器事件流程")],-1),y={href:"https://github.com/2xiao/my-react/tree/v1.11",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"git tag v1.11",-1),E=i(`<p>为了解决跨浏览器兼容性和提供一致性，使开发者可以在不同浏览器中以相同的方式处理事件，React 实现了一个跨浏览器、高性能的事件系统，提供了一致的事件处理接口。事件系统通过事件委托的方式进行管理，即将事件监听器注册在顶层容器上，通过事件冒泡来处理不同层级的组件中的事件。</p><h2 id="_1-实现-reactdom-和-reconciler-对接" tabindex="-1"><a class="header-anchor" href="#_1-实现-reactdom-和-reconciler-对接" aria-hidden="true">#</a> 1. 实现 ReactDOM 和 Reconciler 对接</h2><p>首先我们需要实现 ReactDOM 和 Reconciler 的对接，将事件的回调保存在 DOM 中，可以通过以下两个时机对接：</p><ul><li>创建 DOM 时</li><li>更新属性时</li></ul><p>在 react-dom 包中新建 <code>SyntheticEvent.ts</code> 文件，然后新增一个 <code>updateFiberProps</code> 函数，将事件的回调保存在 DOM 上：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/SyntheticEvent.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> elementPropsKey <span class="token operator">=</span> <span class="token string">&#39;__props&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DOMElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span>elementPropsKey<span class="token punctuation">]</span><span class="token operator">:</span> Props<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateFiberProps</span><span class="token punctuation">(</span>node<span class="token operator">:</span> DOMElement<span class="token punctuation">,</span> props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	node<span class="token punctuation">[</span>elementPropsKey<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建 DOM 时，可以在 <code>createInstance</code> 函数中增加对 props 的处理：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/hostConfig.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> createInstance <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> porps<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> Instance <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
	<span class="token function">updateFiberProps</span><span class="token punctuation">(</span>element <span class="token keyword">as</span> DOMElement<span class="token punctuation">,</span> porps<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> element <span class="token keyword">as</span> DOMElement<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在更新属性时，可以在 <code>commitUpdate</code> 函数中增加对 props 的处理：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/hostConfig.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">commitUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> HostComponent<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">updateFiberProps</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> fiber<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> HostText<span class="token operator">:</span>
			<span class="token keyword">const</span> text <span class="token operator">=</span> fiber<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token function">commitTextUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;未实现的 commitUpdate 类型&#39;</span><span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-模拟实现浏览器事件流程" tabindex="-1"><a class="header-anchor" href="#_2-模拟实现浏览器事件流程" aria-hidden="true">#</a> 2. 模拟实现浏览器事件流程</h2><p>先定义一个支持的事件类型集合，为 DOM 根节点增加事件监听：</p>`,12),f=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-dom/src/SyntheticEvent.ts"),s(`
`),n("span",{class:"token comment"},"// 支持的事件类型"),s(`
`),n("span",{class:"token keyword"},"const"),s(" validEventTypeList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'click'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 初始化事件"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"initEvent"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token operator"},":"),s(" Container"),n("span",{class:"token punctuation"},","),s(" eventType"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("validEventTypeList"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"includes"),n("span",{class:"token punctuation"},"("),s("eventType"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'initEvent 未实现的事件类型'"),n("span",{class:"token punctuation"},","),s(" eventType"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("__DEV__"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'初始化事件'"),n("span",{class:"token punctuation"},","),s(" eventType"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	container`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),s("eventType"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token operator"},":"),s(" Event"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token function"},"dispatchEvent"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token punctuation"},","),s(" eventType"),n("span",{class:"token punctuation"},","),s(" e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-dom/src/root.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" initEvent "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./SyntheticEvent'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// ReactDOM.createRoot(root).render(<App />);"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createRoot"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token operator"},":"),s(" Container"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" root "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createContainer"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token operator"},":"),s(" ReactElementType"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token function"},"initEvent"),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'click'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"updateContainer"),n("span",{class:"token punctuation"},"("),s("element"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=i(`<p>其中，<code>dispatchEvent</code> 是用于模拟浏览器事件触发过程的方法，它能够按照事件的冒泡或捕获阶段顺序触发注册的事件处理函数，并提供了一致性的事件接口，其内部处理流程大致可以分为以下几个步骤：</p><ol><li><p><strong>收集沿途事件：</strong> 在事件冒泡或捕获的过程中，浏览器会按照一定的顺序触发相关的事件。在这个过程中，<code>dispatchEvent</code> 会收集经过的节点上注册的事件处理函数。</p></li><li><p><strong>构造合成事件：</strong> 在触发事件之前，<code>dispatchEvent</code> 会创建一个合成事件对象 <code>syntheticEvent</code>，该对象会封装原生的事件对象，并添加一些额外的属性和方法。这个合成事件对象用于提供一致性的事件接口，并解决不同浏览器之间的兼容性问题。</p></li><li><p><strong>遍历捕获（capture）阶段：</strong> 如果事件是冒泡型事件且支持捕获阶段，<code>dispatchEvent</code> 会从根节点开始向目标节点的父级节点遍历，依次触发沿途经过的节点上注册的捕获阶段事件处理函数。</p></li><li><p><strong>遍历冒泡（bubble）阶段：</strong> 如果事件是冒泡型事件，<code>dispatchEvent</code> 会从目标节点开始向根节点遍历，依次触发沿途经过的节点上注册的冒泡阶段事件处理函数。</p></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/root.ts</span>
<span class="token keyword">function</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span>container<span class="token operator">:</span> Container<span class="token punctuation">,</span> eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> targetElement <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>targetElement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;事件不存在targetElement&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 收集沿途事件</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> bubble<span class="token punctuation">,</span> capture <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">collectPaths</span><span class="token punctuation">(</span>
		targetElement <span class="token keyword">as</span> DOMElement<span class="token punctuation">,</span>
		container<span class="token punctuation">,</span>
		eventType
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 构造合成事件</span>
	<span class="token keyword">const</span> syntheticEvent <span class="token operator">=</span> <span class="token function">createSyntheticEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历捕获 capture 事件</span>
	<span class="token function">triggerEventFlow</span><span class="token punctuation">(</span>capture<span class="token punctuation">,</span> syntheticEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历冒泡 bubble 事件</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>syntheticEvent<span class="token punctuation">.</span>__stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">triggerEventFlow</span><span class="token punctuation">(</span>bubble<span class="token punctuation">,</span> syntheticEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-收集沿途事件" tabindex="-1"><a class="header-anchor" href="#_1-收集沿途事件" aria-hidden="true">#</a> 1. 收集沿途事件</h3><p><code>collectPaths</code> 函数主要用于收集沿途的事件处理函数，并构建一个对象 <code>paths</code>，其中包括捕获阶段和冒泡阶段的事件处理函数列表。</p><ul><li>在函数开始时，创建一个对象 <code>paths</code>，包括 <code>capture</code> 和 <code>bubble</code> 两个数组，用于分别存储捕获阶段和冒泡阶段的事件处理函数；</li><li>从目标元素 <code>targetElement</code> 开始一直循环到容器元素 <code>container</code>，逐级向上遍历 DOM 树。对于每个遍历到的元素，判断该元素上是否有注册的事件处理函数；</li><li>通过 <code>getEventCallbackNameFromEventType</code> 函数获取事件回调函数名列表，对于每个回调函数名，检查元素属性中是否存在对应的回调函数。如果存在，则将回调函数添加到 <code>paths</code> 对象的相应阶段（捕获或冒泡）的事件处理函数数组； <ul><li>其中，捕获阶段的事件要 <code>unshift</code> 进 <code>capture</code> 数组，方便后续从根节点向目标节点遍历，依次触发沿途节点上注册的捕获阶段事件处理函数；</li><li>冒泡阶段的事件要 <code>push</code> 进 <code>bubble</code> 数组，方便后续从目标节点向根节点遍历，依次触发沿途节点上注册的冒泡阶段事件处理函数；</li></ul></li><li>最终返回构建好的 <code>paths</code> 对象，其中包含了捕获阶段和冒泡阶段的事件处理函数路径。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/root.ts</span>
<span class="token keyword">type</span> <span class="token class-name">EventCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Paths</span> <span class="token punctuation">{</span>
	capture<span class="token operator">:</span> EventCallback<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	bubble<span class="token operator">:</span> EventCallback<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">collectPaths</span><span class="token punctuation">(</span>
	targetElement<span class="token operator">:</span> DOMElement<span class="token punctuation">,</span>
	container<span class="token operator">:</span> Container<span class="token punctuation">,</span>
	eventType<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> paths<span class="token operator">:</span> Paths <span class="token operator">=</span> <span class="token punctuation">{</span>
		capture<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		bubble<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 收集</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>targetElement <span class="token operator">&amp;&amp;</span> targetElement <span class="token operator">!==</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> elementProps <span class="token operator">=</span> targetElement<span class="token punctuation">[</span>elementPropsKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>elementProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> callbackNameList <span class="token operator">=</span> <span class="token function">getEventCallbackNameFromEventType</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>callbackNameList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				callbackNameList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callbackName<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
					<span class="token keyword">const</span> callback <span class="token operator">=</span> elementProps<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
							paths<span class="token punctuation">.</span>capture<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
							paths<span class="token punctuation">.</span>bubble<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		targetElement <span class="token operator">=</span> targetElement<span class="token punctuation">.</span>parentNode <span class="token keyword">as</span> DOMElement<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> paths<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getEventCallbackNameFromEventType</span><span class="token punctuation">(</span>
	eventType<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		click<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;onClickCapture&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;onClick&#39;</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-构造合成事件" tabindex="-1"><a class="header-anchor" href="#_2-构造合成事件" aria-hidden="true">#</a> 2. 构造合成事件</h3><p><code>dispatchEvent</code> 方法触发的事件是一个合成事件(<code>SyntheticEvent</code>)，而不是原生事件。<code>SyntheticEvent</code> 对象是一个用于包装浏览器原生事件的合成事件对象，它包含了与原生事件相关的信息，可以替代浏览器的原生事件对象，具有以下特点：</p><ol><li><p><strong>跨浏览器兼容性：</strong> <code>SyntheticEvent</code> 对象会在浏览器之间提供一致的事件接口，消除了一些浏览器兼容性的问题。</p></li><li><p><strong>事件池（Event Pooling）：</strong> React 使用了一个事件池，即在需要处理事件时，会从事件池中取出一个 <code>SyntheticEvent</code> 对象，用于包装原生事件。这个池的目的是减少垃圾回收的频率，提高性能。一旦事件处理函数执行完毕，<code>SyntheticEvent</code> 对象会被重置并放回池中，等待下一次使用。</p></li><li><p><strong>事件冒泡：</strong> React 事件系统使用了事件冒泡机制，事件首先在组件的最底层触发，然后逐层向上冒泡至根节点。在冒泡的过程中，<code>SyntheticEvent</code> 对象会被传递给事件处理函数。由于 <code>SyntheticEvent</code> 是可复用的，避免了在每个事件处理中都创建新的事件对象。</p></li><li><p><strong>提供一些额外的方法：</strong> <code>SyntheticEvent</code> 对象提供了一些附加的方法，例如 <code>stopPropagation</code>、<code>preventDefault</code> 等，用于阻止事件的传播和默认行为。</p></li><li><p><strong>属性访问：</strong> <code>SyntheticEvent</code> 对象的属性和方法是可访问的，与原生事件对象的属性和方法一样。例如，可以通过 <code>event.target</code> 获取触发事件的目标元素。</p></li></ol><p>下面就来实现 <code>SyntheticEvent</code> 对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/root.ts</span>
<span class="token keyword">interface</span> <span class="token class-name">SyntheticEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>
	__stopPropagation<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createSyntheticEvent</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> syntheticEvent <span class="token operator">=</span> e <span class="token keyword">as</span> SyntheticEvent<span class="token punctuation">;</span>
	syntheticEvent<span class="token punctuation">.</span>__stopPropagation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> originStopPropagation <span class="token operator">=</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">;</span>

	syntheticEvent<span class="token punctuation">.</span><span class="token function-variable function">stopPropagation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		syntheticEvent<span class="token punctuation">.</span>__stopPropagation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>originStopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">originStopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> syntheticEvent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-遍历捕获和冒泡阶段" tabindex="-1"><a class="header-anchor" href="#_3-遍历捕获和冒泡阶段" aria-hidden="true">#</a> 3. 遍历捕获和冒泡阶段</h3><p><code>triggerEventFlow</code> 函数主要用于遍历捕获（capture）阶段和遍历冒泡（bubble）阶段，并依次触发收集到的合成事件。</p><ul><li><p>如果事件是冒泡型事件且支持捕获阶段，<code>dispatchEvent</code> 会从根节点开始向目标节点的父级节点遍历，依次触发沿途经过的节点上注册的捕获阶段事件处理函数。</p></li><li><p>如果事件是冒泡型事件，<code>dispatchEvent</code> 会从目标节点开始向根节点遍历，依次触发沿途经过的节点上注册的冒泡阶段事件处理函数。</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-dom/src/root.ts</span>
<span class="token keyword">function</span> <span class="token function">triggerEventFlow</span><span class="token punctuation">(</span>
	paths<span class="token operator">:</span> EventCallback<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	syntheticEvent<span class="token operator">:</span> SyntheticEvent
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paths<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> callback <span class="token operator">=</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> syntheticEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>syntheticEvent<span class="token punctuation">.</span>__stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就实现了 React 的事件系统，解决了不同浏览器之间的事件处理差异和兼容性问题，并将事件系统对接进了 <code>Reconciler</code> 更新流程中。</p>`,17),x=n("code",null,"git tag v1.11",-1),P={href:"https://github.com/2xiao/my-react/tree/v1.11",target:"_blank",rel:"noopener noreferrer"};function S(C,T){const o=c("ExternalLinkIcon"),l=c("CodeTabs");return r(),k("div",null,[v,n("div",m,[b,h,n("p",null,[s("相关代码可在 "),n("a",y,[g,p(o)]),s(" 查看")])]),E,p(l,{id:"59",data:[{id:"SyntheticEvent.ts"},{id:"root.ts"}]},{title0:a(({value:t,isActive:e})=>[s("SyntheticEvent.ts")]),title1:a(({value:t,isActive:e})=>[s("root.ts")]),tab0:a(({value:t,isActive:e})=>[f]),tab1:a(({value:t,isActive:e})=>[w]),_:1},8,["data"]),_,n("p",null,[s("相关代码可在 "),x,s(" 查看，地址："),n("a",P,[s("https://github.com/2xiao/my-react/tree/v1.11"),p(o)])])])}const M=u(d,[["render",S],["__file","11.html.vue"]]);export{M as default};
