import{_ as i,r as c,o as r,c as p,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-mvY9N9Pc.js";const h={},_={id:"_287-寻找重复数",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_287-寻找重复数","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"位运算",-1),f=t("code",null,"数组",-1),b=t("code",null,"双指针",-1),v=t("code",null,"二分查找",-1),y={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of integers <code>nums</code> containing <code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p><p>There is only <strong>one repeated number</strong> in <code>nums</code>, return <em>this repeated number</em>.</p><p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code> and using only constant extra space.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,3,4,2,2]</p><p>Output: 2</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [3,1,3,4,2]</p><p>Output: 3</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [3,3,3,3,3]</p><p>Output: 3</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>nums.length == n + 1</code></li><li><code>1 &lt;= nums[i] &lt;= n</code></li><li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li></ul><p><strong>Follow up:</strong></p><ul><li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li><li>Can you solve the problem in linear runtime complexity?</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个包含 <code>n + 1</code> 个整数的数组 <code>nums</code> ，其数字都在 <code>[1, n]</code> 范围内（包括 <code>1</code> 和 <code>n</code>），可知至少存在一个重复的整数。</p><p>假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，返回 <strong>这个重复的数</strong> 。</p><p>你设计的解决方案必须 <strong>不修改</strong> 数组 <code>nums</code> 且只用常量级 <code>O(1)</code> 的额外空间。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,3,4,2,2]</p><p><strong>输出：</strong> 2</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [3,1,3,4,2]</p><p><strong>输出：</strong> 3</p></blockquote><p><strong>示例 3 :</strong></p><blockquote><p><strong>输入：</strong> nums = [3,3,3,3,3]</p><p><strong>输出：</strong> 3</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>nums.length == n + 1</code></li><li><code>1 &lt;= nums[i] &lt;= n</code></li><li><code>nums</code> 中 <strong>只有一个整数</strong> 出现 <strong>两次或多次</strong> ，其余整数均只出现 <strong>一次</strong></li></ul><p><strong>进阶：</strong></p><ul><li>如何证明 <code>nums</code> 中至少存在一个重复的数字?</li><li>你可以设计一个线性级时间复杂度 <code>O(n)</code> 的解决方案吗？</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题可以使用 <strong>Floyd&#39;s Tortoise and Hare(龟兔赛跑)</strong> 算法，即通过快慢指针找环。</p><ol><li><p><strong>理解问题</strong>：</p><ul><li>数组中有 <code>n + 1</code> 个数字，范围是 <code>1</code> 到 <code>n</code>，根据鸽巢原理，至少有一个数字会重复。</li></ul></li><li><p><strong>使用快慢指针</strong>：</p><ul><li>将数组视为一个链表，数组的值作为指针指向下一个索引。</li><li>使用两个指针：快指针（每次移动两步）和慢指针（每次移动一步）。因为存在重复数字，所以这两个指针最终会在某个节点相遇。</li></ul></li><li><p><strong>找出环的起点</strong>：</p><ul><li>首先，使用快慢指针找到相遇点。接着，将其中一个指针移到起点，两个指针同时移动，每次移动一步，直到它们再次相遇。相遇的节点即为重复数字。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，在最坏情况下，快慢指针的移动次数不会超过 <code>n</code> 次。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，只使用了常量的空间，不需要额外的数据结构。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> slow <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		fast <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 找到环的交点</span>
	<span class="token keyword">do</span> <span class="token punctuation">{</span>
		slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 走一步</span>
		fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 走两步</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 找出循环的起始点（即重复的数字）</span>
	fast <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>
		fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,36),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),E=t("td",{style:{"text-align":"center"}},"41",-1),j={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},C={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0041",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"left"}},N=t("code",null,"数组",-1),V=t("code",null,"哈希表",-1),B={style:{"text-align":"left"}},H=t("td",{style:{"text-align":"center"}},"136",-1),T={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},R={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0136",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"left"}},D=t("code",null,"位运算",-1),G=t("code",null,"数组",-1),S={style:{"text-align":"left"}},Y=t("td",{style:{"text-align":"center"}},"142",-1),z={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/linked-list-cycle-ii",target:"_blank",rel:"noopener noreferrer"},K={style:{"text-align":"center"}},P={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0142",target:"_blank",rel:"noopener noreferrer"},Q={style:{"text-align":"left"}},U=t("code",null,"哈希表",-1),W=t("code",null,"链表",-1),X=t("code",null,"双指针",-1),Z={style:{"text-align":"left"}},$=t("td",{style:{"text-align":"center"}},"268",-1),tt={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},nt={style:{"text-align":"center"}},st={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0268",target:"_blank",rel:"noopener noreferrer"},ot={style:{"text-align":"left"}},at=t("code",null,"位运算",-1),lt=t("code",null,"数组",-1),ct=t("code",null,"哈希表",-1),it=t("code",null,"3+",-1),rt={style:{"text-align":"left"}},pt=t("td",{style:{"text-align":"center"}},"645",-1),dt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/set-mismatch",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"center"}},null,-1),_t={style:{"text-align":"left"}},mt=t("code",null,"位运算",-1),gt=t("code",null,"数组",-1),kt=t("code",null,"哈希表",-1),ft=t("code",null,"1+",-1),bt={style:{"text-align":"left"}};function vt(yt,xt){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink");return r(),p("div",null,[t("h1",_,[m,n(),t("a",g,[n("287. 寻找重复数"),e(a)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(o,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[k]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[f]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[b]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/binary-search.html"},{default:s(()=>[v]),_:1}),n("  🔗 "),t("a",y,[x,e(a)])]),w,d(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[E,t("td",j,[t("a",I,[n("缺失的第一个正数"),e(a)])]),t("td",O,[t("a",C,[n("[✓]"),e(a)])]),t("td",L,[e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[N]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[V]),_:1})]),t("td",B,[e(l,{color:"#ff334b"},{default:s(()=>[n("Hard")]),_:1})])]),t("tr",null,[H,t("td",T,[t("a",F,[n("只出现一次的数字"),e(a)])]),t("td",M,[t("a",R,[n("[✓]"),e(a)])]),t("td",A,[e(o,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[D]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[G]),_:1})]),t("td",S,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[Y,t("td",z,[t("a",J,[n("环形链表 II"),e(a)])]),t("td",K,[t("a",P,[n("[✓]"),e(a)])]),t("td",Q,[e(o,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[U]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[W]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[X]),_:1})]),t("td",Z,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[$,t("td",tt,[t("a",et,[n("丢失的数字"),e(a)])]),t("td",nt,[t("a",st,[n("[✓]"),e(a)])]),t("td",ot,[e(o,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[at]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[lt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[ct]),_:1}),n(),it]),t("td",rt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[pt,t("td",dt,[t("a",ut,[n("错误的集合"),e(a)])]),ht,t("td",_t,[e(o,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[mt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[gt]),_:1}),n(),e(o,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[kt]),_:1}),n(),ft]),t("td",bt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const qt=i(h,[["render",vt],["__file","0287.html.vue"]]);export{qt as default};
