import{_ as p,r as c,o as i,c as d,a as t,b as e,d as n,w as s,f as r,e as u}from"./app-GnK0vSxb.js";const _={},h={id:"_64-最小路径和",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_64-最小路径和","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/minimum-path-sum",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"数组",-1),f=t("code",null,"动态规划",-1),b=t("code",null,"矩阵",-1),y={href:"https://leetcode.com/problems/minimum-path-sum",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p><p><strong>Note:</strong> You can only move either down or right at any point in time.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: grid = [[1,3,1],[1,5,1],[4,2,1]]</p><p>Output: 7</p><p>Explanation: Because the path 1 -&gt; 3 -&gt; 1 -&gt; 1 -&gt; 1 minimizes the sum.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: grid = [[1,2,3],[4,5,6]]</p><p>Output: 12</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= grid[i][j] &lt;= 200</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个包含非负整数的 <code>m x n</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明</strong>：每次只能向下或者向右移动一步。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>动态规划</strong>：使用动态规划来解决问题。定义一个二维数组 <code>dp</code>，其中 <code>dp[i][j]</code> 表示从 <code>(0, 0)</code> 到 <code>(i, j)</code> 的最小路径和。</p></li><li><p><strong>状态转移方程</strong>：可以从左上角到达 <code>(i, j)</code> 的路径有两条：从 <code>(i-1, j)</code> 向下移动和从 <code>(i, j-1)</code> 向右移动。因此，状态转移方程为 <code>dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])</code>。</p></li><li><p><strong>边界条件</strong>：对于第一行和第一列，由于它们只能从上方或左侧移动到达，所以路径和等于前一个格子的路径和加上当前格子的值。即 <code>dp[0][j] = dp[0][j-1] + grid[0][j]</code> 和 <code>dp[i][0] = dp[i-1][0] + grid[i][0]</code>。</p></li><li><p><strong>初始化</strong>：初始化第一行和第一列的路径和。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(m * n)</code>，遍历整个二维数组。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，由于<code>dp[i][j]</code> 只与 <code>dp[i-1][j]</code> 及 <code>dp[i][j-1]</code> 有关，所以可以直接原地修改 <code>grid</code> 数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">grid</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">minPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 处理左上角的边界情况</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 处理第一行的边界情况</span>
				grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 处理第一列的边界情况</span>
				grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> grid<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,20),j=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),w=t("td",{style:{"text-align":"center"}},"62",-1),M={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/unique-paths",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},N={style:{"text-align":"left"}},C=t("code",null,"数学",-1),L=t("code",null,"动态规划",-1),V=t("code",null,"组合数学",-1),B={style:{"text-align":"left"}},I=t("td",{style:{"text-align":"center"}},"174",-1),O={style:{"text-align":"left"}},z={href:"https://leetcode.com/problems/dungeon-game",target:"_blank",rel:"noopener noreferrer"},H={style:{"text-align":"center"}},R={style:{"text-align":"left"}},S=t("code",null,"数组",-1),G=t("code",null,"动态规划",-1),K=t("code",null,"矩阵",-1),P={style:{"text-align":"left"}},T=t("td",{style:{"text-align":"center"}},"741",-1),Y={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/cherry-pickup",target:"_blank",rel:"noopener noreferrer"},D=t("td",{style:{"text-align":"center"}},null,-1),F={style:{"text-align":"left"}},J=t("code",null,"数组",-1),Q=t("code",null,"动态规划",-1),U=t("code",null,"矩阵",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"1937",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/maximum-number-of-points-with-cost",target:"_blank",rel:"noopener noreferrer"},tt=t("td",{style:{"text-align":"center"}},null,-1),nt={style:{"text-align":"left"}},et=t("code",null,"数组",-1),st=t("code",null,"动态规划",-1),at=t("code",null,"矩阵",-1),ot={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"2087",-1),ct={style:{"text-align":"left"}},pt={href:"https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid",target:"_blank",rel:"noopener noreferrer"},it=t("td",{style:{"text-align":"center"}},null,-1),dt={style:{"text-align":"left"}},rt=t("code",null,"贪心",-1),ut=t("code",null,"数组",-1),_t={style:{"text-align":"left"}},ht=t("td",{style:{"text-align":"center"}},"2304",-1),mt={style:{"text-align":"left"}},kt={href:"https://leetcode.com/problems/minimum-path-cost-in-a-grid",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},null,-1),ft={style:{"text-align":"left"}},bt=t("code",null,"数组",-1),yt=t("code",null,"动态规划",-1),xt=t("code",null,"矩阵",-1),vt={style:{"text-align":"left"}},jt=t("td",{style:{"text-align":"center"}},"2435",-1),wt={style:{"text-align":"left"}},Mt={href:"https://leetcode.com/problems/paths-in-matrix-whose-sum-is-divisible-by-k",target:"_blank",rel:"noopener noreferrer"},qt=t("td",{style:{"text-align":"center"}},null,-1),Et={style:{"text-align":"left"}},Nt=t("code",null,"数组",-1),Ct=t("code",null,"动态规划",-1),Lt=t("code",null,"矩阵",-1),Vt={style:{"text-align":"left"}},Bt=t("td",{style:{"text-align":"center"}},"2510",-1),It={style:{"text-align":"left"}},Ot={href:"https://leetcode.com/problems/check-if-there-is-a-path-with-equal-number-of-0s-and-1s",target:"_blank",rel:"noopener noreferrer"},zt=t("td",{style:{"text-align":"center"}},null,-1),Ht={style:{"text-align":"left"}},Rt=t("code",null,"数组",-1),St=t("code",null,"动态规划",-1),Gt=t("code",null,"矩阵",-1),Kt={style:{"text-align":"left"}},Pt=t("td",{style:{"text-align":"center"}},"2662",-1),Tt={style:{"text-align":"left"}},Yt={href:"https://leetcode.com/problems/minimum-cost-of-a-path-with-special-roads",target:"_blank",rel:"noopener noreferrer"},At=t("td",{style:{"text-align":"center"}},null,-1),Dt={style:{"text-align":"left"}},Ft=t("code",null,"图",-1),Jt=t("code",null,"数组",-1),Qt=t("code",null,"最短路",-1),Ut=t("code",null,"1+",-1),Wt={style:{"text-align":"left"}};function Xt(Zt,$t){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),d("div",null,[t("h1",h,[m,e(),t("a",k,[e("64. 最小路径和"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[g]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[f]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[b]),_:1}),e("  🔗 "),t("a",y,[x,n(o)])]),v,r(" prettier-ignore "),t("table",null,[j,t("tbody",null,[t("tr",null,[w,t("td",M,[t("a",q,[e("不同路径"),n(o)])]),t("td",E,[n(a,{to:"/leetcode/problem/0062.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",N,[n(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[C]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[L]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/combinatorics.html"},{default:s(()=>[V]),_:1})]),t("td",B,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[I,t("td",O,[t("a",z,[e("地下城游戏"),n(o)])]),t("td",H,[n(a,{to:"/leetcode/problem/0174.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",R,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[S]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[G]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[K]),_:1})]),t("td",P,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[T,t("td",Y,[t("a",A,[e("摘樱桃"),n(o)])]),D,t("td",F,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[J]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[Q]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[U]),_:1})]),t("td",W,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[X,t("td",Z,[t("a",$,[e("扣分后的最大得分"),n(o)])]),tt,t("td",nt,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[et]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[st]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[at]),_:1})]),t("td",ot,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[lt,t("td",ct,[t("a",pt,[e("网格图中机器人回家的最小代价"),n(o)])]),it,t("td",dt,[n(a,{to:"/leetcode/outline/tag/greedy.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[ut]),_:1})]),t("td",_t,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ht,t("td",mt,[t("a",kt,[e("网格中的最小路径代价"),n(o)])]),gt,t("td",ft,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[bt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[yt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[xt]),_:1})]),t("td",vt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[jt,t("td",wt,[t("a",Mt,[e("矩阵中和能被 K 整除的路径"),n(o)])]),qt,t("td",Et,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Nt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[Ct]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[Lt]),_:1})]),t("td",Vt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Bt,t("td",It,[t("a",Ot,[e("检查是否有路径经过相同数量的 0 和 1"),n(o)])]),zt,t("td",Ht,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Rt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/matrix.html"},{default:s(()=>[Gt]),_:1})]),t("td",Kt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Pt,t("td",Tt,[t("a",Yt,[e("前往目标的最小代价"),n(o)])]),At,t("td",Dt,[n(a,{to:"/leetcode/outline/tag/graph.html"},{default:s(()=>[Ft]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Jt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/shortest-path.html"},{default:s(()=>[Qt]),_:1}),e(),Ut]),t("td",Wt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const nn=p(_,[["render",Xt],["__file","0064.html.vue"]]);export{nn as default};
