import{_ as n,o as s,c as a,e as t}from"./app-b4s7f53x.js";const p={},e=t(`<h1 id="ajax-原理是什么-如何实现" tabindex="-1"><a class="header-anchor" href="#ajax-原理是什么-如何实现" aria-hidden="true">#</a> ajax 原理是什么？如何实现？</h1><h2 id="一、什么是-ajax" tabindex="-1"><a class="header-anchor" href="#一、什么是-ajax" aria-hidden="true">#</a> 一、什么是 AJAX？</h2><p><code>AJAX</code> 的全称是 <strong>Asynchronous JavaScript and XML</strong>，即<strong>异步的 JavaScript 和 XML</strong>。它是一种用于创建<strong>交互式网页应用</strong>的技术，可以在不重新加载整个网页的情况下，与服务器交换数据并更新网页的部分内容。</p><h3 id="ajax-的工作原理" tabindex="-1"><a class="header-anchor" href="#ajax-的工作原理" aria-hidden="true">#</a> AJAX 的工作原理</h3><p>简单来说，<code>AJAX</code> 通过 <code>XMLHttpRequest</code> 对象向服务器发送异步请求，接收服务器的响应数据，然后用 JavaScript 更新页面的 DOM。</p><p><strong>示例比喻：</strong><br> 一个领导想找小李汇报工作，他让秘书去叫小李（发起请求），自己继续工作（异步执行），等秘书告诉他小李已经到了（接收响应数据），再与小李沟通。</p><p>流程如下：</p><ol><li>浏览器发送 HTTP 请求；</li><li>浏览器可以同时继续处理其他任务（异步处理）；</li><li>服务端处理请求并返回数据；</li><li>浏览器接收数据并更新页面。</li></ol><h2 id="二、ajax-的实现过程" tabindex="-1"><a class="header-anchor" href="#二、ajax-的实现过程" aria-hidden="true">#</a> 二、AJAX 的实现过程</h2><p>实现 AJAX 异步交互需要以下几个步骤：</p><ol><li><strong>创建 <code>XMLHttpRequest</code> 对象</strong></li><li><strong>与服务器建立连接</strong></li><li><strong>发送请求</strong></li><li><strong>监听响应</strong></li><li><strong>处理响应数据并更新页面</strong></li></ol><h3 id="_1-创建-xmlhttprequest-对象" tabindex="-1"><a class="header-anchor" href="#_1-创建-xmlhttprequest-对象" aria-hidden="true">#</a> 1. 创建 <code>XMLHttpRequest</code> 对象</h3><p>使用 <code>XMLHttpRequest</code> 构造函数创建一个实例对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-与服务器建立连接" tabindex="-1"><a class="header-anchor" href="#_2-与服务器建立连接" aria-hidden="true">#</a> 2. 与服务器建立连接</h3><p>通过 <code>xhr.open()</code> 方法与服务器建立连接：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token punctuation">[</span>async<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数说明：</strong></p><ul><li><code>method</code>：HTTP 请求方法（常见有 <code>GET</code> 和 <code>POST</code>）。</li><li><code>url</code>：请求的服务端地址。</li><li><code>async</code>：是否异步，默认为 <code>true</code>。</li><li><code>user</code> 和 <code>password</code>：可选，用于认证。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://example.com/api&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-发送请求" tabindex="-1"><a class="header-anchor" href="#_3-发送请求" aria-hidden="true">#</a> 3. 发送请求</h3><p>使用 <code>xhr.send()</code> 方法将数据发送到服务器：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>如果是 <code>GET</code> 请求，请将数据拼接到 URL 中，<code>send</code> 方法的参数设置为 <code>null</code>。</li><li>如果是 <code>POST</code> 请求，将数据通过 <code>body</code> 参数发送。</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GET 请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// POST 请求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-监听响应" tabindex="-1"><a class="header-anchor" href="#_4-监听响应" aria-hidden="true">#</a> 4. 监听响应</h3><p>监听服务器返回的响应状态，使用 <code>onreadystatechange</code> 事件来处理状态变化：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 请求完成</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 成功响应</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 服务端返回的结果</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 错误响应</span>
			console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error: &#39;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>readyState</code> 状态值：</strong></p><table><thead><tr><th>值</th><th>状态描述</th></tr></thead><tbody><tr><td>0</td><td>请求未初始化</td></tr><tr><td>1</td><td>连接已建立</td></tr><tr><td>2</td><td>请求已接收</td></tr><tr><td>3</td><td>请求处理中</td></tr><tr><td>4</td><td>请求完成，且响应已就绪</td></tr></tbody></table><h2 id="三、封装一个简单的-ajax-函数" tabindex="-1"><a class="header-anchor" href="#三、封装一个简单的-ajax-函数" aria-hidden="true">#</a> 三、封装一个简单的 AJAX 函数</h2><p>根据上述实现过程，封装一个通用的 AJAX 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建 XMLHttpRequest 对象</span>
	<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 初始化参数</span>
	options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	options<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> params <span class="token operator">=</span> options<span class="token punctuation">.</span>data
		<span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

	<span class="token comment">// 发送请求</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> params<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 监听响应</span>
	xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				options<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				options<span class="token punctuation">.</span>fail <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://example.com/api&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功：&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;失败：状态码&#39;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、注意事项" tabindex="-1"><a class="header-anchor" href="#四、注意事项" aria-hidden="true">#</a> 四、注意事项</h2><ol><li><p><strong>跨域问题：</strong><br> 使用 <code>AJAX</code> 时需注意跨域请求，可以通过以下方式解决：</p><ul><li>使用服务器端代理；</li><li>配置服务端支持 <code>CORS</code>；</li><li>使用 <code>JSONP</code>（仅支持 <code>GET</code> 请求）。</li></ul></li><li><p><strong>异步执行：</strong><br> 默认情况下，<code>AJAX</code> 是异步的。在需要确保请求顺序时，可将 <code>async</code> 设置为 <code>false</code>（不推荐）。</p></li><li><p><strong>状态码检查：</strong><br> 在监听响应时，需判断状态码是否在 2xx 范围内。</p></li></ol>`,40),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","ajax.html.vue"]]);export{r as default};
