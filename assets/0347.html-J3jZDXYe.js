import{_ as c,r as p,o as i,c as u,a as n,b as s,d as t,w as a,f as r,e as d}from"./app-mvY9N9Pc.js";const k={},h={id:"_347-前-k-个高频元素",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_347-前-k-个高频元素","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),b=n("code",null,"分治",-1),v=n("code",null,"桶排序",-1),y=n("code",null,"计数",-1),x=n("code",null,"快速选择",-1),w=n("code",null,"排序",-1),q=n("code",null,"堆（优先队列）",-1),M={href:"https://leetcode.com/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"LeetCode",-1),j=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,1,1,2,2,3], k = 2</p><p>Output: [1,2]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1], k = 1</p><p>Output: [1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li><li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li></ul><p><strong>Follow up:</strong> Your algorithm&#39;s time complexity must be better than <code>O(n log n)</code>, where n is the array&#39;s size.</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用哈希映射和小顶堆来实现：</p><ol><li>使用哈希映射存储数组中每个元素的频率。</li><li>创建一个小顶堆（优先队列），用于跟踪出现频率最高的 <code>k</code> 个元素。</li><li>遍历哈希映射，将元素和其频率添加到小顶堆中，拿它与堆顶的元素对比。 <ul><li>如果比堆顶元素大，就把堆顶元素删除，并且将这个元素插入到堆中；</li><li>如果比堆顶元素小，则不做处理；</li></ul></li><li>处理完所有元素后，小顶堆中将包含 <code>k</code> 个最高频率的元素。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n log k)</code>，其中 <code>n</code> 是数组的大小，<code>k</code> 是唯一元素的数量，相较于传统排序算法的 <code>O(n log n)</code> 更为高效。</li><li><strong>空间复杂度</strong>：<code>O(k)</code>，需要额外的空间来存储堆。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">topKFrequent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">let</span> heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>val<span class="token punctuation">,</span> freq<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>val<span class="token punctuation">,</span> freq<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">heapifyUp</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> freq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> freq<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token function">heapifyDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">heapifyUp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> parent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token punctuation">[</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				i <span class="token operator">=</span> parent<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">heapifyDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heap<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> heap<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			min <span class="token operator">=</span> left<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> heap<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> heap<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			min <span class="token operator">=</span> right<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">[</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>heap<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token function">heapifyDown</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> heap<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,19),O=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),C=n("td",{style:{"text-align":"center"}},"192",-1),I={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/word-frequency",target:"_blank",rel:"noopener noreferrer"},L=n("td",{style:{"text-align":"center"}},null,-1),N={style:{"text-align":"left"}},V=n("code",null,"Shell",-1),B={style:{"text-align":"left"}},D=n("td",{style:{"text-align":"center"}},"215",-1),F={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"center"}},U={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0215",target:"_blank",rel:"noopener noreferrer"},Y={style:{"text-align":"left"}},z=n("code",null,"数组",-1),G=n("code",null,"分治",-1),T=n("code",null,"快速选择",-1),A=n("code",null,"2+",-1),H={style:{"text-align":"left"}},J=n("td",{style:{"text-align":"center"}},"451",-1),P={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/sort-characters-by-frequency",target:"_blank",rel:"noopener noreferrer"},W={style:{"text-align":"center"}},X={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0451",target:"_blank",rel:"noopener noreferrer"},Z={style:{"text-align":"left"}},$=n("code",null,"哈希表",-1),nn=n("code",null,"字符串",-1),tn=n("code",null,"桶排序",-1),sn=n("code",null,"3+",-1),an={style:{"text-align":"left"}},en=n("td",{style:{"text-align":"center"}},"659",-1),on={style:{"text-align":"left"}},ln={href:"https://leetcode.com/problems/split-array-into-consecutive-subsequences",target:"_blank",rel:"noopener noreferrer"},pn=n("td",{style:{"text-align":"center"}},null,-1),cn={style:{"text-align":"left"}},un=n("code",null,"贪心",-1),rn=n("code",null,"数组",-1),dn=n("code",null,"哈希表",-1),kn=n("code",null,"1+",-1),hn={style:{"text-align":"left"}},_n=n("td",{style:{"text-align":"center"}},"692",-1),mn={style:{"text-align":"left"}},fn={href:"https://leetcode.com/problems/top-k-frequent-words",target:"_blank",rel:"noopener noreferrer"},gn=n("td",{style:{"text-align":"center"}},null,-1),bn={style:{"text-align":"left"}},vn=n("code",null,"字典树",-1),yn=n("code",null,"哈希表",-1),xn=n("code",null,"字符串",-1),wn=n("code",null,"4+",-1),qn={style:{"text-align":"left"}},Mn=n("td",{style:{"text-align":"center"}},"973",-1),En={style:{"text-align":"left"}},jn={href:"https://leetcode.com/problems/k-closest-points-to-origin",target:"_blank",rel:"noopener noreferrer"},On={style:{"text-align":"center"}},Cn={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0973",target:"_blank",rel:"noopener noreferrer"},In={style:{"text-align":"left"}},Kn=n("code",null,"几何",-1),Ln=n("code",null,"数组",-1),Nn=n("code",null,"数学",-1),Vn=n("code",null,"4+",-1),Bn={style:{"text-align":"left"}},Dn=n("td",{style:{"text-align":"center"}},"1772",-1),Fn={style:{"text-align":"left"}},Rn={href:"https://leetcode.com/problems/sort-features-by-popularity",target:"_blank",rel:"noopener noreferrer"},Sn=n("td",{style:{"text-align":"center"}},null,-1),Un={style:{"text-align":"left"}},Yn=n("code",null,"数组",-1),zn=n("code",null,"哈希表",-1),Gn=n("code",null,"字符串",-1),Tn=n("code",null,"1+",-1),An={style:{"text-align":"left"}},Hn=n("td",{style:{"text-align":"center"}},"2284",-1),Jn={style:{"text-align":"left"}},Pn={href:"https://leetcode.com/problems/sender-with-largest-word-count",target:"_blank",rel:"noopener noreferrer"},Qn=n("td",{style:{"text-align":"center"}},null,-1),Wn={style:{"text-align":"left"}},Xn=n("code",null,"数组",-1),Zn=n("code",null,"哈希表",-1),$n=n("code",null,"字符串",-1),nt=n("code",null,"1+",-1),tt={style:{"text-align":"left"}},st=n("td",{style:{"text-align":"center"}},"2404",-1),at={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/most-frequent-even-element",target:"_blank",rel:"noopener noreferrer"},ot=n("td",{style:{"text-align":"center"}},null,-1),lt={style:{"text-align":"left"}},pt=n("code",null,"数组",-1),ct=n("code",null,"哈希表",-1),it=n("code",null,"计数",-1),ut={style:{"text-align":"left"}},rt=n("td",{style:{"text-align":"center"}},"3063",-1),dt={style:{"text-align":"left"}},kt={href:"https://leetcode.com/problems/linked-list-frequency",target:"_blank",rel:"noopener noreferrer"},ht=n("td",{style:{"text-align":"center"}},null,-1),_t={style:{"text-align":"left"}},mt=n("code",null,"哈希表",-1),ft=n("code",null,"链表",-1),gt=n("code",null,"计数",-1),bt={style:{"text-align":"left"}};function vt(yt,xt){const o=p("ExternalLinkIcon"),l=p("font"),e=p("RouterLink");return i(),u("div",null,[n("h1",h,[_,s(),n("a",m,[s("347. 前 K 个高频元素"),t(o)])]),n("p",null,[s("🟠 "),t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[f]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[g]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:a(()=>[b]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:a(()=>[v]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/counting.html"},{default:a(()=>[y]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/quickselect.html"},{default:a(()=>[x]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/sorting.html"},{default:a(()=>[w]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/heap-priority-queue.html"},{default:a(()=>[q]),_:1}),s("  🔗 "),n("a",M,[E,t(o)])]),j,r(" prettier-ignore "),n("table",null,[O,n("tbody",null,[n("tr",null,[C,n("td",I,[n("a",K,[s("统计词频"),t(o)])]),L,n("td",N,[t(e,{to:"/leetcode/outline/tag/shell.html"},{default:a(()=>[V]),_:1})]),n("td",B,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[D,n("td",F,[n("a",R,[s("数组中的第K个最大元素"),t(o)])]),n("td",S,[n("a",U,[s("[✓]"),t(o)])]),n("td",Y,[t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[z]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:a(()=>[G]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/quickselect.html"},{default:a(()=>[T]),_:1}),s(),A]),n("td",H,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[J,n("td",P,[n("a",Q,[s("根据字符出现频率排序"),t(o)])]),n("td",W,[n("a",X,[s("[✓]"),t(o)])]),n("td",Z,[t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[$]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[nn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:a(()=>[tn]),_:1}),s(),sn]),n("td",an,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[en,n("td",on,[n("a",ln,[s("分割数组为连续子序列"),t(o)])]),pn,n("td",cn,[t(e,{to:"/leetcode/outline/tag/greedy.html"},{default:a(()=>[un]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[rn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[dn]),_:1}),s(),kn]),n("td",hn,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[_n,n("td",mn,[n("a",fn,[s("前K个高频单词"),t(o)])]),gn,n("td",bn,[t(e,{to:"/leetcode/outline/tag/trie.html"},{default:a(()=>[vn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[yn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[xn]),_:1}),s(),wn]),n("td",qn,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[Mn,n("td",En,[n("a",jn,[s("最接近原点的 K 个点"),t(o)])]),n("td",On,[n("a",Cn,[s("[✓]"),t(o)])]),n("td",In,[t(e,{to:"/leetcode/outline/tag/geometry.html"},{default:a(()=>[Kn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[Ln]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/math.html"},{default:a(()=>[Nn]),_:1}),s(),Vn]),n("td",Bn,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[Dn,n("td",Fn,[n("a",Rn,[s("按受欢迎程度排列功能"),t(o)])]),Sn,n("td",Un,[t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[Yn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[zn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[Gn]),_:1}),s(),Tn]),n("td",An,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[Hn,n("td",Jn,[n("a",Pn,[s("最多单词数的发件人"),t(o)])]),Qn,n("td",Wn,[t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[Xn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[Zn]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/string.html"},{default:a(()=>[$n]),_:1}),s(),nt]),n("td",tt,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[st,n("td",at,[n("a",et,[s("出现最频繁的偶数元素"),t(o)])]),ot,n("td",lt,[t(e,{to:"/leetcode/outline/tag/array.html"},{default:a(()=>[pt]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[ct]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/counting.html"},{default:a(()=>[it]),_:1})]),n("td",ut,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})])]),n("tr",null,[rt,n("td",dt,[n("a",kt,[s("链表频率"),t(o)])]),ht,n("td",_t,[t(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:a(()=>[mt]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/linked-list.html"},{default:a(()=>[ft]),_:1}),s(),t(e,{to:"/leetcode/outline/tag/counting.html"},{default:a(()=>[gt]),_:1})]),n("td",bt,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})])])])])])}const qt=c(k,[["render",vt],["__file","0347.html.vue"]]);export{qt as default};
