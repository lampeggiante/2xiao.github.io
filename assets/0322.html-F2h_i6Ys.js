import{_ as p,r as c,o as i,c as d,a as t,b as e,d as n,w as s,f as r,e as u}from"./app-qrCIIj1V.js";const _={},m={id:"_322-零钱兑换",tabindex:"-1"},h=t("a",{class:"header-anchor",href:"#_322-零钱兑换","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/coin-change",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"广度优先搜索",-1),g=t("code",null,"数组",-1),b=t("code",null,"动态规划",-1),y={href:"https://leetcode.com/problems/coin-change",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: coins = [1,2,5], amount = 11</p><p>Output: 3</p><p>Explanation: 11 = 5 + 5 + 1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: coins = [2], amount = 3</p><p>Output: -1</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: coins = [1], amount = 0</p><p>Output: 0</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 2^31 - 1</code></li><li><code>0 &lt;= amount &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用动态规化，定义一个数组<code>dp</code>，其中<code>dp[i]</code>表示凑齐金额<code>i</code>所需的最少硬币数。</p><ul><li>初始化数组 <code>dp</code> 为 <code>-666</code>，便于后续取最小值。</li><li>将 base case <code>dp[0]</code> 设置为 <code>0</code>，表示凑齐金额 <code>0</code> 不需要任何硬币。</li><li>对于每个金额 <code>i</code>，遍历硬币的面额，计算凑齐金额 <code>i</code> 所需的最少硬币数。</li><li>状态转移方程为：<code>dp[i] = min(dp[i], dp[i - coin] + 1)</code>，其中 <code>coin</code> 为硬币的面额。</li><li>最终，<code>dp[amount]</code> 即为凑齐总金额所需的最少硬币数。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">coins</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">amount</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>num <span class="token operator">-</span> coin<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
			res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> sub <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token operator">==</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>
		<span class="token keyword">return</span> dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),j=t("td",{style:{"text-align":"center"}},"983",-1),E={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/minimum-cost-for-tickets",target:"_blank",rel:"noopener noreferrer"},q=t("td",{style:{"text-align":"center"}},null,-1),C={style:{"text-align":"left"}},M=t("code",null,"数组",-1),L=t("code",null,"动态规划",-1),N={style:{"text-align":"left"}},V=t("td",{style:{"text-align":"center"}},"2218",-1),B={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/maximum-value-of-k-coins-from-piles",target:"_blank",rel:"noopener noreferrer"},O=t("td",{style:{"text-align":"center"}},null,-1),R={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),A=t("code",null,"动态规划",-1),K=t("code",null,"前缀和",-1),S={style:{"text-align":"left"}},T=t("td",{style:{"text-align":"center"}},"2224",-1),z={style:{"text-align":"left"}},D={href:"https://leetcode.com/problems/minimum-number-of-operations-to-convert-time",target:"_blank",rel:"noopener noreferrer"},F=t("td",{style:{"text-align":"center"}},null,-1),G={style:{"text-align":"left"}},J=t("code",null,"贪心",-1),P=t("code",null,"字符串",-1),Q={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"center"}},"2547",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/minimum-cost-to-split-an-array",target:"_blank",rel:"noopener noreferrer"},Z=t("td",{style:{"text-align":"center"}},null,-1),$={style:{"text-align":"left"}},tt=t("code",null,"数组",-1),nt=t("code",null,"哈希表",-1),et=t("code",null,"动态规划",-1),st=t("code",null,"1+",-1),at={style:{"text-align":"left"}},ot=t("td",{style:{"text-align":"center"}},"2902",-1),lt={style:{"text-align":"left"}},ct={href:"https://leetcode.com/problems/count-of-sub-multisets-with-bounded-sum",target:"_blank",rel:"noopener noreferrer"},pt=t("td",{style:{"text-align":"center"}},null,-1),it={style:{"text-align":"left"}},dt=t("code",null,"数组",-1),rt=t("code",null,"哈希表",-1),ut=t("code",null,"动态规划",-1),_t=t("code",null,"1+",-1),mt={style:{"text-align":"left"}},ht=t("td",{style:{"text-align":"center"}},"2915",-1),kt={style:{"text-align":"left"}},ft={href:"https://leetcode.com/problems/length-of-the-longest-subsequence-that-sums-to-target",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},null,-1),bt={style:{"text-align":"left"}},yt=t("code",null,"数组",-1),xt=t("code",null,"动态规划",-1),vt={style:{"text-align":"left"}},wt=t("td",{style:{"text-align":"center"}},"2952",-1),jt={style:{"text-align":"left"}},Et={href:"https://leetcode.com/problems/minimum-number-of-coins-to-be-added",target:"_blank",rel:"noopener noreferrer"},It=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},Ct=t("code",null,"贪心",-1),Mt=t("code",null,"数组",-1),Lt=t("code",null,"排序",-1),Nt={style:{"text-align":"left"}},Vt=t("td",{style:{"text-align":"center"}},"2979",-1),Bt={style:{"text-align":"left"}},Ht={href:"https://leetcode.com/problems/most-expensive-item-that-can-not-be-bought",target:"_blank",rel:"noopener noreferrer"},Ot=t("td",{style:{"text-align":"center"}},null,-1),Rt={style:{"text-align":"left"}},Yt=t("code",null,"数学",-1),At=t("code",null,"动态规划",-1),Kt=t("code",null,"数论",-1),St={style:{"text-align":"left"}};function Tt(zt,Dt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),d("div",null,[t("h1",m,[h,e(),t("a",k,[e("322. 零钱兑换"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:s(()=>[f]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[g]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[b]),_:1}),e("  🔗 "),t("a",y,[x,n(o)])]),v,r(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[j,t("td",E,[t("a",I,[e("最低票价"),n(o)])]),q,t("td",C,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[M]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[L]),_:1})]),t("td",N,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[V,t("td",B,[t("a",H,[e("从栈中取出 K 个硬币的最大面值和"),n(o)])]),O,t("td",R,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Y]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[A]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:s(()=>[K]),_:1})]),t("td",S,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[T,t("td",z,[t("a",D,[e("转化时间需要的最少操作数"),n(o)])]),F,t("td",G,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:s(()=>[J]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:s(()=>[P]),_:1})]),t("td",Q,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[U,t("td",W,[t("a",X,[e("拆分数组的最小代价"),n(o)])]),Z,t("td",$,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[tt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[nt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[et]),_:1}),e(),st]),t("td",at,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[ot,t("td",lt,[t("a",ct,[e("和带限制的子多重集合的数目"),n(o)])]),pt,t("td",it,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[dt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[ut]),_:1}),e(),_t]),t("td",mt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[ht,t("td",kt,[t("a",ft,[e("和为目标值的最长子序列的长度"),n(o)])]),gt,t("td",bt,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[yt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[xt]),_:1})]),t("td",vt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[wt,t("td",jt,[t("a",Et,[e("需要添加的硬币的最小数量"),n(o)])]),It,t("td",qt,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:s(()=>[Ct]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Mt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:s(()=>[Lt]),_:1})]),t("td",Nt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Vt,t("td",Bt,[t("a",Ht,[e("最贵的无法购买的商品"),n(o)])]),Ot,t("td",Rt,[n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[Yt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[At]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/number-theory.html"},{default:s(()=>[Kt]),_:1})]),t("td",St,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Gt=p(_,[["render",Tt],["__file","0322.html.vue"]]);export{Gt as default};
