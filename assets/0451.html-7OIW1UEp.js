import{_ as i,r as c,o as r,c as p,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-mvY9N9Pc.js";const h={},_={id:"_451-根据字符出现频率排序",tabindex:"-1"},k=t("a",{class:"header-anchor",href:"#_451-根据字符出现频率排序","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/sort-characters-by-frequency",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"哈希表",-1),m=t("code",null,"字符串",-1),b=t("code",null,"桶排序",-1),y=t("code",null,"计数",-1),x=t("code",null,"排序",-1),v=t("code",null,"堆（优先队列）",-1),q={href:"https://leetcode.com/problems/sort-characters-by-frequency",target:"_blank",rel:"noopener noreferrer"},w=t("code",null,"LeetCode",-1),E=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code>, sort it in <strong>decreasing order</strong> based on the <strong>frequency</strong> of the characters. The <strong>frequency</strong> of a character is the number of times it appears in the string.</p><p>Return <em>the sorted string</em>. If there are multiple answers, return <em>any of them</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;tree&quot;</p><p>Output: &quot;eert&quot;</p><p>Explanation: &#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.</p><p>So &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &quot;eetr&quot; is also a valid answer.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;cccaaa&quot;</p><p>Output: &quot;aaaccc&quot;</p><p>Explanation: Both &#39;c&#39; and &#39;a&#39; appear three times, so both &quot;cccaaa&quot; and &quot;aaaccc&quot; are valid answers.</p><p>Note that &quot;cacaca&quot; is incorrect, as the same characters must be together.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;Aabb&quot;</p><p>Output: &quot;bbAa&quot;</p><p>Explanation: &quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.</p><p>Note that &#39;A&#39; and &#39;a&#39; are treated as two different characters.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 5 * 10^5</code></li><li><code>s</code> consists of uppercase and lowercase English letters and digits.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个字符串 <code>s</code> ，根据字符出现的 <strong>频率</strong> 对其进行 <strong>降序排序</strong> 。一个字符出现的 <strong>频率</strong> 是它出现在字符串中的次数。</p><p>返回 <strong>已排序的字符串</strong> 。如果有多个答案，返回其中任何一个。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用哈希映射来实现：</p><ol><li>使用哈希映射存储字符串中每个元素的频率。</li><li>依据字符出现的频次对字符进行排序。</li><li>遍按照题目要求的格式返回结果。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n log n)</code>，其中 <code>n</code> 是字符串的长度。 <ul><li>这个算法的时间复杂度主要由排序操作决定，因此它的时间复杂度是 <code>O(n log n)</code>，其中 <code>n</code> 是字符串的长度。</li><li>在排序步骤中，我们对字符集进行排序，而字符集的大小是常数级别的（26 个英文字母和一些数字），因此排序的复杂度可以看作是<code> O(1)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(k)</code>，<code>k</code> 为哈希表中最大存储的字符数。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">frequencySort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 使用哈希表统计字符频率</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 根据频率对字符进行排序</span>
	<span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 构建结果字符串</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res <span class="token operator">+=</span> char<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),N=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),O=t("td",{style:{"text-align":"center"}},"347",-1),A={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"center"}},L={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0347",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"left"}},j=t("code",null,"数组",-1),B=t("code",null,"哈希表",-1),M=t("code",null,"分治",-1),R=t("code",null,"5+",-1),S={style:{"text-align":"left"}},T=t("td",{style:{"text-align":"center"}},"387",-1),G={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/first-unique-character-in-a-string",target:"_blank",rel:"noopener noreferrer"},z=t("td",{style:{"text-align":"center"}},null,-1),D={style:{"text-align":"left"}},F=t("code",null,"队列",-1),H=t("code",null,"哈希表",-1),J=t("code",null,"字符串",-1),P=t("code",null,"1+",-1),Q={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"center"}},"1636",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/sort-array-by-increasing-frequency",target:"_blank",rel:"noopener noreferrer"},Y=t("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=t("code",null,"数组",-1),tt=t("code",null,"哈希表",-1),et=t("code",null,"排序",-1),nt={style:{"text-align":"left"}},st=t("td",{style:{"text-align":"center"}},"2278",-1),at={style:{"text-align":"left"}},ot={href:"https://leetcode.com/problems/percentage-of-letter-in-string",target:"_blank",rel:"noopener noreferrer"},lt=t("td",{style:{"text-align":"center"}},null,-1),ct={style:{"text-align":"left"}},it=t("code",null,"字符串",-1),rt={style:{"text-align":"left"}},pt=t("td",{style:{"text-align":"center"}},"2341",-1),dt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/maximum-number-of-pairs-in-array",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"center"}},null,-1),_t={style:{"text-align":"left"}},kt=t("code",null,"数组",-1),gt=t("code",null,"哈希表",-1),ft=t("code",null,"计数",-1),mt={style:{"text-align":"left"}},bt=t("td",{style:{"text-align":"center"}},"2374",-1),yt={style:{"text-align":"left"}},xt={href:"https://leetcode.com/problems/node-with-highest-edge-score",target:"_blank",rel:"noopener noreferrer"},vt=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},wt=t("code",null,"图",-1),Et=t("code",null,"哈希表",-1),Nt={style:{"text-align":"left"}},Ot=t("td",{style:{"text-align":"center"}},"2404",-1),At={style:{"text-align":"left"}},It={href:"https://leetcode.com/problems/most-frequent-even-element",target:"_blank",rel:"noopener noreferrer"},Ct=t("td",{style:{"text-align":"center"}},null,-1),Lt={style:{"text-align":"left"}},Vt=t("code",null,"数组",-1),jt=t("code",null,"哈希表",-1),Bt=t("code",null,"计数",-1),Mt={style:{"text-align":"left"}},Rt=t("td",{style:{"text-align":"center"}},"2506",-1),St={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/count-pairs-of-similar-strings",target:"_blank",rel:"noopener noreferrer"},Gt=t("td",{style:{"text-align":"center"}},null,-1),Kt={style:{"text-align":"left"}},zt=t("code",null,"位运算",-1),Dt=t("code",null,"数组",-1),Ft=t("code",null,"哈希表",-1),Ht=t("code",null,"2+",-1),Jt={style:{"text-align":"left"}};function Pt(Qt,Ut){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),p("div",null,[t("h1",_,[k,n(),t("a",g,[n("451. 根据字符出现频率排序"),e(o)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[f]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[m]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:s(()=>[b]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/counting.html"},{default:s(()=>[y]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/sorting.html"},{default:s(()=>[x]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/heap-priority-queue.html"},{default:s(()=>[v]),_:1}),n("  🔗 "),t("a",q,[w,e(o)])]),E,d(" prettier-ignore "),t("table",null,[N,t("tbody",null,[t("tr",null,[O,t("td",A,[t("a",I,[n("前 K 个高频元素"),e(o)])]),t("td",C,[t("a",L,[n("[✓]"),e(o)])]),t("td",V,[e(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[j]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[B]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:s(()=>[M]),_:1}),n(),R]),t("td",S,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[T,t("td",G,[t("a",K,[n("字符串中的第一个唯一字符"),e(o)])]),z,t("td",D,[e(a,{to:"/leetcode/outline/tag/queue.html"},{default:s(()=>[F]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[H]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[J]),_:1}),n(),P]),t("td",Q,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[U,t("td",W,[t("a",X,[n("按照频率将数组升序排序"),e(o)])]),Y,t("td",Z,[e(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[$]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[tt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/sorting.html"},{default:s(()=>[et]),_:1})]),t("td",nt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[st,t("td",at,[t("a",ot,[n("字母在字符串中的百分比"),e(o)])]),lt,t("td",ct,[e(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[it]),_:1})]),t("td",rt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[pt,t("td",dt,[t("a",ut,[n("数组能形成多少数对"),e(o)])]),ht,t("td",_t,[e(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[kt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[gt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/counting.html"},{default:s(()=>[ft]),_:1})]),t("td",mt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[bt,t("td",yt,[t("a",xt,[n("边积分最高的节点"),e(o)])]),vt,t("td",qt,[e(a,{to:"/leetcode/outline/tag/graph.html"},{default:s(()=>[wt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[Et]),_:1})]),t("td",Nt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Ot,t("td",At,[t("a",It,[n("出现最频繁的偶数元素"),e(o)])]),Ct,t("td",Lt,[e(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Vt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[jt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/counting.html"},{default:s(()=>[Bt]),_:1})]),t("td",Mt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[Rt,t("td",St,[t("a",Tt,[n("统计相似字符串对的数目"),e(o)])]),Gt,t("td",Kt,[e(a,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[zt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Dt]),_:1}),n(),e(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[Ft]),_:1}),n(),Ht]),t("td",Jt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const Xt=i(h,[["render",Pt],["__file","0451.html.vue"]]);export{Xt as default};
