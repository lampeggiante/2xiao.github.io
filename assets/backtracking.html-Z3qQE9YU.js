const e=JSON.parse('{"key":"v-7f1ff118","path":"/leetcode-js/algorithm/backtracking.html","title":"3.4 回溯算法","lang":"zh-CN","frontmatter":{"description":"3.4 回溯算法 回溯的定义 定义 回溯（Backtracking） 又称为试探法，是一种通过不断地尝试，搜索问题的解的算法。它是一种深度优先搜索的过程，通常通过递归实现。回溯算法主要用于解决组合问题、排列问题和搜索问题，其核心思想是穷尽所有可能性，找到满足条件的解。","head":[["meta",{"property":"og:url","content":"https://2xiao.github.io/leetcode-js/algorithm/backtracking.html"}],["meta",{"property":"og:site_name","content":"LeetCode-JS"}],["meta",{"property":"og:title","content":"3.4 回溯算法"}],["meta",{"property":"og:description","content":"3.4 回溯算法 回溯的定义 定义 回溯（Backtracking） 又称为试探法，是一种通过不断地尝试，搜索问题的解的算法。它是一种深度优先搜索的过程，通常通过递归实现。回溯算法主要用于解决组合问题、排列问题和搜索问题，其核心思想是穷尽所有可能性，找到满足条件的解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-18T09:50:23.000Z"}],["meta",{"property":"article:author","content":"2xiao"}],["meta",{"property":"article:modified_time","content":"2024-10-18T09:50:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.4 回溯算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-18T09:50:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"2xiao\\",\\"url\\":\\"https://github.com/2xiao\\"}]}"]]},"headers":[{"level":2,"title":"回溯的定义","slug":"回溯的定义","link":"#回溯的定义","children":[]},{"level":2,"title":"回溯的原理","slug":"回溯的原理","link":"#回溯的原理","children":[]},{"level":2,"title":"回溯的框架套路","slug":"回溯的框架套路","link":"#回溯的框架套路","children":[{"level":3,"title":"元素无重不可复选 - 子集","slug":"元素无重不可复选-子集","link":"#元素无重不可复选-子集","children":[]},{"level":3,"title":"元素无重不可复选 - 组合","slug":"元素无重不可复选-组合","link":"#元素无重不可复选-组合","children":[]},{"level":3,"title":"元素无重不可复选 - 排列","slug":"元素无重不可复选-排列","link":"#元素无重不可复选-排列","children":[]},{"level":3,"title":"元素可重不可复选 - 子集","slug":"元素可重不可复选-子集","link":"#元素可重不可复选-子集","children":[]},{"level":3,"title":"元素可重不可复选 - 组合","slug":"元素可重不可复选-组合","link":"#元素可重不可复选-组合","children":[]},{"level":3,"title":"元素可重不可复选 - 排列","slug":"元素可重不可复选-排列","link":"#元素可重不可复选-排列","children":[]},{"level":3,"title":"元素无重可复选 - 子集 / 组合","slug":"元素无重可复选-子集-组合","link":"#元素无重可复选-子集-组合","children":[]},{"level":3,"title":"元素无重可复选 - 排列","slug":"元素无重可复选-排列","link":"#元素无重可复选-排列","children":[]}]},{"level":2,"title":"相关题目","slug":"相关题目","link":"#相关题目","children":[]}],"git":{"createdTime":1729245023000,"updatedTime":1729245023000,"contributors":[{"name":"2xiao","email":"827574297wxxtb@sina.com","commits":1}]},"readingTime":{"minutes":19.04,"words":5713},"filePathRelative":"leetcode-js/algorithm/backtracking.md","localizedDate":"2024年10月18日","excerpt":"<h1> 3.4 回溯算法</h1>\\n<h2> 回溯的定义</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">定义</p>\\n<p><strong>回溯（Backtracking）</strong> 又称为试探法，是一种通过不断地尝试，搜索问题的解的算法。它是一种深度优先搜索的过程，通常通过递归实现。回溯算法主要用于解决组合问题、排列问题和搜索问题，其核心思想是穷尽所有可能性，找到满足条件的解。</p>\\n</div>","autoDesc":true}');export{e as data};
