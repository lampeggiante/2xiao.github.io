import{_ as p,r as c,o as r,c as d,a as e,b as t,d as n,w as s,f as i,e as u}from"./app-mvY9N9Pc.js";const m={},h={id:"_88-合并两个有序数组",tabindex:"-1"},_=e("a",{class:"header-anchor",href:"#_88-合并两个有序数组","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"数组",-1),f=e("code",null,"双指针",-1),b=e("code",null,"排序",-1),y={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong> , and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p><p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p><p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array</em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</p><p>Output: [1,2,2,3,5,6]</p><p>Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</p><p>The result of the merge is [ <em>1</em> , <em>2</em> ,2, <em>3</em> ,5,6] with the underlined elements coming from nums1.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums1 = [1], m = 1, nums2 = [], n = 0</p><p>Output: [1]</p><p>Explanation: The arrays we are merging are [1] and [].</p><p>The result of the merge is [1].</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums1 = [0], m = 0, nums2 = [1], n = 1</p><p>Output: [1]</p><p>Explanation: The arrays we are merging are [] and [1].</p><p>The result of the merge is [1].</p><p>Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-10^9 &lt;= nums1[i], nums2[j] &lt;= 10^9</code></li></ul><p><strong>Follow up:</strong> Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个按 递增顺序 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 合并 <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 递增顺序 排列。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>为了不大量移动元素，就要从 2 个数组长度之和的最后一个位置开始，依次选取两个数组中大的数，从第一个数组的尾巴开始往头放，只要循环一次以后，就生成了合并以后的数组了。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n + m)</code>，其中<code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目，需要遍历一遍两个数组。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，用了常数个变量存储中间状态。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> ../../../assets/todo/0242.mdm
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify nums1 in-place instead.
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> k <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			i<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			j<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		k<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),w=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),E=e("td",{style:{"text-align":"center"}},"21",-1),j={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},C={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0021",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"left"}},O=e("code",null,"递归",-1),I=e("code",null,"链表",-1),L={style:{"text-align":"left"}},V=e("td",{style:{"text-align":"center"}},"977",-1),B={style:{"text-align":"left"}},M={href:"https://leetcode.com/problems/squares-of-a-sorted-array",target:"_blank",rel:"noopener noreferrer"},R=e("td",{style:{"text-align":"center"}},null,-1),D={style:{"text-align":"left"}},F=e("code",null,"数组",-1),K=e("code",null,"双指针",-1),S=e("code",null,"排序",-1),Y={style:{"text-align":"left"}},z=e("td",{style:{"text-align":"center"}},"986",-1),A={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/interval-list-intersections",target:"_blank",rel:"noopener noreferrer"},H={style:{"text-align":"center"}},J={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0986",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"left"}},Q=e("code",null,"数组",-1),U=e("code",null,"双指针",-1),W={style:{"text-align":"left"}},X=e("td",{style:{"text-align":"center"}},"2516",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/take-k-of-each-character-from-left-and-right",target:"_blank",rel:"noopener noreferrer"},ee=e("td",{style:{"text-align":"center"}},null,-1),ne={style:{"text-align":"left"}},te=e("code",null,"哈希表",-1),se=e("code",null,"字符串",-1),ae=e("code",null,"滑动窗口",-1),oe={style:{"text-align":"left"}};function le(ce,pe){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),d("div",null,[e("h1",h,[_,t(),e("a",k,[t("88. 合并两个有序数组"),n(o)])]),e("p",null,[t("🟢 "),n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[g]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[f]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/sorting.html"},{default:s(()=>[b]),_:1}),t("  🔗 "),e("a",y,[v,n(o)])]),x,i(" prettier-ignore "),e("table",null,[w,e("tbody",null,[e("tr",null,[E,e("td",j,[e("a",T,[t("合并两个有序链表"),n(o)])]),e("td",q,[e("a",C,[t("[✓]"),n(o)])]),e("td",N,[n(a,{to:"/leetcode/outline/tag/recursion.html"},{default:s(()=>[O]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[I]),_:1})]),e("td",L,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[V,e("td",B,[e("a",M,[t("有序数组的平方"),n(o)])]),R,e("td",D,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[F]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[K]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/sorting.html"},{default:s(()=>[S]),_:1})]),e("td",Y,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[z,e("td",A,[e("a",G,[t("区间列表的交集"),n(o)])]),e("td",H,[e("a",J,[t("[✓]"),n(o)])]),e("td",P,[n(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[Q]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:s(()=>[U]),_:1})]),e("td",W,[n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])]),e("tr",null,[X,e("td",Z,[e("a",$,[t("每种字符至少取 K 个"),n(o)])]),ee,e("td",ne,[n(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[te]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[se]),_:1}),t(),n(a,{to:"/leetcode/outline/tag/sliding-window.html"},{default:s(()=>[ae]),_:1})]),e("td",oe,[n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])])])])])}const de=p(m,[["render",le],["__file","0088.html.vue"]]);export{de as default};
