import{_ as p,r as c,o as i,c as r,a as n,b as t,d as s,w as e,f as u,e as d}from"./app-qrCIIj1V.js";const k={},h={id:"_110-平衡二叉树",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_110-平衡二叉树","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"树",-1),b=n("code",null,"深度优先搜索",-1),g=n("code",null,"二叉树",-1),v={href:"https://leetcode.com/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a binary tree, determine if it is <strong>height-balanced</strong>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,9,20,null,null,15,7]</p><p>Output: true</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,2,2,3,3,null,null,4,4]</p><p>Output: false</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: root = []</p><p>Output: true</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li><li><code>-10^4 &lt;= Node.val &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>通过递归的方式，对每个节点进行判断，确保它的左右子树高度差不超过 1，并逐层向下判断:</p><ol><li>对于每个节点，计算其左子树和右子树的高度差。</li><li>如果某个节点的左右子树的高度差超过 1，则说明以该节点为根的子树不是平衡的，直接返回 <code>false</code>。</li><li>如果该节点是平衡的，继续递归检查其左子树和右子树是否平衡。</li><li>递归的终止条件是遍历到叶子节点，叶子节点是平衡的。</li><li>如果整棵树的所有节点都满足平衡条件，返回 <code>true</code>。</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isBalanced</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 空树是平衡的</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 计算左右子树的高度差</span>
	<span class="token keyword">const</span> diff <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 检查当前节点是否平衡，以及其左右子树是否平衡</span>
	<span class="token keyword">return</span> diff <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 计算树的高度</span>
<span class="token keyword">var</span> <span class="token function-variable function">getHeight</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),j=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),w=n("td",{style:{"text-align":"center"}},"104",-1),E={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},B={style:{"text-align":"left"}},C=n("code",null,"树",-1),H=n("code",null,"深度优先搜索",-1),I=n("code",null,"广度优先搜索",-1),L=n("code",null,"1+",-1),V={style:{"text-align":"left"}},z=n("td",{style:{"text-align":"center"}},"3319",-1),M={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/k-th-largest-perfect-subtree-size-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},T={style:{"text-align":"center"}},R={style:{"text-align":"left"}},G=n("code",null,"树",-1),K=n("code",null,"深度优先搜索",-1),S=n("code",null,"二叉树",-1),A=n("code",null,"1+",-1),D={style:{"text-align":"left"}};function F(J,P){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[n("h1",h,[_,t(),n("a",m,[t("110. 平衡二叉树"),s(o)])]),n("p",null,[t("🟢 "),s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1}),t("  🔖  "),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[f]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[b]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[g]),_:1}),t("  🔗 "),n("a",v,[y,s(o)])]),x,u(" prettier-ignore "),n("table",null,[j,n("tbody",null,[n("tr",null,[w,n("td",E,[n("a",N,[t("二叉树的最大深度"),s(o)])]),n("td",q,[s(a,{to:"/leetcode-js/problem/0104.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",B,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[C]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[H]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/breadth-first-search.html"},{default:e(()=>[I]),_:1}),t(),L]),n("td",V,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[z,n("td",M,[n("a",O,[t("第 K 大的完美二叉子树的大小"),s(o)])]),n("td",T,[s(a,{to:"/leetcode-js/problem/3319.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",R,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[G]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[K]),_:1}),t(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[S]),_:1}),t(),A]),n("td",D,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])])])}const U=p(k,[["render",F],["__file","0110.html.vue"]]);export{U as default};
