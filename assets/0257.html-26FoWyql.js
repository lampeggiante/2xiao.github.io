import{_ as p,r as c,o as i,c as r,a as t,b as n,d as s,w as e,f as d,e as u}from"./app-qrCIIj1V.js";const h={},k={id:"_257-二叉树的所有路径",tabindex:"-1"},_=t("a",{class:"header-anchor",href:"#_257-二叉树的所有路径","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/binary-tree-paths",target:"_blank",rel:"noopener noreferrer"},m=t("code",null,"树",-1),g=t("code",null,"深度优先搜索",-1),b=t("code",null,"字符串",-1),v=t("code",null,"回溯",-1),y=t("code",null,"二叉树",-1),x={href:"https://leetcode.com/problems/binary-tree-paths",target:"_blank",rel:"noopener noreferrer"},w=t("code",null,"LeetCode",-1),j=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>root</code> of a binary tree, return <em>all root-to-leaf paths in <strong>any order</strong></em>.</p><p>A <strong>leaf</strong> is a node with no children.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,2,3,null,5]</p><p>Output: [&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = [1]</p><p>Output: [&quot;1&quot;]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。说明: 叶子节点是指没有子节点的节点。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>Google 的面试题，考察递归</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">binaryTreePaths</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> tempLeft <span class="token operator">=</span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> tempLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">&#39;-&gt;&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">let</span> tempRight <span class="token operator">=</span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> tempRight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">&#39;-&gt;&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,17),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),L=t("td",{style:{"text-align":"center"}},"113",-1),N={style:{"text-align":"left"}},E={href:"https://leetcode.com/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},T={style:{"text-align":"left"}},C=t("code",null,"树",-1),V=t("code",null,"深度优先搜索",-1),R=t("code",null,"回溯",-1),B=t("code",null,"1+",-1),M={style:{"text-align":"left"}},P=t("td",{style:{"text-align":"center"}},"988",-1),G={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/smallest-string-starting-from-leaf",target:"_blank",rel:"noopener noreferrer"},z=t("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},S=t("code",null,"树",-1),D=t("code",null,"深度优先搜索",-1),F=t("code",null,"字符串",-1),H=t("code",null,"2+",-1),J={style:{"text-align":"left"}},K=t("td",{style:{"text-align":"center"}},"2096",-1),Q={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another",target:"_blank",rel:"noopener noreferrer"},W=t("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Y=t("code",null,"树",-1),Z=t("code",null,"深度优先搜索",-1),$=t("code",null,"字符串",-1),tt=t("code",null,"1+",-1),nt={style:{"text-align":"left"}};function st(et,at){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[t("h1",k,[_,n(),t("a",f,[n("257. 二叉树的所有路径"),s(o)])]),t("p",null,[n("🟢 "),s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1}),n("  🔖  "),s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[m]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[g]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[b]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:e(()=>[v]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/binary-tree.html"},{default:e(()=>[y]),_:1}),n("  🔗 "),t("a",x,[w,s(o)])]),j,d(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[L,t("td",N,[t("a",E,[n("路径总和 II"),s(o)])]),t("td",I,[s(a,{to:"/leetcode-js/problem/0113.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",T,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[C]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[V]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/backtracking.html"},{default:e(()=>[R]),_:1}),n(),B]),t("td",M,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})])]),t("tr",null,[P,t("td",G,[t("a",O,[n("从叶结点开始的最小字符串"),s(o)])]),z,t("td",A,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[S]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[D]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[F]),_:1}),n(),H]),t("td",J,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})])]),t("tr",null,[K,t("td",Q,[t("a",U,[n("从二叉树一个节点到另一个节点每一步的方向"),s(o)])]),W,t("td",X,[s(a,{to:"/leetcode-js/outline/tag/tree.html"},{default:e(()=>[Y]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/depth-first-search.html"},{default:e(()=>[Z]),_:1}),n(),s(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[$]),_:1}),n(),tt]),t("td",nt,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})])])])])])}const lt=p(h,[["render",st],["__file","0257.html.vue"]]);export{lt as default};
