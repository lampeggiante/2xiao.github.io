import{_ as n,o as s,c as a,e as t}from"./app-b4s7f53x.js";const p="/assets/interview-js-16-eIre18M-.png",e={},o=t(`<h1 id="如何实现防抖和节流" tabindex="-1"><a class="header-anchor" href="#如何实现防抖和节流" aria-hidden="true">#</a> 如何实现防抖和节流？</h1><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><p>防抖（Debounce）与节流（Throttle）是两种常见的性能优化手段，旨在限制高频率事件的执行次数，避免资源浪费，提高前端性能。</p><p>在浏览器中，诸如 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、<code>mousemove</code> 等事件会频繁触发绑定的回调函数。如果不加限制，这些事件可能会显著增加资源消耗，导致页面卡顿。因此，通过防抖或节流机制，我们可以有效减少事件回调的执行频率。</p><ul><li><p>**节流（Throttle）**的核心思想是控制函数的执行频率。在指定的时间间隔内，无论事件触发多少次，函数最多执行一次。</p></li><li><p>**防抖（Debounce）**的核心思想是延迟函数的执行。在事件不断触发的情况下，只有在事件触发停止后的一段时间内，函数才会被执行。</p></li></ul><p>可以将电梯的运行比作函数的执行：</p><ul><li><strong>节流</strong>：电梯每隔 15 秒运行一次，无论期间进出多少人，每 15 秒固定出发一次。</li><li><strong>防抖</strong>：电梯在乘客进入后等待 15 秒。如果在等待期间还有乘客进入，电梯重新计时，直到 15 秒内无人进入才出发。</li></ul><h2 id="二、节流的实现" tabindex="-1"><a class="header-anchor" href="#二、节流的实现" aria-hidden="true">#</a> 二、节流的实现</h2><h3 id="时间戳实现" tabindex="-1"><a class="header-anchor" href="#时间戳实现" aria-hidden="true">#</a> 时间戳实现</h3><p>利用时间戳，记录上次函数执行的时间点。每次事件触发时，检查当前时间与上次执行时间的间隔是否大于指定时间，若满足条件则执行函数。<br> 这种方式在事件触发时会立即执行，但在停止触发后无法再执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttleByTimestamp</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> lastTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTime <span class="token operator">&gt;=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
			lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定时器实现" tabindex="-1"><a class="header-anchor" href="#定时器实现" aria-hidden="true">#</a> 定时器实现</h3><p>通过定时器延迟函数执行。事件触发后，若定时器尚未结束，则不重新设定定时器；只有在当前定时器完成后，才允许设定新的定时器。<br> 这种方式在事件停止后仍会执行一次函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttleByTimer</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
				timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="综合实现" tabindex="-1"><a class="header-anchor" href="#综合实现" aria-hidden="true">#</a> 综合实现</h3><p>结合时间戳和定时器，确保函数在触发时立即执行，同时在停止触发后还能再次执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> lastTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> remaining <span class="token operator">=</span> delay <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
			timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span>
			<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				lastTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
				<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、防抖的实现" tabindex="-1"><a class="header-anchor" href="#三、防抖的实现" aria-hidden="true">#</a> 三、防抖的实现</h2><h3 id="基础实现" tabindex="-1"><a class="header-anchor" href="#基础实现" aria-hidden="true">#</a> 基础实现</h3><p>通过 <code>setTimeout</code> 延迟函数的执行，每次事件触发时重置计时器。在计时器到期之前，若有新的事件触发，则重新计时。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="支持立即执行的实现" tabindex="-1"><a class="header-anchor" href="#支持立即执行的实现" aria-hidden="true">#</a> 支持立即执行的实现</h3><p>在部分场景下，需要函数在第一次触发事件时立即执行，随后进入防抖逻辑。可以通过一个标志变量 <code>immediate</code> 实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">;</span>
		<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、区别与对比" tabindex="-1"><a class="header-anchor" href="#四、区别与对比" aria-hidden="true">#</a> 四、区别与对比</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>防抖（Debounce）</strong></th><th><strong>节流（Throttle）</strong></th></tr></thead><tbody><tr><td><strong>执行时机</strong></td><td>事件停止触发后的指定时间内执行一次</td><td>指定时间间隔内执行一次</td></tr><tr><td><strong>适用场景</strong></td><td>连续事件中只需执行最后一次回调</td><td>需要限制高频事件的回调执行次数</td></tr><tr><td><strong>实现机制</strong></td><td>使用 <code>setTimeout</code> 延迟函数执行</td><td>使用时间戳或定时器控制函数执行频率</td></tr></tbody></table><p>示例对比：</p><ul><li>防抖：频繁触发的搜索框输入，只有在用户输入完成后才发起请求。</li><li>节流：滚动事件监听，每隔一定时间触发一次滚动加载逻辑。</li></ul><p>下图展示了两者在时间轴上的执行效果：</p><figure><img src="`+p+'" alt="Execution Diagram" tabindex="0" loading="lazy"><figcaption>Execution Diagram</figcaption></figure><h2 id="五、应用场景" tabindex="-1"><a class="header-anchor" href="#五、应用场景" aria-hidden="true">#</a> 五、应用场景</h2><h3 id="防抖适用场景" tabindex="-1"><a class="header-anchor" href="#防抖适用场景" aria-hidden="true">#</a> 防抖适用场景</h3><ol><li><strong>搜索框输入</strong>：用户停止输入时发起搜索请求。</li><li><strong>表单验证</strong>：如手机号或邮箱验证，防止每次输入都触发检测。</li><li><strong>窗口调整事件</strong>：<code>resize</code> 操作结束后重新计算窗口布局。</li></ol><h3 id="节流适用场景" tabindex="-1"><a class="header-anchor" href="#节流适用场景" aria-hidden="true">#</a> 节流适用场景</h3><ol><li><strong>滚动加载</strong>：例如滚动加载下一页内容或监听是否滚动到底部。</li><li><strong>输入框联想功能</strong>：在输入过程中，定时获取联想结果。</li><li><strong>鼠标移动事件</strong>：如元素拖拽，限制触发频率以减少性能消耗。</li></ol>',35),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","debounce_throttle.html.vue"]]);export{d as default};
