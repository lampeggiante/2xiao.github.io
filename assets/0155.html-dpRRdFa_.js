import{_ as l,r as c,o as i,c as u,a as n,b as s,d as t,w as a,f as d,e as r}from"./app-5VBZs9Uu.js";const k={},m={id:"_155-最小栈",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_155-最小栈","aria-hidden":"true"},"#",-1),v={href:"https://leetcode.com/problems/min-stack",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"栈",-1),b=n("code",null,"设计",-1),f={href:"https://leetcode.com/problems/min-stack",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"LeetCode",-1),y=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><p>Implement the <code>MinStack</code> class:</p><ul><li><code>MinStack()</code> initializes the stack object.</li><li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li><li><code>void pop()</code> removes the element on the top of the stack.</li><li><code>int top()</code> gets the top element of the stack.</li><li><code>int getMin()</code> retrieves the minimum element in the stack.</li></ul><p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</p><p>[[],[-2],[0],[-3],[],[],[],[]]</p><p><strong>Output</strong></p><p>[null,null,null,null,-3,null,0,-2]</p><p><strong>Explanation</strong></p><p>MinStack minStack = new MinStack();</p><p>minStack.push(-2);</p><p>minStack.push(0);</p><p>minStack.push(-3);</p><p>minStack.getMin(); // return -3</p><p>minStack.pop();</p><p>minStack.top(); // return 0</p><p>minStack.getMin(); // return -2</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>-2^31 &lt;= val &lt;= 2^31 - 1</code></li><li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li><li>At most <code>3 * 10^4</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以在元素每次入栈时，将当前栈内的最小元素作为数组的第二个参数一起入栈，同时保存当前值和栈内最小值：<code>[val, min]</code>，这样不管出栈时栈内最小元素如何变化，都可以直接返回 <code>min</code>。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// @param {number} val</span>
  <span class="token comment">// @return {void}</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>val<span class="token punctuation">,</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      min <span class="token operator">=</span> val <span class="token operator">&lt;</span> min <span class="token operator">?</span> val <span class="token operator">:</span> min<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>val<span class="token punctuation">,</span> min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// @return {void}</span>
  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// @return {number}</span>
  <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// @return {number}</span>
  <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Your MinStack object will be instantiated and called as such:
 * var obj = new MinStack()
 * obj.push(val)
 * obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.getMin()
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,16),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),w=n("td",{style:{"text-align":"center"}},"239",-1),j={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/sliding-window-maximum",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},S={style:{"text-align":"left"}},C=n("code",null,"队列",-1),E=n("code",null,"数组",-1),L=n("code",null,"滑动窗口",-1),N=n("code",null,"2+",-1),V={style:{"text-align":"left"}},I=n("td",{style:{"text-align":"center"}},"716",-1),B={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/max-stack",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"center"}},null,-1),R={style:{"text-align":"left"}},Y=n("code",null,"栈",-1),z=n("code",null,"设计",-1),A=n("code",null,"链表",-1),D=n("code",null,"2+",-1),T={style:{"text-align":"left"}};function F(G,J){const o=c("ExternalLinkIcon"),p=c("font"),e=c("RouterLink");return i(),u("div",null,[n("h1",m,[h,s(),n("a",v,[s("155. 最小栈"),t(o)])]),n("p",null,[s("🟠 "),t(p,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/leetcode-js/outline/tag/stack.html"},{default:a(()=>[_]),_:1}),s(),t(e,{to:"/leetcode-js/outline/tag/design.html"},{default:a(()=>[b]),_:1}),s("  🔗 "),n("a",f,[g,t(o)])]),y,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,n("td",j,[n("a",q,[s("滑动窗口最大值"),t(o)])]),n("td",M,[t(e,{to:"/leetcode-js/problem/0239.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",S,[t(e,{to:"/leetcode-js/outline/tag/queue.html"},{default:a(()=>[C]),_:1}),s(),t(e,{to:"/leetcode-js/outline/tag/array.html"},{default:a(()=>[E]),_:1}),s(),t(e,{to:"/leetcode-js/outline/tag/sliding-window.html"},{default:a(()=>[L]),_:1}),s(),N]),n("td",V,[t(p,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})])]),n("tr",null,[I,n("td",B,[n("a",H,[s("最大栈"),t(o)])]),O,n("td",R,[t(e,{to:"/leetcode-js/outline/tag/stack.html"},{default:a(()=>[Y]),_:1}),s(),t(e,{to:"/leetcode-js/outline/tag/design.html"},{default:a(()=>[z]),_:1}),s(),t(e,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:a(()=>[A]),_:1}),s(),D]),n("td",T,[t(p,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})])])])])])}const P=l(k,[["render",F],["__file","0155.html.vue"]]);export{P as default};
