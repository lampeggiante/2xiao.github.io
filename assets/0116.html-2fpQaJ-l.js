import{_ as c,r as p,o as i,c as r,a as n,b as e,d as t,w as s,f as u,e as d}from"./app-mvY9N9Pc.js";const h={},k={id:"_116-填充每个节点的下一个右侧节点指针",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_116-填充每个节点的下一个右侧节点指针","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"树",-1),g=n("code",null,"深度优先搜索",-1),v=n("code",null,"广度优先搜索",-1),b=n("code",null,"链表",-1),x=n("code",null,"二叉树",-1),y={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),N=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>struct Node <span class="token punctuation">{</span>
  int val<span class="token punctuation">;</span>
  Node <span class="token operator">*</span>left<span class="token punctuation">;</span>
  Node <span class="token operator">*</span>right<span class="token punctuation">;</span>
  Node <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,2,3,4,5,6,7]</p><p>Output: [1,#,2,3,#,4,5,6,7,#]</p><p>Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 212 - 1]</code>.</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><p><strong>Follow-up:</strong></p><ul><li>You may only use constant extra space.</li><li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个 <strong>完美二叉树</strong> ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>struct Node <span class="token punctuation">{</span>
  int val<span class="token punctuation">;</span>
  Node <span class="token operator">*</span>left<span class="token punctuation">;</span>
  Node <span class="token operator">*</span>right<span class="token punctuation">;</span>
  Node <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>填充它的每个 <code>next</code> 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 <code>next</code> 指针设置为 <code>NULL</code>。初始状态下，所有  <code>next</code> 指针都被设置为 <code>NULL</code>。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本质上是二叉树的层序遍历，基于广度优先搜索，将每层的节点放入队列，并遍历队列进行连接。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Node<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Node<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">connect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> queue<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		queue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),L=n("td",{style:{"text-align":"center"}},"117",-1),j={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},C={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0117",target:"_blank",rel:"noopener noreferrer"},T={style:{"text-align":"left"}},V=n("code",null,"树",-1),B=n("code",null,"深度优先搜索",-1),U=n("code",null,"广度优先搜索",-1),F=n("code",null,"2+",-1),M={style:{"text-align":"left"}},Y=n("td",{style:{"text-align":"center"}},"199",-1),z={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},A={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0199",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"left"}},H=n("code",null,"树",-1),P=n("code",null,"深度优先搜索",-1),S=n("code",null,"广度优先搜索",-1),D=n("code",null,"1+",-1),J={style:{"text-align":"left"}},K=n("td",{style:{"text-align":"center"}},"2509",-1),Q={style:{"text-align":"left"}},W={href:"https://leetcode.com/problems/cycle-length-queries-in-a-tree",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"树",-1),nn=n("code",null,"数组",-1),en=n("code",null,"二叉树",-1),tn={style:{"text-align":"left"}};function sn(an,on){const o=p("ExternalLinkIcon"),l=p("font"),a=p("RouterLink");return i(),r("div",null,[n("h1",k,[_,e(),n("a",f,[e("116. 填充每个节点的下一个右侧节点指针"),t(o)])]),n("p",null,[e("🟠 "),t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),t(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[m]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[g]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[v]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/linked-list.html"},{default:s(()=>[b]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[x]),_:1}),e("  🔗 "),n("a",y,[w,t(o)])]),N,u(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[L,n("td",j,[n("a",I,[e("填充每个节点的下一个右侧节点指针 II"),t(o)])]),n("td",E,[n("a",C,[e("[✓]"),t(o)])]),n("td",T,[t(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[V]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[B]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[U]),_:1}),e(),F]),n("td",M,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[Y,n("td",z,[n("a",O,[e("二叉树的右视图"),t(o)])]),n("td",R,[n("a",A,[e("[✓]"),t(o)])]),n("td",G,[t(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[H]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[P]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[S]),_:1}),e(),D]),n("td",J,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[K,n("td",Q,[n("a",W,[e("查询树中环的长度"),t(o)])]),X,n("td",Z,[t(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[$]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[nn]),_:1}),e(),t(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[en]),_:1})]),n("td",tn,[t(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])])])])])}const pn=c(h,[["render",sn],["__file","0116.html.vue"]]);export{pn as default};
