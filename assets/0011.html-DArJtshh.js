import{_ as i,r as c,o as p,c as d,a as e,b as t,d as n,w as s,f as r,e as u}from"./app-qrCIIj1V.js";const h={},_={id:"_11-盛最多水的容器",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#_11-盛最多水的容器","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/container-with-most-water",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"贪心",-1),f=e("code",null,"数组",-1),b=e("code",null,"双指针",-1),v={href:"https://leetcode.com/problems/container-with-most-water",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return <em>the maximum amount of water a container can store</em>.</p><p><strong>Notice</strong> that you may not slant the container.</p><p><strong>Example 1:</strong></p><figure><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: height = [1,8,6,2,5,4,8,3,7]</p><p>Output: 49</p><p>Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: height = [1,1]</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 10^5</code></li><li><code>0 &lt;= height[i] &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>说明：你不能倾斜容器。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这一题可以用对撞指针的思路，首尾分别 2 个指针，每次移动以后都分别判断长宽的乘积是否最大。</p><p>从示例中可以看出，如果确定好左右两端的直线，容纳的水量是由 <code>左右两端直线中较低直线的高度 * 两端直线之间的距离</code> 所决定的。所以我们应该使得 <strong>较低直线的高度尽可能的高</strong>，这样才能使盛水面积尽可能的大。</p><p>可以使用对撞指针求解，移动较低直线所在的指针位置，从而得到不同的高度和面积，最终获取其中最大的面积。具体做法如下：</p><ol><li>使用两个指针 <code>left</code>，<code>right</code>。<code>left</code> 指向数组开始位置，<code>right</code> 指向数组结束位置。</li><li>计算 <code>left</code> 和 <code>right</code> 所构成的面积值，同时维护更新最大面积值。</li><li>判断 <code>left</code> 和 <code>right</code> 的高度值大小。 <ol><li>如果 <code>left</code> 指向的直线高度比较低，则将 <code>left</code> 指针右移。</li><li>如果 <code>right</code> 指向的直线高度比较低，则将 <code>right</code> 指针左移。</li></ol></li><li>如果遇到 <code>left == right</code>，跳出循环，最后返回最大的面积。</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">height</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _height<span class="token punctuation">,</span> width<span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    width <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _height <span class="token operator">=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      _height <span class="token operator">=</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> _height <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),w=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),j=e("td",{style:{"text-align":"center"}},"42",-1),E={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},V={style:{"text-align":"left"}},q=e("code",null,"栈",-1),C=e("code",null,"数组",-1),L=e("code",null,"双指针",-1),M=e("code",null,"2+",-1),B={style:{"text-align":"left"}},R=e("td",{style:{"text-align":"center"}},"2517",-1),T={style:{"text-align":"left"}},z={href:"https://leetcode.com/problems/maximum-tastiness-of-candy-basket",target:"_blank",rel:"noopener noreferrer"},O=e("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},F=e("code",null,"贪心",-1),H=e("code",null,"数组",-1),S=e("code",null,"二分查找",-1),Y=e("code",null,"1+",-1),D={style:{"text-align":"left"}},G=e("td",{style:{"text-align":"center"}},"2560",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/house-robber-iv",target:"_blank",rel:"noopener noreferrer"},P=e("td",{style:{"text-align":"center"}},null,-1),Q={style:{"text-align":"left"}},U=e("code",null,"数组",-1),W=e("code",null,"二分查找",-1),X={style:{"text-align":"left"}};function Z($,ee){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),d("div",null,[e("h1",_,[k,t(),e("a",m,[t("11. 盛最多水的容器"),n(o)])]),e("p",null,[t("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:s(()=>[g]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[f]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[b]),_:1}),t("  🔗 "),e("a",v,[x,n(o)])]),y,r(" prettier-ignore "),e("table",null,[w,e("tbody",null,[e("tr",null,[j,e("td",E,[e("a",I,[t("接雨水"),n(o)])]),e("td",N,[n(a,{to:"/leetcode-js/problem/0042.html"},{default:s(()=>[t("[✓]")]),_:1})]),e("td",V,[n(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:s(()=>[q]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[C]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[L]),_:1}),t(),M]),e("td",B,[n(l,{color:"#ff334b"},{default:s(()=>[t("Hard")]),_:1})])]),e("tr",null,[R,e("td",T,[e("a",z,[t("礼盒的最大甜蜜度"),n(o)])]),O,e("td",A,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:s(()=>[F]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[H]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[S]),_:1}),t(),Y]),e("td",D,[n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])]),e("tr",null,[G,e("td",J,[e("a",K,[t("打家劫舍 IV"),n(o)])]),P,e("td",Q,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[U]),_:1}),t(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[W]),_:1})]),e("td",X,[n(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])])])])])}const ne=i(h,[["render",Z],["__file","0011.html.vue"]]);export{ne as default};
