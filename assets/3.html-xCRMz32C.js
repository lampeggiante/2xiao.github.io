import{_ as r}from"./react-3-LIJpDU1r.js";import{_ as u,r as p,o as k,c as d,a as n,b as s,d as o,w as a,e as l}from"./app-qrCIIj1V.js";const m="/assets/react-2-K82y7SOy.png",b="/assets/react-8-fahbHSk6.png",v={},g=n("h1",{id:"_3-实现-reconciler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-实现-reconciler","aria-hidden":"true"},"#"),s(" 3. 实现 Reconciler")],-1),y={class:"hint-container info"},w=n("p",{class:"hint-container-title"},"摘要",-1),f=n("ul",null,[n("li",null,"Reconciler 简介"),n("li",null,"实现 FiberNode"),n("li",null,"实现 Reconciler 工作流程")],-1),h={href:"https://github.com/2xiao/my-react/tree/v1.3",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"git tag v1.3",-1),F=l('<h2 id="_1-reconciler-简介" tabindex="-1"><a class="header-anchor" href="#_1-reconciler-简介" aria-hidden="true">#</a> 1. Reconciler 简介</h2><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在前端框架出现之前，通常会使用 jQuery 这样的库来开发页面。jQuery 是一个过程驱动的库，开发者需要直接调用浏览器的宿主环境 API，例如 DOM 操作等。这意味着开发者需要手动管理页面状态和交互，通过执行一系列的操作来更新页面。</p><p>然而，随着前端框架的出现，工作方式发生了根本性的变化，从过程驱动转变为状态驱动。在状态驱动的模式下，开发者不再直接操作宿主环境 API，而是通过前端框架提供的运行时核心模块来管理页面状态和更新。这些核心模块，例如 React 中的 <code>Reconciler</code> 和 Vue 中的 <code>Renderer</code>，负责将开发者编写的代码翻译成对应的宿主环境 API 调用，以更新页面。</p><p><code>Reconciler</code> 的中文名叫协调器，它负责处理 React 元素的更新并在内部构建虚拟 DOM，这个过程是 React 框架实现高效的 UI 渲染和更新的核心逻辑所在。以下是 <code>Reconciler</code> 主要做的事情：</p><ol><li><strong>接收并解析 React 元素：</strong> Reconciler 接收 JSX 或者 createElement 函数返回的 React 元素，并将其解析成虚拟 DOM 树的结构。</li><li><strong>协调更新：</strong> 比较新旧虚拟 DOM 树的差异，确定哪些部分需要更新，并生成更新计划。</li><li><strong>构建虚拟 DOM 树：</strong> 在组件更新时，根据生成的更新计划，Reconciler 会更新虚拟 DOM 树的结构以反映最新的组件状态。</li><li><strong>生成 DOM 更新指令：</strong> 将更新后的虚拟 DOM 树转换为真实的 DOM 更新指令，描述了如何将变更应用到实际的 DOM 树上。</li></ol><p>我们先在 <code>packages</code> 目录下新建一个 <code>react-reconciler</code> 文件夹，执行 <code>npm init</code>，并更改配置文件如下，执行 <code>pnpm i</code> 安装依赖。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// packages/react-reconciler/package.json</span>
<span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-reconciler&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react reconciler&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.ts&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;shared&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace: *&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-实现-fibernode" tabindex="-1"><a class="header-anchor" href="#_2-实现-fibernode" aria-hidden="true">#</a> 2. 实现 FiberNode</h2><p><code>FiberNode</code>（纤维节点）是 <code>Reconciler</code> 的核心数据结构之一，用于构建协调树。<code>Reconciler</code> 使用 <code>FiberNode</code> 来表示 React 元素树中的节点，并通过比较 Fiber 树的差异，找出需要进行更新的部分，生成更新指令，来实现 UI 的渲染和更新。</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每个 <code>FiberNode</code> 都表示着 React 元素树中的一个节点，它包含了以下几个重要的字段：</p><ul><li><strong>type</strong>：节点的类型，可以是原生 DOM 元素、函数组件或类组件等；</li><li><strong>props</strong>：节点的属性，包括 DOM 元素的属性、函数组件的 props 等；</li><li><strong>stateNode</strong>：节点对应的实际 DOM 节点或组件实例；</li><li><strong>child</strong>：指向节点的第一个子节点；</li><li><strong>sibling</strong>：指向节点的下一个兄弟节点；</li><li><strong>return</strong>：指向节点的父节点；</li><li><strong>alternate</strong>：指向节点的备份节点，用于在协调过程中进行比较；</li><li><strong>effectTag</strong>：表示节点的副作用类型，如更新、插入、删除等；</li><li><strong>pendingProps</strong>：表示节点的新属性，用于在协调过程中进行更新。</li></ul><p>接下来我们来实现一下 <code>FiberNode</code> 这个数据结构。</p><p>在 <code>packages/react-reconciler/src/</code> 目录下新建 <code>fiber.ts</code> 文件，用来实现 <code>FiberNode</code> 类；新建 <code>workTags.ts</code> 文件，用于标识不同类型的工作单元；新建 <code>fiberFlags.ts</code> 文件，用于标识不同类型的副作用；代码如下：</p>',15),x=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/fiber.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Props"),n("span",{class:"token punctuation"},","),s(" Key"),n("span",{class:"token punctuation"},","),s(" Ref "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'shared/ReactTypes'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" WorkTag "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./workTags'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" NoFlags"),n("span",{class:"token punctuation"},","),s(" Flags "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./fiberFlags'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"FiberNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
	tag`),n("span",{class:"token operator"},":"),s(" WorkTag"),n("span",{class:"token punctuation"},";"),s(`
	key`),n("span",{class:"token operator"},":"),s(" Key"),n("span",{class:"token punctuation"},";"),s(`
	stateNode`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},";"),s(`
	type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	sibling`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	child`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	index`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
	ref`),n("span",{class:"token operator"},":"),s(" Ref"),n("span",{class:"token punctuation"},";"),s(`
	pendingProps`),n("span",{class:"token operator"},":"),s(" Props"),n("span",{class:"token punctuation"},";"),s(`
	memoizedProps`),n("span",{class:"token operator"},":"),s(" Props "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	memoizedState`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},";"),s(`
	alternate`),n("span",{class:"token operator"},":"),s(" FiberNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	flags`),n("span",{class:"token operator"},":"),s(" Flags"),n("span",{class:"token punctuation"},";"),s(`
	subtreeFlags`),n("span",{class:"token operator"},":"),s(" Flags"),n("span",{class:"token punctuation"},";"),s(`
	updateQueue`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"unknown"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),s("tag"),n("span",{class:"token operator"},":"),s(" WorkTag"),n("span",{class:"token punctuation"},","),s(" pendingProps"),n("span",{class:"token operator"},":"),s(" Props"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token operator"},":"),s(" Key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// 类型"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tag "),n("span",{class:"token operator"},"="),s(" tag"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"="),s(" key"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("ref "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("stateNode "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 节点对应的实际 DOM 节点或组件实例"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 节点的类型，可以是原生 DOM 元素、函数组件或类组件等"),s(`

		`),n("span",{class:"token comment"},"// 构成树状结构"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("return "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 指向节点的父节点"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("sibling "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 指向节点的下一个兄弟节点"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("child "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 指向节点的第一个子节点"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("index "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 索引"),s(`

		`),n("span",{class:"token comment"},"// 作为工作单元"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("pendingProps "),n("span",{class:"token operator"},"="),s(" pendingProps"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 表示节点的新属性，用于在协调过程中进行更新"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("memoizedProps "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 已经更新完的属性"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("memoizedState "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 更新完成后新的 State"),s(`

		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("alternate "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 指向节点的备份节点，用于在协调过程中进行比较"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("flags "),n("span",{class:"token operator"},"="),s(" NoFlags"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 表示节点的副作用类型，如更新、插入、删除等"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("subtreeFlags "),n("span",{class:"token operator"},"="),s(" NoFlags"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 表示子节点的副作用类型，如更新、插入、删除等"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("updateQueue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 更新计划队列"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/workTags.ts"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"WorkTag"),s(),n("span",{class:"token operator"},"="),s(`
	`),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"typeof"),s(` FunctionComponent
	`),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"typeof"),s(` HostRoot
	`),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"typeof"),s(` HostComponent
	`),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"typeof"),s(" HostText"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" FunctionComponent "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" HostRoot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" HostComponent "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" HostText "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// packages/react-reconciler/src/fiberFlags.ts"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Flags"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" NoFlags "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0b0000000"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" PerformedWork "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0b0000001"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" Placement "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0b0000010"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" Update "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0b0000100"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" ChildDeletion "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0b0001000"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=l('<h2 id="_3-实现-reconciler-工作流程" tabindex="-1"><a class="header-anchor" href="#_3-实现-reconciler-工作流程" aria-hidden="true">#</a> 3. 实现 Reconciler 工作流程</h2><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>Reconciler</code> 的工作流程总的来说就是对 Fiber 树进行一次 <strong>深度优先遍历（DFS）</strong> ，首先访问根节点，然后依次访问左子树和右子树，通过比较新节点（新生成的 <code>React Element</code>）和旧节点（现有的 <code>FiberNode</code>），生成更新计划，并打上不同的标记。</p><ol><li><p><strong>遍历 Fiber 树：</strong> React 使用深度优先搜索（DFS）算法来遍历 Fiber 树，首先会从 Fiber 树的根节点开始进行遍历，遍历整个组件树的结构。</p></li><li><p><strong>比较新旧节点：</strong> 对于每个 Fiber 节点，<code>Reconciler</code> 会比较新节点（即新的 <code>React Element</code>）和旧节点（即现有的 <code>FiberNode</code>）之间的差异，比较的内容包括节点类型、属性、子节点等方面的差异。</p></li><li><p><strong>生成更新计划：</strong> 根据比较的结果，<code>Reconciler</code> 会生成一个更新计划，用于确定需要进行的操作，更新计划通常包括哪些节点需要更新、哪些节点需要插入到 DOM 中、哪些节点需要删除等信息。</p></li><li><p><strong>打标记（Tagging）：</strong> 为了记录不同节点的操作，React 会为每个节点打上不同的标记。例如，如果节点需要更新，可能会打上更新标记（Update Tag）；如果节点是新创建的，可能会打上插入标记（Placement Tag）；如果节点被移除，可能会打上删除标记（Deletion Tag）等。</p></li><li><p><strong>更新 Fiber 节点：</strong> 根据生成的更新计划和标记，<code>Reconciler</code> 会更新对应的 Fiber 节点以反映组件的最新状态。更新操作可能包括更新节点的状态、更新节点的属性、调用生命周期方法等。</p></li><li><p><strong>递归处理子节点：</strong> 对于每个节点的子节点，React 会递归地重复进行上述的比较和更新操作，以确保整个组件树都得到了正确的处理。</p></li></ol><p>当所有 React Element 都比较完成之后，会生成一棵新的 Fiber 树，此时，一共存在两棵 Fiber 树：</p><ul><li><strong>current</strong>: 与视图中真实 UI 对应的 Fiber 树，当 React 开始新的一轮渲染时，会使用 <code>current</code> 作为参考来比较新的树与旧树的差异，决定如何更新 UI；</li><li><strong>workInProgress</strong>: 触发更新后，正在 Reconciler 中计算的 Fiber 树，一旦 <code>workInProgress</code> 上的更新完成，它将会被提交为新的<code>current</code>，成为下一次渲染的参考树，并清空旧的 <code>current</code> 树。</li></ul><p>下面我们来实现一下 <code>Reconciler</code> 的完整工作流程。</p><p>在 <code>packages/react-reconciler/src/</code> 目录下新建 <code>workLoop.ts</code> 文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/workLoop.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FiberNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fiber&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> workInProgress<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">renderRoot</span><span class="token punctuation">(</span>root<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">prepareFreshStack</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">do</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;workLoop发生错误：&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
			workInProgress <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化 workInProgress 变量</span>
<span class="token keyword">function</span> <span class="token function">prepareFreshStack</span><span class="token punctuation">(</span>root<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	workInProgress <span class="token operator">=</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 深度优先遍历，向下递归子节点</span>
<span class="token keyword">function</span> <span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 比较并返回子 FiberNode</span>
	<span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	fiber<span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> fiber<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 没有子节点，则遍历兄弟节点或父节点</span>
		<span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 有子节点，继续向下深度遍历</span>
		workInProgress <span class="token operator">=</span> next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 深度优先遍历，向下递归子节点</span>
<span class="token keyword">function</span> <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> node<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> fiber<span class="token punctuation">;</span>
	<span class="token keyword">do</span> <span class="token punctuation">{</span>
		<span class="token comment">// 生成更新计划</span>
		<span class="token function">completeWork</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 有兄弟节点，则遍历兄弟节点</span>
		<span class="token keyword">const</span> sibling <span class="token operator">=</span> node<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sibling <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			workInProgress <span class="token operator">=</span> sibling<span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 否则向上返回，遍历父节点</span>
		node <span class="token operator">=</span> node<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
		<span class="token comment">// workInProgress 最终指向根节点</span>
		workInProgress <span class="token operator">=</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>至此，我们就完成了 <code>Reconciler</code> 的大致工作流程，下一节将深入实现 <code>Reconciler</code> 的更新机制。</p>`,11),P=n("code",null,"git tag v1.3",-1),I={href:"https://github.com/2xiao/my-react/tree/v1.3",target:"_blank",rel:"noopener noreferrer"};function O(D,T){const c=p("ExternalLinkIcon"),i=p("CodeTabs");return k(),d("div",null,[g,n("div",y,[w,f,n("p",null,[s("相关代码可在 "),n("a",h,[_,o(c)]),s(" 查看")])]),F,o(i,{id:"131",data:[{id:"fiber.ts"},{id:"workTags.ts"},{id:"fiberFlags.ts"}]},{title0:a(({value:e,isActive:t})=>[s("fiber.ts")]),title1:a(({value:e,isActive:t})=>[s("workTags.ts")]),title2:a(({value:e,isActive:t})=>[s("fiberFlags.ts")]),tab0:a(({value:e,isActive:t})=>[x]),tab1:a(({value:e,isActive:t})=>[R]),tab2:a(({value:e,isActive:t})=>[q]),_:1},8,["data"]),N,n("p",null,[s("相关代码可在 "),P,s(" 查看，地址："),n("a",I,[s("https://github.com/2xiao/my-react/tree/v1.3"),o(c)])])])}const W=u(v,[["render",O],["__file","3.html.vue"]]);export{W as default};
