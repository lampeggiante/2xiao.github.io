import{_ as c,r as p,o as i,c as u,a as n,b as s,d as t,w as e,f as r,e as d}from"./app-mvY9N9Pc.js";const k={},_={id:"_15-三数之和",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_15-三数之和","aria-hidden":"true"},"#",-1),h={href:"https://leetcode.com/problems/3sum",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"数组",-1),b=n("code",null,"双指针",-1),g=n("code",null,"排序",-1),v={href:"https://leetcode.com/problems/3sum",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [-1,0,1,2,-1,-4]</p><p>Output: [[-1,-1,2],[-1,0,1]]</p><p>Explanation:</p><p>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.</p><p>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.</p><p>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.</p><p>The distinct triplets are [-1,0,1] and [-1,-1,2].</p><p>Notice that the order of the output and the order of the triplets does not matter.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1,1]</p><p>Output: []</p><p>Explanation: The only possible triplet does not sum up to 0.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [0,0,0]</p><p>Output: [[0,0,0]]</p><p>Explanation: The only possible triplet sums up to 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个数组，要求在这个数组中找出 3 个数之和为 0 的所有组合。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li><p>这一题比较麻烦的一点在于，最后输出解的时候，要求输出不重复的解。</p></li><li><p>数组中同一个数字可能出现多次，同一个数字也可能使用多次，但是最后输出解的时候，不能重复。例如 [-1, -1, 2] 和 [2, -1, -1]、[-1, 2, -1] 这 3 个解是重复的。</p></li><li><p>这就需要排序和去重，使用对撞指针寻找三数之和为 0 的组合。</p></li><li><p>先对数组进行排序，i 从后往前扫描，这里同样需要注意数组中存在多个重复数字的问题。i 在循环的时候和后一个数进行比较，如果相等，i 继续往前移，直到移到下一个和前一个数字不同的位置。</p></li><li><p>j，k 两个指针开始一前一后对撞。j 从数组首位开始，k 为 i 的前一个数字，由于经过排序，所以 j &lt; k。对比三个数的和与 target 的大小，小于 target，j 往后移动；大于 target，k 往前移动，寻找三数之和为 target 的组合，移动指针时注意去重。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 排除 i 重复的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> sum <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 排除 j 重复的情况</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 排除 k 重复的情况</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            k<span class="token operator">--</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          j<span class="token operator">++</span><span class="token punctuation">;</span>
          k<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          k<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),j=n("td",{style:{"text-align":"center"}},"1",-1),E={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},q={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0001",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"left"}},L=n("code",null,"数组",-1),M=n("code",null,"哈希表",-1),V={style:{"text-align":"left"}},T=n("td",{style:{"text-align":"center"}},"16",-1),B={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},S={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0016",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"left"}},z=n("code",null,"数组",-1),A=n("code",null,"双指针",-1),D=n("code",null,"排序",-1),F={style:{"text-align":"left"}},H=n("td",{style:{"text-align":"center"}},"18",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/4sum",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"center"}},Q={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0018",target:"_blank",rel:"noopener noreferrer"},U={style:{"text-align":"left"}},W=n("code",null,"数组",-1),X=n("code",null,"双指针",-1),Y=n("code",null,"排序",-1),Z={style:{"text-align":"left"}},$=n("td",{style:{"text-align":"center"}},"259",-1),nn={style:{"text-align":"left"}},tn={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},sn={style:{"text-align":"center"}},en={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0259",target:"_blank",rel:"noopener noreferrer"},an={style:{"text-align":"left"}},on=n("code",null,"数组",-1),ln=n("code",null,"双指针",-1),pn=n("code",null,"二分查找",-1),cn=n("code",null,"1+",-1),un={style:{"text-align":"left"}},rn=n("td",{style:{"text-align":"center"}},"2367",-1),dn={style:{"text-align":"left"}},kn={href:"https://leetcode.com/problems/number-of-arithmetic-triplets",target:"_blank",rel:"noopener noreferrer"},_n=n("td",{style:{"text-align":"center"}},null,-1),mn={style:{"text-align":"left"}},hn=n("code",null,"数组",-1),fn=n("code",null,"哈希表",-1),bn=n("code",null,"双指针",-1),gn=n("code",null,"1+",-1),vn={style:{"text-align":"left"}},yn=n("td",{style:{"text-align":"center"}},"2908",-1),xn={style:{"text-align":"left"}},wn={href:"https://leetcode.com/problems/minimum-sum-of-mountain-triplets-i",target:"_blank",rel:"noopener noreferrer"},jn=n("td",{style:{"text-align":"center"}},null,-1),En={style:{"text-align":"left"}},In=n("code",null,"数组",-1),Nn={style:{"text-align":"left"}},qn=n("td",{style:{"text-align":"center"}},"2909",-1),Cn={style:{"text-align":"left"}},Ln={href:"https://leetcode.com/problems/minimum-sum-of-mountain-triplets-ii",target:"_blank",rel:"noopener noreferrer"},Mn=n("td",{style:{"text-align":"center"}},null,-1),Vn={style:{"text-align":"left"}},Tn=n("code",null,"数组",-1),Bn={style:{"text-align":"left"}};function On(Rn,Sn){const o=p("ExternalLinkIcon"),l=p("font"),a=p("RouterLink");return i(),u("div",null,[n("h1",_,[m,s(),n("a",h,[s("15. 三数之和"),t(o)])]),n("p",null,[s("🟠 "),t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[f]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[b]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sorting.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",v,[y,t(o)])]),x,r(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[j,n("td",E,[n("a",I,[s("两数之和"),t(o)])]),n("td",N,[n("a",q,[s("[✓]"),t(o)])]),n("td",C,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[L]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[M]),_:1})]),n("td",V,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[T,n("td",B,[n("a",O,[s("最接近的三数之和"),t(o)])]),n("td",R,[n("a",S,[s("[✓]"),t(o)])]),n("td",G,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[z]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[A]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sorting.html"},{default:e(()=>[D]),_:1})]),n("td",F,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[H,n("td",J,[n("a",K,[s("四数之和"),t(o)])]),n("td",P,[n("a",Q,[s("[✓]"),t(o)])]),n("td",U,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[W]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[X]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/sorting.html"},{default:e(()=>[Y]),_:1})]),n("td",Z,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[$,n("td",nn,[n("a",tn,[s("较小的三数之和"),t(o)])]),n("td",sn,[n("a",en,[s("[✓]"),t(o)])]),n("td",an,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[on]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[ln]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[pn]),_:1}),s(),cn]),n("td",un,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[rn,n("td",dn,[n("a",kn,[s("等差三元组的数目"),t(o)])]),_n,n("td",mn,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[hn]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:e(()=>[fn]),_:1}),s(),t(a,{to:"/leetcode/outline/tag/two-pointers.html"},{default:e(()=>[bn]),_:1}),s(),gn]),n("td",vn,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[yn,n("td",xn,[n("a",wn,[s("元素和最小的山形三元组 I"),t(o)])]),jn,n("td",En,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[In]),_:1})]),n("td",Nn,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[qn,n("td",Cn,[n("a",Ln,[s("元素和最小的山形三元组 II"),t(o)])]),Mn,n("td",Vn,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[Tn]),_:1})]),n("td",Bn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const zn=c(k,[["render",On],["__file","0015.html.vue"]]);export{zn as default};
