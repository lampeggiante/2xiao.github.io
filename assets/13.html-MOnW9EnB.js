import{_ as u,r as i,o as r,c as d,a as n,b as s,d as p,w as a,e as c}from"./app-ClmBq6Dp.js";const k={},v=n("h1",{id:"_13-实现-fragment",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_13-实现-fragment","aria-hidden":"true"},"#"),s(" 13. 实现 Fragment")],-1),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"摘要",-1),g=n("ul",null,[n("li",null,"Diff 算法支持 Fragment"),n("li",null,"处理 Reconciliation 阶段"),n("li",null,"处理 Commit 阶段"),n("li",null,"处理 React 导出")],-1),h={href:"https://github.com/2xiao/my-react/tree/v1.13",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"git tag v1.13",-1),f=n("p",null,"Fragment 是一种特殊的组件，用于在不引入额外 DOM 元素的情况下，包裹多个子元素。使用 Fragment 可以让组件结构更加清晰，而不引入不必要的父级 DOM 节点，以免影响页面布局和性能。",-1),w=n("h2",{id:"_1-diff-算法支持-fragment",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-diff-算法支持-fragment","aria-hidden":"true"},"#"),s(" 1. Diff 算法支持 Fragment")],-1),F=n("p",null,"上一节我们实现了单节点和多节点的 Diff 算法，现在我们就来处理节点为 Fragment 和嵌套数组的情况，主要分为以下三种情况：",-1),x=n("ul",null,[n("li",null,"Fragment 包裹其他组件"),n("li",null,"Fragment 与其他组件同级"),n("li",null,"数组形式的 Fragment")],-1),_=n("h3",{id:"_1-fragment-包裹其他组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-fragment-包裹其他组件","aria-hidden":"true"},"#"),s(" 1. Fragment 包裹其他组件")],-1),C=n("div",{class:"language-jsx line-numbers-mode","data-ext":"jsx"},[n("pre",{class:"language-jsx"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" element "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s(`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-jsx line-numbers-mode","data-ext":"jsx"},[n("pre",{class:"language-jsx"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(" element "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"jsxs"),n("span",{class:"token punctuation"},"("),s("Fragment"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
    children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"div"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"1"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"div"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"2"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=c(`<p>其中，<code>&lt;&gt;&lt;/&gt;</code> 是 Fragment 的简写，完整的写法是 <code>&lt;React.Fragment&gt;</code>。可以看到，在上面的例子中，<code>element</code> 是一个 <code>type</code> 为 Fragment 的 <code>ReactElement</code>，因此，在 Diff 算法中，需要考虑单一节点为 Fragment 的情况。</p><p>先在 <code>ReactSymbols.ts</code> 文件中定义一下 <code>REACT_FRAGMENT_TYPE</code>，表示 Fragment 组件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/shared/ReactSymbols.ts</span>
<span class="token comment">// 表示 Fragment 组件，即 &lt;React.Fragment&gt; 或短语法 &lt;&gt;&lt;/&gt; 创建的 Fragment</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token operator">=</span> supportSymbol
	<span class="token operator">?</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;react.fragment&#39;</span><span class="token punctuation">)</span>
	<span class="token operator">:</span> <span class="token number">0xeacb</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 <code>reconcileChildFibers</code> 函数中增加对顶层无 key 的 Fragment 情况的处理，以下是代码的主要逻辑：</p><ol><li><p><strong>判断是否为顶层的无 key 的 Fragment：</strong></p><ul><li>如果 <code>newChild</code> 是对象，且不为 <code>null</code>，且为顶层的 Fragment，且其 key 为 <code>null</code>，则为顶层的无 key 的 Fragment；</li><li>处理方法是将 <code>newChild</code> 重新赋值为 Fragment 的 <code>props.children</code>；</li></ul></li><li><p><strong>判断当前 Fiber 的类型：</strong></p><ul><li>如果 <code>newChild</code> 是 ReactElement 节点，则进一步判断其类型； <ul><li>如果 <code>newChild</code> 是数组，说明存在多个子节点，调用 <code>reconcileChildrenArray</code> 处理多节点的 Diff 逻辑。</li><li>如果 <code>newChild</code> 是单个 React 元素节点，调用 <code>reconcileSingleElement</code> 处理单节点的 Diff 逻辑。</li></ul></li><li>如果 <code>newChild</code> 是文本节点，则保持原逻辑，不用修改；</li></ul></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	currentFiber<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	newChild<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 判断 Fragment</span>
	<span class="token keyword">const</span> isUnkeyedTopLevelFragment <span class="token operator">=</span>
		<span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
		newChild <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
		newChild<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token operator">&amp;&amp;</span>
		newChild<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>isUnkeyedTopLevelFragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		newChild <span class="token operator">=</span> newChild<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 判断当前 fiber 的类型</span>
	<span class="token comment">// ReactElement 节点</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChild <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> newChild <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 处理多个 ReactElement 节点的情况</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFiber<span class="token punctuation">,</span> newChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 处理单个 ReactElement 节点的情况</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>newChild<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span>
				<span class="token keyword">return</span> <span class="token function">placeSingleChild</span><span class="token punctuation">(</span>
					<span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFiber<span class="token punctuation">,</span> newChild<span class="token punctuation">)</span>
				<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">default</span><span class="token operator">:</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;未实现的 reconcile 类型&#39;</span><span class="token punctuation">,</span> newChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-fragment-与其他组件同级" tabindex="-1"><a class="header-anchor" href="#_2-fragment-与其他组件同级" aria-hidden="true">#</a> 2. Fragment 与其他组件同级</h3>`,7),D=n("div",{class:"language-jsx line-numbers-mode","data-ext":"jsx"},[n("pre",{class:"language-jsx"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" element "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s(`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("ul")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
			`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
			`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-jsx line-numbers-mode","data-ext":"jsx"},[n("pre",{class:"language-jsx"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("ul")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(" element "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"jsxs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"ul"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
    children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        `),n("span",{class:"token function"},"jsxs"),n("span",{class:"token punctuation"},"("),s("Fragment"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
            children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
                `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"1"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"2"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"3"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"4"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=c(`<p>这种情况中，若 <code>newChild.children</code> 为单个 Fragment 节点，则需要进入 <code>reconcileSingleElement</code> 方法进行处理；若 <code>newChild.children</code> 为数组类型，数组中的某一项为 Fragment，与其他组件同级，则需要进入 <code>reconcileChildrenArray</code> 方法进行处理。</p><p>我们先在 <code>reconcileSingleElement</code> 函数中增加对 Fragment 组件的处理：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token comment">// 处理单个 Element 节点的情况</span>
<span class="token comment">// 对比 currentFiber 与 ReactElement，生成 workInProgress FiberNode</span>
<span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	currentFiber<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	element<span class="token operator">:</span> ReactElementType
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 组件的更新阶段</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>currentFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>key <span class="token operator">===</span> element<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>type <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">// key 和 type 都相同，当前节点可以复用旧的 Fiber 节点</span>
					<span class="token comment">// 处理 Fragment 的情况</span>
					<span class="token keyword">let</span> props<span class="token operator">:</span> Props <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">REACT_FRAGMENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						props <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>

					<span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>currentFiber<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
					existing<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
					<span class="token comment">// 剩下的兄弟节点标记删除</span>
					<span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span> existing<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
    <span class="token comment">// ...</span>

	<span class="token comment">// 创建新的 Fiber 节点</span>
	<span class="token keyword">let</span> fiber<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">REACT_FRAGMENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fiber <span class="token operator">=</span> <span class="token function">createFiberFromFragment</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> element<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fiber <span class="token operator">=</span> <span class="token function">createFiberFromElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	fiber<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
	<span class="token keyword">return</span> fiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果可以复用旧的 Fiber 节点，对于 Fragment 类型的节点来说，需要将 <code>element.props.children</code> 作为 <code>props</code> 参数传给旧节点；</p><p>如果不能复用，对于 Fragment 类型的节点来说，则需要调用 <code>createFiberFromFragment</code> 函数，来创建新的 Fragment 类型的 Fiber 节点：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiber.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberFromFragment</span><span class="token punctuation">(</span>elements<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">:</span> Key<span class="token punctuation">)</span><span class="token operator">:</span> FiberNode <span class="token punctuation">{</span>
	<span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span>Fragment<span class="token punctuation">,</span> elements<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> fiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里要注意，我们在判断节点类型时，用到了 <code>$$typeof</code> 属性和 <code>type</code> 属性两个属性，这两个属性在 React 中有不同的含义：</p><ul><li><p><strong><code>$$typeof</code> 属性：</strong></p><p><code>$$typeof</code> 属性是 React 内部用于标识元素类型的一个特殊属性。它通常用于区分不同类型的 React 元素，例如普通的 React 元素和 Fragment 元素。例如，<code>$$typeof</code> 的值为 <code>Symbol.for(&#39;react.element&#39;)</code> 表示一个普通的 React 元素，而值为 <code>Symbol.for(&#39;react.fragment&#39;)</code> 表示一个 Fragment 元素。</p></li><li><p><strong><code>type</code> 属性：</strong></p><p><code>type</code> 属性表示 React 元素的类型。对于普通的 React 组件元素，<code>type</code> 是组件函数或类；对于 DOM 元素，<code>type</code> 是字符串（例如，<code>div</code>、<code>span</code>）；对于 Fragment 元素，<code>type</code> 是特殊的 Fragment 标识。</p></li></ul><p>以下是一个简单的例子，演示了 <code>$$typeof</code> 和 <code>type</code> 属性的不同：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyFragment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Fragment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出组件函数或类</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Symbol.for(&#39;react.element&#39;)</span>

<span class="token keyword">const</span> fragmentElement <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyFragment</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fragmentElement<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Symbol.for(&#39;react.fragment&#39;)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fragmentElement<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Symbol.for(&#39;react.element&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>接着我们来处理多节点 Diff 的情况，<code>reconcileChildrenArray</code> 方法调用了 <code>updateFromMap</code> 函数来遍历 <code>newChild</code> 数组，判断是否可复用，我们需要在其中增加逻辑，判断是否复用或者新建 Fragment：</p><p>如果 <code>element.type === REACT_FRAGMENT_TYPE</code>，当前节点为 Fragment 类型，调用 <code>updateFragment</code> 函数，判断旧节点中是否有 Fragment 类型的节点，若没有就新建一个 Fragment 节点，有的话就直接复用旧节点。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token keyword">function</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	existingChildren<span class="token operator">:</span> ExistingChildren<span class="token punctuation">,</span>
	index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	element<span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> keyToUse <span class="token operator">=</span> element<span class="token punctuation">.</span>key <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> element<span class="token punctuation">.</span>key <span class="token operator">:</span> index<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> before <span class="token operator">=</span> existingChildren<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// ReactElement</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> element <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">REACT_FRAGMENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>
						returnFiber<span class="token punctuation">,</span>
						before<span class="token punctuation">,</span>
						element<span class="token punctuation">,</span>
						keyToUse<span class="token punctuation">,</span>
						existingChildren
					<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 复用或新建 Fragment</span>
<span class="token keyword">function</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	current<span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	elements<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	key<span class="token operator">:</span> Key<span class="token punctuation">,</span>
	existingChildren<span class="token operator">:</span> ExistingChildren
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> fiber<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current <span class="token operator">||</span> current<span class="token punctuation">.</span>tag <span class="token operator">!==</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fiber <span class="token operator">=</span> <span class="token function">createFiberFromFragment</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		existingChildren<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fiber <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	fiber<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
	<span class="token keyword">return</span> fiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数组形式的-fragment" tabindex="-1"><a class="header-anchor" href="#_3-数组形式的-fragment" aria-hidden="true">#</a> 3. 数组形式的 Fragment</h3>`,11),M=n("div",{class:"language-jsx line-numbers-mode","data-ext":"jsx"},[n("pre",{class:"language-jsx"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" element "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s(`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("ul")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token punctuation"},"{"),s("arr"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
		`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-jsx line-numbers-mode","data-ext":"jsx"},[n("pre",{class:"language-jsx"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("ul")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"1"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"2"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"3"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
	`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"4"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("li")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("ul")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"1"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"2"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token keyword"},"var"),s(" element "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"jsxs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"ul"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
    children`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        arr`),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"3"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"jsx"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"li"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"4"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=c(`<p>这种情况中，<code>newChild.children</code> 是一个数组，数组中的某一项也是一个数组。由于<code>newChild.children</code> 是数组，所以会进入 <code>reconcileChildrenArray</code> 函数进行处理，因此我们需要在其中增加数组类型的判断，看是否可以复用 Fragment 类型的 Fiber 节点，逻辑和上面一样：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/childFiber.ts</span>
<span class="token keyword">function</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span>
	returnFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	existingChildren<span class="token operator">:</span> ExistingChildren<span class="token punctuation">,</span>
	index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	element<span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FiberNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> keyToUse <span class="token operator">=</span> element<span class="token punctuation">.</span>key <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> element<span class="token punctuation">.</span>key <span class="token operator">:</span> index<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> before <span class="token operator">=</span> existingChildren<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>

	<span class="token comment">// 数组类型的 ReactElement，如：&lt;ul&gt;{[&lt;li/&gt;, &lt;li/&gt;]}&lt;/ul&gt;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>
			returnFiber<span class="token punctuation">,</span>
			before<span class="token punctuation">,</span>
			element<span class="token punctuation">,</span>
			keyToUse<span class="token punctuation">,</span>
			existingChildren
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-处理-reconciliation-阶段" tabindex="-1"><a class="header-anchor" href="#_2-处理-reconciliation-阶段" aria-hidden="true">#</a> 2. 处理 Reconciliation 阶段</h2><p>为了将 Fragment 类型的节点加入到 Reconciliation 阶段的更新和 Diff 流程中，我们需要在 <code>beginWork</code> 和 <code>completeWork</code> 两个函数加入对 Fragment 类型节点的处理逻辑。</p><h3 id="_1-处理-beginwork" tabindex="-1"><a class="header-anchor" href="#_1-处理-beginwork" aria-hidden="true">#</a> 1. 处理 beginWork</h3><p>在 <code>beginWork</code> 函数中，我们需要增加对 Fragment 类型节点的处理：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/beginWork.ts</span>
<span class="token comment">// 比较并返回子 FiberNode</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">beginWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
		<span class="token keyword">case</span> Fragment<span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> nextChildren <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
	<span class="token function">reconcileChildren</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-处理-completework" tabindex="-1"><a class="header-anchor" href="#_2-处理-completework" aria-hidden="true">#</a> 2. 处理 completeWork</h3><p>在 <code>completeWork</code> 函数中，我们也需要增加对 Fragment 类型节点的处理，向上冒泡收集到的更新 flags:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/completeWork.ts</span>
<span class="token comment">// 生成更新计划，计算和收集更新 flags</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">completeWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> HostRoot<span class="token operator">:</span>
		<span class="token keyword">case</span> FunctionComponent<span class="token operator">:</span>
		<span class="token keyword">case</span> Fragment<span class="token operator">:</span>
			<span class="token function">bubbleProperties</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-处理-commit-阶段" tabindex="-1"><a class="header-anchor" href="#_3-处理-commit-阶段" aria-hidden="true">#</a> 3. 处理 Commit 阶段</h2><p>增加了 Fragment 组件之后，在 Commit 阶段也需要做一些边界情况处理。例如删除节点时，需要考虑到 Fragment 组件可能会包含多个子节点，因此在删除节点时需要遍历处理其子节点。</p><p><code>commitDeletion</code> 函数负责在协调过程中删除 Fiber 节点及其关联子树的操作，下面我们就来改造 <code>commitDeletion</code> 函数：</p><ul><li><p><strong>初始化：</strong></p><ul><li>函数接受一个名为 <code>childToDelete</code> 的参数，表示要删除的子树的根节点。</li><li>初始化一个数组 <code>rootChildrenToDelete</code> 用于跟踪需要移除的子树中的 Fiber 节点。</li></ul></li><li><p><strong>递归遍历：</strong></p><ul><li>调用 <code>commitNestedUnmounts</code> 函数，深度优先遍历 Fiber 树，执行 <code>onCommitUnmount</code>。</li><li>在 <code>commitNestedUnmounts</code> 的回调函数中，调用 <code>recordChildrenToDelete</code> 函数，遍历所有兄弟节点，记录待删除的节点。</li></ul></li><li><p><strong>遍历删除：</strong></p><ul><li>遍历 <code>rootChildrenToDelete</code>，找到待删除子树的根节点的父级 DOM（<code>hostParent</code>），并通过 <code>removeChild</code> 移除每个节点的 DOM。</li></ul></li><li><p><strong>清理关联：</strong></p><ul><li>将 <code>childToDelete</code> 的 <code>return</code> 和 <code>child</code> 属性置为 <code>null</code>，断开与父节点和子节点的关联。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 删除节点及其子树</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitDeletion</span> <span class="token operator">=</span> <span class="token punctuation">(</span>childToDelete<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行 Deletion 操作&#39;</span><span class="token punctuation">,</span> childToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 子树的根节点</span>
	<span class="token keyword">let</span> rootChildrenToDelete<span class="token operator">:</span> FiberNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 递归遍历子树</span>
	<span class="token function">commitNestedUnmounts</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">,</span> <span class="token punctuation">(</span>unmountFiber<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>unmountFiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> HostComponent<span class="token operator">:</span>
				<span class="token function">recordChildrenToDelete</span><span class="token punctuation">(</span>rootChildrenToDelete<span class="token punctuation">,</span> unmountFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// TODO 解绑ref</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token keyword">case</span> HostText<span class="token operator">:</span>
				<span class="token function">recordChildrenToDelete</span><span class="token punctuation">(</span>rootChildrenToDelete<span class="token punctuation">,</span> unmountFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token keyword">case</span> FunctionComponent<span class="token operator">:</span>
				<span class="token comment">//  TODO useEffect unmount</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token keyword">default</span><span class="token operator">:</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;未实现的 delete 类型&#39;</span><span class="token punctuation">,</span> unmountFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 移除 rootChildrenToDelete 的DOM</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rootChildrenToDelete<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 找到待删除子树的根节点的 parent DOM</span>
		<span class="token keyword">const</span> hostParent <span class="token operator">=</span> <span class="token function">getHostParent</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">)</span> <span class="token keyword">as</span> Container<span class="token punctuation">;</span>
		rootChildrenToDelete<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">removeChild</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> hostParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	childToDelete<span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	childToDelete<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">recordChildrenToDelete</span><span class="token punctuation">(</span>
	childrenToDelete<span class="token operator">:</span> FiberNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	unmountFiber<span class="token operator">:</span> FiberNode
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> lastOne <span class="token operator">=</span> childrenToDelete<span class="token punctuation">[</span>childrenToDelete<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		childrenToDelete<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>unmountFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> lastOne<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>unmountFiber <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				childrenToDelete<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>unmountFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			node <span class="token operator">=</span> node<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-处理-react-导出" tabindex="-1"><a class="header-anchor" href="#_4-处理-react-导出" aria-hidden="true">#</a> 4. 处理 React 导出</h2><p>因为我们使用 Fragment 组件时，是从 <code>react</code> 包引入的，如：<code>import { Fragment } from &#39;react&#39;;</code> 或直接使用 <code>&lt;React.Fragment&gt;</code> 标签，因此还需要在 <code>react</code> 包中导出 Fragment 组件。</p><p>在 <code>jsx.ts</code> 中导出 Fragment：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react/src/jsx.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;shared/ReactSymbols&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> Fragment <span class="token operator">=</span> <span class="token constant">REACT_FRAGMENT_TYPE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>jsx-dev-runtime.ts</code> 导出 Fragment：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react/jsx-dev-runtime.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> jsxDEV<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./src/jsx&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>至此，我们就实现了 Fragment，并将 Fragment 类型的组件加入到了 React 更新流程中。</p>`,23),$=n("code",null,"git tag v1.13",-1),I={href:"https://github.com/2xiao/my-react/tree/v1.13",target:"_blank",rel:"noopener noreferrer"};function U(Y,W){const l=i("ExternalLinkIcon"),o=i("CodeTabs");return r(),d("div",null,[v,n("div",m,[b,g,n("p",null,[s("相关代码可在 "),n("a",h,[y,p(l)]),s(" 查看")])]),f,w,F,x,_,p(o,{id:"59",data:[{id:"ReactElement"},{id:"对应 DOM"},{id:"JSX 转换结果"}]},{title0:a(({value:t,isActive:e})=>[s("ReactElement")]),title1:a(({value:t,isActive:e})=>[s("对应 DOM")]),title2:a(({value:t,isActive:e})=>[s("JSX 转换结果")]),tab0:a(({value:t,isActive:e})=>[C]),tab1:a(({value:t,isActive:e})=>[E]),tab2:a(({value:t,isActive:e})=>[T]),_:1}),R,p(o,{id:"132",data:[{id:"ReactElement"},{id:"对应 DOM"},{id:"JSX 转换结果"}]},{title0:a(({value:t,isActive:e})=>[s("ReactElement")]),title1:a(({value:t,isActive:e})=>[s("对应 DOM")]),title2:a(({value:t,isActive:e})=>[s("JSX 转换结果")]),tab0:a(({value:t,isActive:e})=>[D]),tab1:a(({value:t,isActive:e})=>[A]),tab2:a(({value:t,isActive:e})=>[j]),_:1}),N,p(o,{id:"194",data:[{id:"ReactElement"},{id:"对应 DOM"},{id:"JSX 转换结果"}]},{title0:a(({value:t,isActive:e})=>[s("ReactElement")]),title1:a(({value:t,isActive:e})=>[s("对应 DOM")]),title2:a(({value:t,isActive:e})=>[s("JSX 转换结果")]),tab0:a(({value:t,isActive:e})=>[M]),tab1:a(({value:t,isActive:e})=>[P]),tab2:a(({value:t,isActive:e})=>[S]),_:1}),O,n("p",null,[s("相关代码可在 "),$,s(" 查看，地址："),n("a",I,[s("https://github.com/2xiao/my-react/tree/v1.13"),p(l)])])])}const V=u(k,[["render",U],["__file","13.html.vue"]]);export{V as default};
