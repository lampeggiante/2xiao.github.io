import{_ as i,r as c,o as p,c as r,a as t,b as e,d as n,w as s,f as d,e as u}from"./app-qrCIIj1V.js";const _={},h={id:"_152-乘积最大子数组",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_152-乘积最大子数组","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/maximum-product-subarray",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"数组",-1),g=t("code",null,"动态规划",-1),b={href:"https://leetcode.com/problems/maximum-product-subarray",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code>, find a subarray that has the largest product, and return <em>the product</em>.</p><p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [2,3,-2,4]</p><p>Output: 6</p><p>Explanation: [2,3] has the largest product 6.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [-2,0,-1]</p><p>Output: 0</p><p>Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2 * 10^4</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>给出一个数组，要求找出这个数组中连续元素乘积最大的值。</li><li>分情况讨论: <ul><li>不和别人乘，就是 n 自己</li><li>n 是负数，乘上前面的最小积</li><li>n 是正数，乘上前面的最大积</li></ul></li><li>这一题是 DP 的题，状态转移方程是：最大值是 <code>Max(f(n)) = Max( Max(f(n-1)) * n, Min(f(n-1)) * n, n)</code>；最小值是 <code>Min(f(n)) = Min( Max(f(n-1)) * n, Min(f(n-1)) * n, n)</code>。只要动态维护这两个值，如果最后一个数是负数，最大值就在负数 _ 最小值和自己中产生，如果最后一个数是正数，最大值就在正数 _ 最大值和自己中产生。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> temp1<span class="token punctuation">,</span> temp2<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先计算好，免得下面重复计算两次，结果会出错</span>
    temp1 <span class="token operator">=</span> max <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    temp2 <span class="token operator">=</span> min <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>temp1<span class="token punctuation">,</span> temp2<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>temp1<span class="token punctuation">,</span> temp2<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,16),v=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),j=t("td",{style:{"text-align":"center"}},"53",-1),M={style:{"text-align":"left"}},w={href:"https://leetcode.com/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},q={style:{"text-align":"left"}},C=t("code",null,"数组",-1),L=t("code",null,"分治",-1),N=t("code",null,"动态规划",-1),V={style:{"text-align":"left"}},I=t("td",{style:{"text-align":"center"}},"198",-1),T={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},P={style:{"text-align":"left"}},R=t("code",null,"数组",-1),D=t("code",null,"动态规划",-1),G={style:{"text-align":"left"}},K=t("td",{style:{"text-align":"center"}},"238",-1),S={style:{"text-align":"left"}},z={href:"https://leetcode.com/problems/product-of-array-except-self",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"center"}},F={style:{"text-align":"left"}},H=t("code",null,"数组",-1),J=t("code",null,"前缀和",-1),Q={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"center"}},"628",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/maximum-product-of-three-numbers",target:"_blank",rel:"noopener noreferrer"},Y=t("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=t("code",null,"数组",-1),tt=t("code",null,"数学",-1),nt=t("code",null,"排序",-1),et={style:{"text-align":"left"}},st=t("td",{style:{"text-align":"center"}},"713",-1),at={style:{"text-align":"left"}},ot={href:"https://leetcode.com/problems/subarray-product-less-than-k",target:"_blank",rel:"noopener noreferrer"},lt=t("td",{style:{"text-align":"center"}},null,-1),ct={style:{"text-align":"left"}},it=t("code",null,"数组",-1),pt=t("code",null,"二分查找",-1),rt=t("code",null,"前缀和",-1),dt=t("code",null,"1+",-1),ut={style:{"text-align":"left"}};function _t(ht,mt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),r("div",null,[t("h1",h,[m,e(),t("a",f,[e("152. 乘积最大子数组"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[k]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[g]),_:1}),e("  🔗 "),t("a",b,[x,n(o)])]),y,d(" prettier-ignore "),t("table",null,[v,t("tbody",null,[t("tr",null,[j,t("td",M,[t("a",w,[e("最大子数组和"),n(o)])]),t("td",E,[n(a,{to:"/leetcode-js/problem/0053.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",q,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[C]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:s(()=>[L]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[N]),_:1})]),t("td",V,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[I,t("td",T,[t("a",B,[e("打家劫舍"),n(o)])]),t("td",O,[n(a,{to:"/leetcode-js/problem/0198.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",P,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[R]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:s(()=>[D]),_:1})]),t("td",G,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[K,t("td",S,[t("a",z,[e("除自身以外数组的乘积"),n(o)])]),t("td",A,[n(a,{to:"/leetcode-js/problem/0238.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",F,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[H]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:s(()=>[J]),_:1})]),t("td",Q,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[U,t("td",W,[t("a",X,[e("三个数的最大乘积"),n(o)])]),Y,t("td",Z,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[$]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[tt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/sorting.html"},{default:s(()=>[nt]),_:1})]),t("td",et,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[st,t("td",at,[t("a",ot,[e("乘积小于 K 的子数组"),n(o)])]),lt,t("td",ct,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[it]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/binary-search.html"},{default:s(()=>[pt]),_:1}),e(),n(a,{to:"/leetcode-js/outline/tag/prefix-sum.html"},{default:s(()=>[rt]),_:1}),e(),dt]),t("td",ut,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const kt=i(_,[["render",_t],["__file","0152.html.vue"]]);export{kt as default};
