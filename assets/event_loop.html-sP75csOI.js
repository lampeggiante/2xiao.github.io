import{_ as n,o as s,c as a,e}from"./app-b4s7f53x.js";const t={},i=e(`<h1 id="说说你对事件循环的理解" tabindex="-1"><a class="header-anchor" href="#说说你对事件循环的理解" aria-hidden="true">#</a> 说说你对事件循环的理解</h1><h2 id="一、事件循环是什么" tabindex="-1"><a class="header-anchor" href="#一、事件循环是什么" aria-hidden="true">#</a> 一、事件循环是什么？</h2><p><strong>事件循环</strong>（Event Loop）是 JavaScript 的一种机制，用于协调同步任务和异步任务的执行顺序，从而实现非阻塞的单线程运行。</p><h3 id="单线程与任务分类" tabindex="-1"><a class="header-anchor" href="#单线程与任务分类" aria-hidden="true">#</a> 单线程与任务分类</h3><p>JavaScript 是<strong>单线程语言</strong>，只能在主线程上同时执行一项任务。但它通过事件循环实现了高效的异步处理。</p><p>任务分类：</p><ol><li><strong>同步任务</strong>：立即执行的任务，直接进入主线程执行。</li><li><strong>异步任务</strong>：不会立即执行的任务，注册后进入任务队列，等待主线程空闲时处理。</li></ol><p><strong>事件循环的过程</strong>：</p><ul><li>主线程从任务队列中取出一个任务执行。</li><li>如果该任务产生异步操作，将回调加入任务队列。</li><li>主线程空闲时检查任务队列，取出任务继续执行。</li><li>不断重复此过程，这就是事件循环。</li></ul><hr><h2 id="二、宏任务与微任务" tabindex="-1"><a class="header-anchor" href="#二、宏任务与微任务" aria-hidden="true">#</a> 二、宏任务与微任务</h2><p>在 JavaScript 中，异步任务进一步细分为两类：</p><ul><li><strong>宏任务</strong>（Macro-task）：大的任务，执行时通常需要调度，时间粒度较大。</li><li><strong>微任务</strong>（Micro-task）：较小的任务，执行时粒度小且优先级高。</li></ul><h3 id="常见的任务分类" tabindex="-1"><a class="header-anchor" href="#常见的任务分类" aria-hidden="true">#</a> 常见的任务分类</h3><h4 id="_1-宏任务" tabindex="-1"><a class="header-anchor" href="#_1-宏任务" aria-hidden="true">#</a> 1. 宏任务</h4><ul><li>主代码块（整体脚本）</li><li><code>setTimeout</code></li><li><code>setInterval</code></li><li><code>setImmediate</code>（Node.js）</li><li>I/O 操作</li><li>UI 渲染</li></ul><h4 id="_2-微任务" tabindex="-1"><a class="header-anchor" href="#_2-微任务" aria-hidden="true">#</a> 2. 微任务</h4><ul><li><code>Promise.then</code> 或 <code>catch</code> / <code>finally</code></li><li><code>MutationObserver</code></li><li><code>queueMicrotask</code></li><li><code>process.nextTick</code>（Node.js 专有）</li></ul><h3 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h3><ol><li>执行当前宏任务中的同步代码。</li><li>清空微任务队列中的所有微任务。</li><li>执行下一个宏任务。</li><li>重复上述步骤。</li></ol><hr><h2 id="三、执行示例" tabindex="-1"><a class="header-anchor" href="#三、执行示例" aria-hidden="true">#</a> 三、执行示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分析流程</strong>：</p><ol><li>同步代码开始执行： <ul><li>打印：<code>script start</code>。</li></ul></li><li>遇到 <code>setTimeout</code>： <ul><li>将回调加入<strong>宏任务队列</strong>。</li></ul></li><li>遇到 <code>Promise</code>： <ul><li>立即执行 <code>resolve</code> 的回调，将 <code>.then</code> 回调加入<strong>微任务队列</strong>。</li></ul></li><li>打印：<code>script end</code>。</li><li>当前宏任务完成，执行微任务： <ul><li>打印：<code>Promise1</code>。</li><li>执行第二个 <code>.then</code> 回调，打印：<code>Promise2</code>。</li></ul></li><li>执行宏任务队列的 <code>setTimeout</code> 回调： <ul><li>打印：<code>setTimeout</code>。</li></ul></li></ol><p><strong>最终输出</strong>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>script start
script end
Promise1
Promise2
setTimeout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、async-await-与事件循环" tabindex="-1"><a class="header-anchor" href="#四、async-await-与事件循环" aria-hidden="true">#</a> 四、<code>async/await</code> 与事件循环</h2><p><code>async/await</code> 是对异步操作的语法糖。</p><ul><li><code>async</code> 函数返回一个 <code>Promise</code>。</li><li><code>await</code> 会暂停 <code>async</code> 函数的执行，等待 <code>Promise</code> 解决后继续。</li></ul><h3 id="示例分析" tabindex="-1"><a class="header-anchor" href="#示例分析" aria-hidden="true">#</a> 示例分析</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程" aria-hidden="true">#</a> 执行过程</h4><ol><li>打印：<code>script start</code>。</li><li>执行 <code>foo()</code>： <ul><li>打印：<code>foo start</code>。</li><li>遇到 <code>await bar()</code>： <ul><li>执行 <code>bar()</code>，打印：<code>bar</code>。</li><li><code>await</code> 暂停，<code>foo</code> 中的后续代码加入微任务队列。</li></ul></li></ul></li><li>打印：<code>script end</code>。</li><li>当前宏任务结束，执行微任务： <ul><li>打印：<code>foo end</code>。</li></ul></li></ol><h4 id="输出结果" tabindex="-1"><a class="header-anchor" href="#输出结果" aria-hidden="true">#</a> 输出结果</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>script start
foo start
bar
script end
foo end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><h3 id="_1-执行优先级" tabindex="-1"><a class="header-anchor" href="#_1-执行优先级" aria-hidden="true">#</a> 1. 执行优先级</h3><ul><li><strong>当前宏任务 → 微任务 → 下一个宏任务</strong>。</li><li>微任务总是比下一次宏任务优先执行。</li></ul><h3 id="_2-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-使用场景" aria-hidden="true">#</a> 2. 使用场景</h3><ul><li><strong>微任务</strong>：适合需要快速响应的操作，例如 <code>Promise</code>。</li><li><strong>宏任务</strong>：适合定时操作或耗时任务，例如 <code>setTimeout</code>。</li></ul><h3 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h3><ul><li>不同环境（浏览器、Node.js）的事件循环机制略有差异。</li><li>需要了解异步任务的细分，避免误判执行顺序。</li></ul>`,45),o=[i];function c(l,p){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","event_loop.html.vue"]]);export{u as default};
