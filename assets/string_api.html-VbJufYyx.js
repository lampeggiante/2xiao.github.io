import{_ as n,o as s,c as a,e as t}from"./app-b4s7f53x.js";const e={},o=t(`<h1 id="javascript-字符串的常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#javascript-字符串的常用方法有哪些" aria-hidden="true">#</a> JavaScript 字符串的常用方法有哪些？</h1><p>JavaScript 中的字符串操作方法丰富，主要分为以下几类：<strong>增、删、改、查、转换</strong>和<strong>正则匹配</strong>。需要注意，<strong>字符串是不可变的</strong>，所有操作都会返回新的字符串，而不会修改原字符串。</p><hr><h2 id="一、增" tabindex="-1"><a class="header-anchor" href="#一、增" aria-hidden="true">#</a> 一、增</h2><p>在字符串中“增”的本质是创建新字符串，以下是常用方法：</p><h3 id="_1-字符串拼接" tabindex="-1"><a class="header-anchor" href="#_1-字符串拼接" aria-hidden="true">#</a> 1. 字符串拼接</h3><ul><li>使用 <strong><code>+</code></strong> 操作符或 <strong>模板字符串 (<code>\${}</code>)</strong>。</li><li>使用 <strong><code>concat()</code></strong> 方法。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello &#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、删" tabindex="-1"><a class="header-anchor" href="#二、删" aria-hidden="true">#</a> 二、删</h2><p>“删”的操作指创建字符串副本，截取或移除部分内容，常用方法包括：</p><ul><li><strong><code>slice()</code></strong></li><li><strong><code>substr()</code></strong></li><li><strong><code>substring()</code></strong></li></ul><h3 id="区别与用法" tabindex="-1"><a class="header-anchor" href="#区别与用法" aria-hidden="true">#</a> 区别与用法：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;lo world&quot; 从索引 3 截取到末尾</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;lo w&quot; 从索引 3 截取到索引 7（不含）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;lo w&quot; 从索引 3 开始，截取 4 个字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong> <code>substr</code> 已被废弃，建议使用 <code>slice</code> 或 <code>substring</code>。</p></blockquote><hr><h2 id="三、改" tabindex="-1"><a class="header-anchor" href="#三、改" aria-hidden="true">#</a> 三、改</h2><p>修改字符串生成副本，常见操作包括去空格、重复、填充和大小写转换。</p><h3 id="_1-去空格" tabindex="-1"><a class="header-anchor" href="#_1-去空格" aria-hidden="true">#</a> 1. 去空格</h3><ul><li><strong><code>trim()</code></strong>：去除首尾空格。</li><li><strong><code>trimStart()</code> / <code>trimEnd()</code></strong>：去除头部或尾部空格。</li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39; hello world &#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello world &quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; hello world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-字符串重复" tabindex="-1"><a class="header-anchor" href="#_2-字符串重复" aria-hidden="true">#</a> 2. 字符串重复</h3><ul><li><strong><code>repeat()</code></strong>：重复字符串指定次数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;na &#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;na na&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-字符填充" tabindex="-1"><a class="header-anchor" href="#_3-字符填充" aria-hidden="true">#</a> 3. 字符填充</h3><ul><li><strong><code>padStart()</code> / <code>padEnd()</code></strong>：填充字符串至指定长度。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;   foo&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;foo...&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-大小写转换" tabindex="-1"><a class="header-anchor" href="#_4-大小写转换" aria-hidden="true">#</a> 4. 大小写转换</h3><ul><li><strong><code>toLowerCase()</code></strong>：转为小写。</li><li><strong><code>toUpperCase()</code></strong>：转为大写。</li></ul><hr><h2 id="四、查" tabindex="-1"><a class="header-anchor" href="#四、查" aria-hidden="true">#</a> 四、查</h2><p>“查”指从字符串中获取某部分内容或判断是否包含特定字符。</p><ul><li><strong><code>charAt()</code></strong>：返回指定索引处的字符。</li><li><strong><code>indexOf()</code></strong>：返回第一次出现的索引，未找到返回 -1。</li><li><strong><code>startsWith()</code> / <code>includes()</code></strong>：判断是否以指定字符开头或包含指定字符。</li></ul><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;foobarbaz&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;o&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、转换" tabindex="-1"><a class="header-anchor" href="#五、转换" aria-hidden="true">#</a> 五、转换</h2><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> <strong><code>split()</code></strong></h3><p>将字符串按照指定分隔符拆分为数组。</p><h4 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3" aria-hidden="true">#</a> 示例：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;12+23+34&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;12&quot;, &quot;23&quot;, &quot;34&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、正则匹配" tabindex="-1"><a class="header-anchor" href="#六、正则匹配" aria-hidden="true">#</a> 六、正则匹配</h2><p>针对正则表达式的匹配，字符串提供以下方法：</p><h3 id="_1-match" tabindex="-1"><a class="header-anchor" href="#_1-match" aria-hidden="true">#</a> 1. <strong><code>match()</code></strong></h3><p>返回匹配结果的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;cat, bat, sat, fat&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;cat&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-search" tabindex="-1"><a class="header-anchor" href="#_2-search" aria-hidden="true">#</a> 2. <strong><code>search()</code></strong></h3><p>返回匹配项的索引，未找到返回 -1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;cat, bat, sat, fat&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-replace" tabindex="-1"><a class="header-anchor" href="#_3-replace" aria-hidden="true">#</a> 3. <strong><code>replace()</code></strong></h3><p>用指定内容替换匹配项，支持函数作为替换逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;cat, bat, sat, fat&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;at&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ond&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;cond, bat, sat, fat&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,55),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","string_api.html.vue"]]);export{r as default};
