import{_,r as c,o as i,c as a,a as t,d as e,w as l,b as o,f as u}from"./app-GnK0vSxb.js";const h={},r=t("h1",{id:"迭代器",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#迭代器","aria-hidden":"true"},"#"),o(" 迭代器")],-1),g={class:"hint-container details"},f=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),p=t("code",null,"矩阵",-1),x=t("code",null,"链表",-1),b=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),M=t("code",null,"单调栈",-1),v=t("code",null,"队列",-1),w=t("code",null,"单调队列",-1),q=t("code",null,"堆（优先队列）",-1),I=t("code",null,"哈希表",-1),E=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),N=t("code",null,"二叉树",-1),V=t("code",null,"二叉搜索树",-1),B=t("code",null,"最小生成树",-1),C=t("code",null,"图",-1),R=t("code",null,"有序集合",-1),O=t("code",null,"拓扑排序",-1),T=t("code",null,"最短路",-1),j=t("code",null,"强连通分量",-1),Q=t("code",null,"欧拉回路",-1),A=t("code",null,"双连通分量",-1),D=t("code",null,"并查集",-1),F=t("code",null,"字典树",-1),G=t("code",null,"线段树",-1),H=t("code",null,"树状数组",-1),J=t("code",null,"后缀数组",-1),K=t("p",null,[t("strong",null,"算法")],-1),P=t("code",null,"枚举",-1),S=t("code",null,"递归",-1),U=t("code",null,"分治",-1),W=t("code",null,"回溯",-1),X=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),ot=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),dt=t("code",null,"记忆化搜索",-1),st=t("code",null,"深度优先搜索",-1),ct=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),it=t("code",null,"位运算",-1),at=t("code",null,"前缀和",-1),ut=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),rt=t("code",null,"状态压缩",-1),gt=t("code",null,"哈希函数",-1),ft=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),pt=t("code",null,"数学",-1),xt=t("code",null,"数论",-1),bt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Mt=t("code",null,"模拟",-1),vt=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),qt=t("code",null,"概率与统计",-1),It=t("code",null,"水塘抽样",-1),Et=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Nt=t("code",null,"数据流",-1),Vt=t("code",null,"脑筋急转弯",-1),Bt=t("code",null,"交互",-1),Ct=t("span",{class:"blue"},"迭代器",-1),Rt=t("code",null,"多线程",-1),Ot=t("hr",null,null,-1),Tt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),jt=t("td",{style:{"text-align":"center"}},"173",-1),Qt={style:{"text-align":"left"}},At={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Dt={style:{"text-align":"center"}},Ft={style:{"text-align":"left"}},Gt=t("code",null,"栈",-1),Ht=t("code",null,"树",-1),Jt=t("code",null,"设计",-1),Kt=t("code",null,"3+",-1),Pt={style:{"text-align":"left"}},St=t("td",{style:{"text-align":"center"}},"251",-1),Ut={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/flatten-2d-vector",target:"_blank",rel:"noopener noreferrer"},Xt=t("td",{style:{"text-align":"center"}},null,-1),Yt={style:{"text-align":"left"}},Zt=t("code",null,"设计",-1),$t=t("code",null,"数组",-1),te=t("code",null,"双指针",-1),ee=t("code",null,"1+",-1),oe={style:{"text-align":"left"}},le=t("td",{style:{"text-align":"center"}},"281",-1),ne={style:{"text-align":"left"}},de={href:"https://leetcode.com/problems/zigzag-iterator",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},null,-1),ce={style:{"text-align":"left"}},_e=t("code",null,"设计",-1),ie=t("code",null,"队列",-1),ae=t("code",null,"数组",-1),ue=t("code",null,"1+",-1),he={style:{"text-align":"left"}},re=t("td",{style:{"text-align":"center"}},"284",-1),ge={style:{"text-align":"left"}},fe={href:"https://leetcode.com/problems/peeking-iterator",target:"_blank",rel:"noopener noreferrer"},me=t("td",{style:{"text-align":"center"}},null,-1),ye={style:{"text-align":"left"}},pe=t("code",null,"设计",-1),xe=t("code",null,"数组",-1),be=t("code",null,"迭代器",-1),ke={style:{"text-align":"left"}},Me=t("td",{style:{"text-align":"center"}},"341",-1),ve={style:{"text-align":"left"}},we={href:"https://leetcode.com/problems/flatten-nested-list-iterator",target:"_blank",rel:"noopener noreferrer"},qe=t("td",{style:{"text-align":"center"}},null,-1),Ie={style:{"text-align":"left"}},Ee=t("code",null,"栈",-1),Le=t("code",null,"树",-1),ze=t("code",null,"深度优先搜索",-1),Ne=t("code",null,"3+",-1),Ve={style:{"text-align":"left"}},Be=t("td",{style:{"text-align":"center"}},"604",-1),Ce={style:{"text-align":"left"}},Re={href:"https://leetcode.com/problems/design-compressed-string-iterator",target:"_blank",rel:"noopener noreferrer"},Oe=t("td",{style:{"text-align":"center"}},null,-1),Te={style:{"text-align":"left"}},je=t("code",null,"设计",-1),Qe=t("code",null,"数组",-1),Ae=t("code",null,"字符串",-1),De=t("code",null,"1+",-1),Fe={style:{"text-align":"left"}},Ge=t("td",{style:{"text-align":"center"}},"900",-1),He={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/rle-iterator",target:"_blank",rel:"noopener noreferrer"},Ke=t("td",{style:{"text-align":"center"}},null,-1),Pe={style:{"text-align":"left"}},Se=t("code",null,"设计",-1),Ue=t("code",null,"数组",-1),We=t("code",null,"计数",-1),Xe=t("code",null,"1+",-1),Ye={style:{"text-align":"left"}},Ze=t("td",{style:{"text-align":"center"}},"1286",-1),$e={style:{"text-align":"left"}},to={href:"https://leetcode.com/problems/iterator-for-combination",target:"_blank",rel:"noopener noreferrer"},eo=t("td",{style:{"text-align":"center"}},null,-1),oo={style:{"text-align":"left"}},lo=t("code",null,"设计",-1),no=t("code",null,"字符串",-1),so=t("code",null,"回溯",-1),co=t("code",null,"1+",-1),_o={style:{"text-align":"left"}},io=t("td",{style:{"text-align":"center"}},"1586",-1),ao={style:{"text-align":"left"}},uo={href:"https://leetcode.com/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},null,-1),ro={style:{"text-align":"left"}},go=t("code",null,"栈",-1),fo=t("code",null,"树",-1),mo=t("code",null,"设计",-1),yo=t("code",null,"3+",-1),po={style:{"text-align":"left"}},xo=t("td",{style:{"text-align":"center"}},"剑指 Offer II 55",-1),bo={style:{"text-align":"left"}},ko={href:"https://leetcode.cn/problems/kTOapQ",target:"_blank",rel:"noopener noreferrer"},Mo=t("td",{style:{"text-align":"center"}},null,-1),vo={style:{"text-align":"left"}},wo=t("code",null,"栈",-1),qo=t("code",null,"树",-1),Io=t("code",null,"设计",-1),Eo=t("code",null,"3+",-1),Lo={style:{"text-align":"left"}};function zo(No,Vo){const n=c("RouterLink"),d=c("ExternalLinkIcon"),s=c("font");return i(),a("div",null,[r,t("details",g,[f,m,t("p",null,[e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/matrix.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/linked-list.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/doubly-linked-list.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/monotonic-stack.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/monotonic-queue.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/heap-priority-queue.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/hash-table.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string-matching.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-tree.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-search-tree.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/minimum-spanning-tree.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/graph.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/ordered-set.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/topological-sort.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/shortest-path.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/strongly-connected-component.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/eulerian-circuit.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/biconnected-component.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/union-find.html"},{default:l(()=>[D]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/trie.html"},{default:l(()=>[F]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/suffix-array.html"},{default:l(()=>[J]),_:1})]),K,t("p",null,[e(n,{to:"/leetcode/outline/tag/enumeration.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/recursion.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/backtracking.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/greedy.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/sorting.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/counting-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/radix-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/merge-sort.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/quickselect.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-search.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/memoization.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/two-pointers.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/counting.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/sliding-window.html"},{default:l(()=>[ht]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/bitmask.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/hash-function.html"},{default:l(()=>[gt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/rolling-hash.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/line-sweep.html"},{default:l(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/leetcode/outline/tag/math.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/number-theory.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/geometry.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/game-theory.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/simulation.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/combinatorics.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/randomized.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/probability-and-statistics.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/reservoir-sampling.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/rejection-sampling.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/database.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/data-stream.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/brainteaser.html"},{default:l(()=>[Vt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/interactive.html"},{default:l(()=>[Bt]),_:1}),o(),Ct,o(),e(n,{to:"/leetcode/outline/tag/concurrency.html"},{default:l(()=>[Rt]),_:1})])]),Ot,u(" prettier-ignore "),t("table",null,[Tt,t("tbody",null,[t("tr",null,[jt,t("td",Qt,[t("a",At,[o("二叉搜索树迭代器"),e(d)])]),t("td",Dt,[e(n,{to:"/leetcode/problem/0173.html"},{default:l(()=>[o("[✓]")]),_:1})]),t("td",Ft,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[Gt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Jt]),_:1}),o(),Kt]),t("td",Pt,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[St,t("td",Ut,[t("a",Wt,[o("展开二维向量"),e(d)])]),Xt,t("td",Yt,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Zt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[$t]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/two-pointers.html"},{default:l(()=>[te]),_:1}),o(),ee]),t("td",oe,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[le,t("td",ne,[t("a",de,[o("锯齿迭代器"),e(d)])]),se,t("td",ce,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[_e]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:l(()=>[ie]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[ae]),_:1}),o(),ue]),t("td",he,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[re,t("td",ge,[t("a",fe,[o("窥视迭代器"),e(d)])]),me,t("td",ye,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[pe]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[xe]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/iterator.html"},{default:l(()=>[be]),_:1})]),t("td",ke,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Me,t("td",ve,[t("a",we,[o("扁平化嵌套列表迭代器"),e(d)])]),qe,t("td",Ie,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[Ee]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[Le]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:l(()=>[ze]),_:1}),o(),Ne]),t("td",Ve,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Be,t("td",Ce,[t("a",Re,[o("迭代压缩字符串"),e(d)])]),Oe,t("td",Te,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[je]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[Qe]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:l(()=>[Ae]),_:1}),o(),De]),t("td",Fe,[e(s,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Ge,t("td",He,[t("a",Je,[o("RLE 迭代器"),e(d)])]),Ke,t("td",Pe,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Se]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[Ue]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/counting.html"},{default:l(()=>[We]),_:1}),o(),Xe]),t("td",Ye,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ze,t("td",$e,[t("a",to,[o("字母组合迭代器"),e(d)])]),eo,t("td",oo,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[lo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:l(()=>[no]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/backtracking.html"},{default:l(()=>[so]),_:1}),o(),co]),t("td",_o,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[io,t("td",ao,[t("a",uo,[o("二叉搜索树迭代器 II"),e(d)])]),ho,t("td",ro,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[go]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[fo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[mo]),_:1}),o(),yo]),t("td",po,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[xo,t("td",bo,[t("a",ko,[o("二叉搜索树迭代器"),e(d)])]),Mo,t("td",vo,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[wo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[qo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Io]),_:1}),o(),Eo]),t("td",Lo,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])])])])])}const Co=_(h,[["render",zo],["__file","iterator.html.vue"]]);export{Co as default};
