import{_ as r}from"./705-6E08G9Ez.js";import{_ as d,r as l,o as k,c as m,a as n,b as s,d as a,w as t,f as p,e as i}from"./app-mvY9N9Pc.js";const h="/leetcode-js/assets/2-5-1-uAPN8fXL.png",b={},_=i('<h1 id="_2-5-哈希表" tabindex="-1"><a class="header-anchor" href="#_2-5-哈希表" aria-hidden="true">#</a> 2.5 哈希表</h1><h2 id="哈希表的定义" tabindex="-1"><a class="header-anchor" href="#哈希表的定义" aria-hidden="true">#</a> 哈希表的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>哈希表（Hash Table）</strong> ：也叫做散列表。是根据关键码值（Key Value）直接进行访问的数据结构。</p></div><p>哈希表通过 <strong>键 <code>key</code></strong> 和 <strong>映射函数 <code>Hash(key)</code></strong> 计算出对应的 <strong>值 <code>value</code></strong> ，把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做 <strong>哈希函数（散列函数）</strong> ，存放记录的数组叫做 <strong>哈希表（散列表）</strong> 。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>哈希表的两个核心问题是：<strong>哈希函数设计</strong> 和 <strong>哈希冲突解决</strong> 。</p><h2 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数" aria-hidden="true">#</a> 哈希函数</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p>哈希函数是将哈希表中元素的关键键值映射为元素存储位置的函数。</p></div><p>哈希函数是哈希表中最重要的部分一般来说，哈希函数会满足以下几个条件：</p><ul><li>哈希函数应该易于计算，并且尽量使计算出来的索引值均匀分布；</li><li>哈希函数计算得到的哈希值是一个固定长度的非负整数；</li><li>如果 <code>key1 = key2</code>，那 <code>hash(key1) == hash(key2)</code>；</li><li>如果 <code>key1 ≠ key2</code>，那 <code>hash(key1) ≠ hash(key2)</code>；</li></ul><p>常用的哈希函数方法有：直接定址法、除留余数法、平方取中法、基数转换法。</p><h2 id="哈希冲突" tabindex="-1"><a class="header-anchor" href="#哈希冲突" aria-hidden="true">#</a> 哈希冲突</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>哈希冲突（Hash Collision）</strong> ：不同的关键字通过同一个哈希函数可能得到同一哈希地址，即 <code>key1 ≠ key2</code>，而 <code>Hash(key1) = Hash(key2)</code>，这种现象称为哈希冲突。</p></div>',13),v=n("code",null,"key",-1),y={href:"https://zh.wikipedia.org/wiki/MD5",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"哈希冲突",-1),x=i('<p>解决哈希冲突问题常用的方法有两类，开放寻址法（open addressing）和链表法（chaining）。</p><h3 id="开放寻址法" tabindex="-1"><a class="header-anchor" href="#开放寻址法" aria-hidden="true">#</a> 开放寻址法</h3><p>开放寻址法的核心思想是，如果出现了哈希冲突，就重新探测一个空闲位置，将其插入。</p><p>以线性探测为例，往哈希表中插入数据时，如果某个数据经过哈希函数哈希之后，存储位置已经被占用了，就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p><p>当发现哈希值 <code>h</code> 处产生冲突时，从 <code>h</code> 出发，不断地检查 <code>h+1,h+2,h+3,…</code> 这些整数对应的位置。</p><h3 id="链表法" tabindex="-1"><a class="header-anchor" href="#链表法" aria-hidden="true">#</a> 链表法</h3><p>链表法的核心思想是，为每个哈希值维护一个链表，并将具有相同哈希值的元素都放入这一链表当中。</p><p>链表法是一种更加常用的哈希冲突解决方法。相比于开放地址法，链地址法更加简单。</p><h2 id="哈希表的实现" tabindex="-1"><a class="header-anchor" href="#哈希表的实现" aria-hidden="true">#</a> 哈希表的实现</h2><h3 id="哈希集合" tabindex="-1"><a class="header-anchor" href="#哈希集合" aria-hidden="true">#</a> 哈希集合</h3>',10),M={id:"📌-705-设计哈希集合-leetcode",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#📌-705-设计哈希集合-leetcode","aria-hidden":"true"},"#",-1),S={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0705.html",target:"_blank",rel:"noopener noreferrer"},H=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),E=n("p",null,"不使用任何内建的哈希表库设计一个哈希集合（HashSet）。",-1),T=n("p",null,[s("实现 "),n("code",null,"MyHashSet"),s(" 类：")],-1),q=n("ul",null,[n("li",null,[n("code",null,"void add(key)"),s(" 向哈希集合中插入值 "),n("code",null,"key"),s(" 。")]),n("li",null,[n("code",null,"bool contains(key)"),s(" 返回哈希集合中是否存在这个值 "),n("code",null,"key"),s(" 。")]),n("li",null,[n("code",null,"void remove(key)"),s(" 将给定值 "),n("code",null,"key"),s(" 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。")])],-1),O=n("p",null,[n("strong",null,"示例"),s("：")],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("MyHashSet myHashSet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashSet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (not found)"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (already removed)"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,[n("strong",null,"说明"),s("：")],-1),L=n("ul",null,[n("li",null,[n("code",null,"0 <= key <= 10^6"),s(";")]),n("li",null,[s("最多调用 "),n("code",null,"10^4"),s(" 次 "),n("code",null,"add"),s("、"),n("code",null,"remove"),s(" 和 "),n("code",null,"contains"),s(";")])],-1),z=n("hr",null,null,-1),J=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),I=n("p",null,"链地址法：",-1),C=n("ul",null,[n("li",null,[s("设哈希表的大小为 "),n("code",null,"base"),s("，则可以设计一个简单的哈希函数："),n("code",null,"hash(x) = x mod base"),s("；")]),n("li",null,[s("开辟一个大小为 "),n("code",null,"base"),s(" 的数组，数组的每个位置是一个链表。当计算出哈希值之后，就插入到对应位置的链表当中；")]),n("li",null,[s("由于使用整数除法作为哈希函数，为了尽可能避免冲突，应当将 "),n("code",null,"base"),s(" 取为一个质数，如 "),n("code",null,"base = 769"),s("；")])],-1),D=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),B=n("ul",null,[n("li",null,[s("时间复杂度："),n("code",null,"O(n / b)"),s("。其中 "),n("code",null,"n"),s(" 为哈希表中的元素数量，"),n("code",null,"b"),s(" 为链表的数量，假设哈希值是均匀分布的，则每个链表大概长度为 "),n("code",null,"n / b"),s("；")]),n("li",null,[s("空间复杂度："),n("code",null,"O(n+b)"),s("。")])],-1),V=n("hr",null,null,-1),R=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),F=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashSet"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {boolean}"),s(`
	`),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashSet object will be instantiated and called as such:
 * var obj = new MyHashSet()
 * obj.add(key)
 * obj.remove(key)
 * var param_3 = obj.contains(key)
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [705. 设计哈希集合 - LeetCode](https://2xiao.github.io/leetcode-js/leetcode/problem/0705.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

不使用任何内建的哈希表库设计一个哈希集合（HashSet）。

实现 `),n("span",{class:"token code-snippet code keyword"},"`MyHashSet`"),s(` 类：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void add(key)`"),s(" 向哈希集合中插入值 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`bool contains(key)`"),s(" 返回哈希集合中是否存在这个值 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void remove(key)`"),s(" 将给定值 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(` 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[s("MyHashSet myHashSet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashSet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (not found)"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (already removed)")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= key <= 10^6`"),s(`;
`),n("span",{class:"token list punctuation"},"-"),s(" 最多调用 "),n("span",{class:"token code-snippet code keyword"},"`10^4`"),s(" 次 "),n("span",{class:"token code-snippet code keyword"},"`add`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`remove`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`contains`"),s(`;

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

链地址法：

`),n("span",{class:"token list punctuation"},"-"),s(" 设哈希表的大小为 "),n("span",{class:"token code-snippet code keyword"},"`base`"),s("，则可以设计一个简单的哈希函数："),n("span",{class:"token code-snippet code keyword"},"`hash(x) = x mod base`"),s(`；
`),n("span",{class:"token list punctuation"},"-"),s(" 开辟一个大小为 "),n("span",{class:"token code-snippet code keyword"},"`base`"),s(` 的数组，数组的每个位置是一个链表。当计算出哈希值之后，就插入到对应位置的链表当中；
`),n("span",{class:"token list punctuation"},"-"),s(" 由于使用整数除法作为哈希函数，为了尽可能避免冲突，应当将 "),n("span",{class:"token code-snippet code keyword"},"`base`"),s(" 取为一个质数，如 "),n("span",{class:"token code-snippet code keyword"},"`base = 769`"),s(`；

![](../../../assets/image/705.png)

`),n("span",{class:"token list punctuation"},"-"),s(" 时间复杂度："),n("span",{class:"token code-snippet code keyword"},"`O(n / b)`"),s("。其中 "),n("span",{class:"token code-snippet code keyword"},"`n`"),s(" 为哈希表中的元素数量，"),n("span",{class:"token code-snippet code keyword"},"`b`"),s(" 为链表的数量，假设哈希值是均匀分布的，则每个链表大概长度为 "),n("span",{class:"token code-snippet code keyword"},"`n / b`"),s(`；
`),n("span",{class:"token list punctuation"},"-"),s(" 空间复杂度："),n("span",{class:"token code-snippet code keyword"},"`O(n+b)`"),s(`。

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashSet"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {boolean}"),s(`
	`),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashSet object will be instantiated and called as such:
 * var obj = new MyHashSet()
 * obj.add(key)
 * obj.remove(key)
 * var param_3 = obj.contains(key)
 */`)]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("h3",{id:"哈希映射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#哈希映射","aria-hidden":"true"},"#"),s(" 哈希映射")],-1),U={id:"📌-706-设计哈希映射-leetcode",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#📌-706-设计哈希映射-leetcode","aria-hidden":"true"},"#",-1),X={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0706.html",target:"_blank",rel:"noopener noreferrer"},$=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),G=n("p",null,"不使用任何内建的哈希表库设计一个哈希映射（HashMap）。",-1),Q=n("p",null,[s("实现 "),n("code",null,"MyHashMap"),s(" 类：")],-1),W=n("ul",null,[n("li",null,[n("code",null,"MyHashMap()"),s(" 用空映射初始化对象")]),n("li",null,[n("code",null,"void put(int key, int value)"),s(" 向 "),n("code",null,"HashMap"),s(" 插入一个键值对 "),n("code",null,"(key, value)"),s(" 。如果 "),n("code",null,"key"),s(" 已经存在于映射中，则更新其对应的值 "),n("code",null,"value"),s(" 。")]),n("li",null,[n("code",null,"int get(int key)"),s(" 返回特定的 "),n("code",null,"key"),s(" 所映射的 "),n("code",null,"value"),s(" ；如果映射中不包含 "),n("code",null,"key"),s(" 的映射，返回 "),n("code",null,"-1"),s(" 。")]),n("li",null,[n("code",null,"void remove(key)"),s(" 如果映射中存在 "),n("code",null,"key"),s(" 的映射，则移除 "),n("code",null,"key"),s(" 和它所对应的 "),n("code",null,"value"),s(" 。")])],-1),Z=n("p",null,[n("strong",null,"示例"),s("：")],-1),nn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("MyHashMap myHashMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,1]] (i.e., update the existing value)"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// remove the mapping for 2, The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1]]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("p",null,[n("strong",null,"说明"),s("：")],-1),an=n("ul",null,[n("li",null,[n("code",null,"0 <= key, value <= 10^6")]),n("li",null,[s("最多调用 "),n("code",null,"10^4"),s(" 次 "),n("code",null,"put"),s("、"),n("code",null,"get"),s(" 和 "),n("code",null,"remove"),s(";")])],-1),tn=n("hr",null,null,-1),en=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),on=n("p",null,[s("链地址法，「设计哈希映射」与「设计哈希集合」解法接近，唯一的区别在于存储的不是 "),n("code",null,"key"),s(" 本身，而是 "),n("code",null,"(key,value)"),s(" 对，其他代码都一样。")],-1),cn=n("hr",null,null,-1),ln=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),pn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashMap"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				item`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashMap object will be instantiated and called as such:
 * var obj = new MyHashMap()
 * obj.put(key,value)
 * var param_2 = obj.get(key)
 * obj.remove(key)
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [706. 设计哈希映射 - LeetCode](https://2xiao.github.io/leetcode-js/leetcode/problem/0706.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

不使用任何内建的哈希表库设计一个哈希映射（HashMap）。

实现 `),n("span",{class:"token code-snippet code keyword"},"`MyHashMap`"),s(` 类：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`MyHashMap()`"),s(` 用空映射初始化对象
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void put(int key, int value)`"),s(" 向 "),n("span",{class:"token code-snippet code keyword"},"`HashMap`"),s(" 插入一个键值对 "),n("span",{class:"token code-snippet code keyword"},"`(key, value)`"),s(" 。如果 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 已经存在于映射中，则更新其对应的值 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`int get(int key)`"),s(" 返回特定的 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 所映射的 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(" ；如果映射中不包含 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 的映射，返回 "),n("span",{class:"token code-snippet code keyword"},"`-1`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void remove(key)`"),s(" 如果映射中存在 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 的映射，则移除 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 和它所对应的 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(` 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[s("MyHashMap myHashMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,1]] (i.e., update the existing value)"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// remove the mapping for 2, The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1]]")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= key, value <= 10^6`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(" 最多调用 "),n("span",{class:"token code-snippet code keyword"},"`10^4`"),s(" 次 "),n("span",{class:"token code-snippet code keyword"},"`put`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`get`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`remove`"),s(`;

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

链地址法，「设计哈希映射」与「设计哈希集合」解法接近，唯一的区别在于存储的不是 `),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 本身，而是 "),n("span",{class:"token code-snippet code keyword"},"`(key,value)`"),s(` 对，其他代码都一样。

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashMap"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				item`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashMap object will be instantiated and called as such:
 * var obj = new MyHashMap()
 * obj.put(key,value)
 * var param_2 = obj.get(key)
 * obj.remove(key)
 */`)]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=i(`<h2 id="javascript-set" tabindex="-1"><a class="header-anchor" href="#javascript-set" aria-hidden="true">#</a> JavaScript Set</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>Set</strong> 是 ES6 新提供的数据结构，它类似于数组，但是成员的值都是唯一的，<strong>没有重复的值</strong>。</p></div><p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构。<code>Set</code>函数可以接受一个数组（或者具有 <code>iterable</code> 接口的其他数据结构）作为参数，用来初始化。</p><p>向 <code>Set</code> 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。但两个对象总是不相等的，如例三，由于两个空对象不相等，所以它们被视为两个值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// eg1：数组</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span> <span class="token comment">// [1, 2, 3, 4]</span>
set<span class="token punctuation">.</span>size <span class="token comment">// 4</span>

<span class="token comment">// eg2：字符串</span>
<span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">&#39;ababbc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>

<span class="token comment">// eg3：对象</span>
<span class="token keyword">let</span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set3<span class="token punctuation">.</span>size <span class="token comment">// 1</span>
set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set3<span class="token punctuation">.</span>size <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断是否包括一个键，Object 结构和 Set 结构写法的不同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对象的写法</span>
<span class="token keyword">const</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">[</span>someName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do something</span>
<span class="token punctuation">}</span>

<span class="token comment">// Set的写法</span>
<span class="token keyword">const</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>someName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性和方法" tabindex="-1"><a class="header-anchor" href="#属性和方法" aria-hidden="true">#</a> 属性和方法</h3><p><code>Set</code> 结构的实例有以下属性：</p><ul><li><code>constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p><code>Set</code> 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。</p><ul><li>操作方法： <ul><li><code>add(value)</code>：添加某个值，返回 <code>Set</code> 结构本身；</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功；</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员；</li><li><code>clear()</code>：清除所有成员，没有返回值；</li></ul></li><li>遍历方法： <ul><li><code>keys()</code>：返回键名的遍历器；</li><li><code>values()</code>：返回键值的遍历器；</li><li><code>entries()</code>：返回键值对的遍历器；</li><li><code>forEach()</code>：使用回调函数遍历每个成员；</li></ul></li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 <code>Set</code> 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><p>由于 <code>Set</code> 结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys</code>方法和<code>values</code>方法的行为完全一致。</p><h3 id="set-的应用" tabindex="-1"><a class="header-anchor" href="#set-的应用" aria-hidden="true">#</a> Set 的应用</h3><h4 id="_1-数组去重" tabindex="-1"><a class="header-anchor" href="#_1-数组去重" aria-hidden="true">#</a> 1. 数组去重</h4><p>利用 <code>Set</code> 成员唯一的特点，可以去除数组重复成员。</p><p>将数组作为参数初始化 <code>Set</code> ，再利用<code>Array.from()</code>方法将 <code>Set</code> 结构转为数组。扩展运算符（<code>...</code>）内部使用<code>for...of</code>循环，所以也可以用于 Set 结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 去除数组的重复成员</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法也可以用于，去除字符串里面的重复字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">&#39;ababbc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-求并集、交集和差集" tabindex="-1"><a class="header-anchor" href="#_2-求并集、交集和差集" aria-hidden="true">#</a> 2. 求并集、交集和差集</h4><p>将数组的<code>map</code>和<code>filter</code>方法间接用于 <code>Set</code> ，可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回Set结构：{2, 4, 6}</span>

<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回Set结构：{2, 4}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 并集</span>
<span class="token keyword">let</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set {1, 2, 3, 4}</span>

<span class="token comment">// 交集</span>
<span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set {2, 3}</span>

<span class="token comment">// （a 相对于 b 的）差集</span>
<span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set {1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-改变原-set-结构" tabindex="-1"><a class="header-anchor" href="#_3-改变原-set-结构" aria-hidden="true">#</a> 3. 改变原 Set 结构</h4><p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用<code>Array.from</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set的值是2, 4, 6</span>

<span class="token comment">// 方法二</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set的值是2, 4, 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript-map" tabindex="-1"><a class="header-anchor" href="#javascript-map" aria-hidden="true">#</a> JavaScript Map</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>Map</strong> 是 <code>ES6</code> 新提供的数据结构，它类似于对象，也是键值对的集合，但是“ <strong>键</strong> ”的范围不限于字符串，<strong>各种类型的值</strong> （包括对象）都可以当作键。</p></div><p>JavaScript 的对象（<code>Object</code>），本质上是键值对的集合（<code>Hash</code> 结构），但是传统上只能用字符串当作键，这给它的使用带来了很大的限制。</p><p>为了解决这个问题，<code>ES6</code> 提供了 <code>Map</code> 数据结构。<code>Map</code>也是键值对的集合，但是各种类型的值都可以当作键。<code>Object</code> 结构提供了“字符串—值”的对应，<code>Map</code> 结构提供了“值—值”的对应，是一种更完善的 <code>Hash</code> 结构实现。</p><p>作为构造函数，Map 可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。除了数组，任何具有 <code>Iterator</code> 接口、且每个成员都是一个双元素的数组的数据结构都可以当作<code>Map</code>构造函数的参数。这就是说，<code>Set</code>和<code>Map</code>都可以用来生成新的 Map。</p><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如<code>0</code>和<code>-0</code>就是一个键，布尔值<code>true</code>和字符串<code>true</code>则是两个不同的键。另外，<code>undefined</code>和<code>null</code>也是两个不同的键。虽然<code>NaN</code>不严格相等于自身，但 Map 将其视为同一个键。</p><p>如果 Map 的键是对象，只有对同一个对象的引用，Map 结构才将其视为同一个键。Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用数组初始化</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Author&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用 Set 初始化</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
m1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 用 Map 初始化</span>
<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>
m3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token comment">// 键值为数字</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>

<span class="token comment">// 键值为布尔值</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 键值为undefined null</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token comment">// 键值为NaN</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>

<span class="token comment">// 键值为对象</span>
<span class="token comment">// 非同一个数组实例，内存地址不一样</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性和方法-1" tabindex="-1"><a class="header-anchor" href="#属性和方法-1" aria-hidden="true">#</a> 属性和方法</h3><p><code>Map</code> 结构的实例有以下属性：</p><ul><li><code>constructor</code>：构造函数，默认就是<code>Map</code>函数。</li><li><code>size</code>：返回<code>Map</code>实例的成员总数。</li></ul><p><code>Map</code> 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。</p><ul><li>操作方法： <ul><li><code>set(key, value)</code>：设置键名<code>key</code>对应的键值为<code>value</code>，返回 <code>Map</code> 结构本身，如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键；</li><li><code>get(key)</code>：读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>；</li><li><code>delete(value)</code>：删除某个键，返回<code>true</code>，如果删除失败，返回<code>false</code>；</li><li><code>has(value)</code>：返回一个布尔值，表示某个键是否在当前 <code>Map</code> 对象之中；</li><li><code>clear()</code>：清除所有成员，没有返回值；</li></ul></li><li>遍历方法： <ul><li><code>keys()</code>：返回键名的遍历器；</li><li><code>values()</code>：返回键值的遍历器；</li><li><code>entries()</code>：返回键值对的遍历器；</li><li><code>forEach()</code>：使用回调函数遍历每个成员；</li></ul></li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p><h3 id="数据结构的互相转换" tabindex="-1"><a class="header-anchor" href="#数据结构的互相转换" aria-hidden="true">#</a> 数据结构的互相转换</h3><h4 id="_1-map-转为数组" tabindex="-1"><a class="header-anchor" href="#_1-map-转为数组" aria-hidden="true">#</a> 1. Map 转为数组</h4><p>Map 转为数组最方便的方法，就是使用扩展运算符（<code>...</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token operator">...</span>myMap<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [ [ true, 7 ], [ { foo: 3 }, [ &#39;abc&#39; ] ] ]</span>

<span class="token punctuation">[</span><span class="token operator">...</span>myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// [true, { foo: 3 }]</span>

<span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// [7, [ &#39;abc&#39; ]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合数组的<code>map</code>方法、<code>filter</code>方法，可以实现 <code>Map</code> 的遍历和过滤（<code>Map</code> 本身没有<code>map</code>和<code>filter</code>方法）。<code>Map</code> 有一个<code>forEach</code>方法，与数组的<code>forEach</code>方法类似，也可以实现遍历</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map0<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 产生 Map 结构 {1 =&gt; &#39;a&#39;, 2 =&gt; &#39;b&#39;}</span>

<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map0<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 产生 Map 结构 {2 =&gt; &#39;_a&#39;, 4 =&gt; &#39;_b&#39;, 6 =&gt; &#39;_c&#39;}</span>

map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key: %s, Value: %s&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数组-转为-map" tabindex="-1"><a class="header-anchor" href="#_2-数组-转为-map" aria-hidden="true">#</a> 2. 数组 转为 Map</h4><p>将数组传入 <code>Map</code> 构造函数，就可以转为 <code>Map</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   true =&gt; 7,</span>
<span class="token comment">//   Object {foo: 3} =&gt; [&#39;abc&#39;]</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-map-转为对象" tabindex="-1"><a class="header-anchor" href="#_3-map-转为对象" aria-hidden="true">#</a> 3. Map 转为对象</h4><p>如果所有 <code>Map</code> 的键都是字符串，它可以无损地转为对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strMapToObj</span><span class="token punctuation">(</span><span class="token parameter">strMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> strMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strMapToObj</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { yes: true, no: false }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p><h4 id="_4-对象转为-map" tabindex="-1"><a class="header-anchor" href="#_4-对象转为-map" aria-hidden="true">#</a> 4. 对象转为 Map</h4><p>对象转为 <code>Map</code> 可以通过<code>Object.entries()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，也可以自己实现一个转换函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">objToStrMap</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> strMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		strMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> strMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">objToStrMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">yes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">no</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-map-转为-json" tabindex="-1"><a class="header-anchor" href="#_5-map-转为-json" aria-hidden="true">#</a> 5. Map 转为 JSON</h4><p><code>Map</code> 转为 <code>JSON</code> 要区分两种情况。一种情况是，<code>Map</code> 的键名都是字符串，这时可以选择转为对象 <code>JSON</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strMapToJson</span><span class="token punctuation">(</span><span class="token parameter">strMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">strMapToObj</span><span class="token punctuation">(</span>strMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strMapToJson</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;{&quot;yes&quot;:true,&quot;no&quot;:false}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种情况是，<code>Map</code> 的键名有非字符串，这时可以选择转为数组 <code>JSON</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mapToArrayJson</span><span class="token punctuation">(</span><span class="token parameter">map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mapToArrayJson</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-json-转为-map" tabindex="-1"><a class="header-anchor" href="#_6-json-转为-map" aria-hidden="true">#</a> 6. JSON 转为 Map</h4><p><code>JSON</code> 转为 <code>Map</code>，正常情况下，所有键名都是字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonToStrMap</span><span class="token punctuation">(</span><span class="token parameter">jsonStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">objToStrMap</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">jsonToStrMap</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;yes&quot;: true, &quot;no&quot;: false}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {&#39;yes&#39; =&gt; true, &#39;no&#39; =&gt; false}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，有一种特殊情况，整个 <code>JSON</code> 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 <code>Map</code>。这往往是 <code>Map</code> 转为数组 <code>JSON</code> 的逆操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonToMap</span><span class="token punctuation">(</span><span class="token parameter">jsonStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">jsonToMap</span><span class="token punctuation">(</span><span class="token string">&#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {true =&gt; 7, Object {foo: 3} =&gt; [&#39;abc&#39;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),dn=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),kn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),mn=n("td",{style:{"text-align":"center"}},"705",-1),hn={style:{"text-align":"left"}},bn={href:"https://leetcode.com/problems/design-hashset",target:"_blank",rel:"noopener noreferrer"},_n={style:{"text-align":"center"}},vn={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0705",target:"_blank",rel:"noopener noreferrer"},yn={style:{"text-align":"left"}},fn=n("code",null,"设计",-1),gn=n("code",null,"数组",-1),wn=n("code",null,"哈希表",-1),xn=n("code",null,"2+",-1),Mn={style:{"text-align":"left"}},jn=n("td",{style:{"text-align":"center"}},"706",-1),Sn={style:{"text-align":"left"}},Hn={href:"https://leetcode.com/problems/design-hashmap",target:"_blank",rel:"noopener noreferrer"},En={style:{"text-align":"center"}},Tn={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0706",target:"_blank",rel:"noopener noreferrer"},qn={style:{"text-align":"left"}},On=n("code",null,"设计",-1),Nn=n("code",null,"数组",-1),An=n("code",null,"哈希表",-1),Ln=n("code",null,"2+",-1),zn={style:{"text-align":"left"}},Jn=n("td",{style:{"text-align":"center"}},"217",-1),In={style:{"text-align":"left"}},Cn={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Dn={style:{"text-align":"center"}},Bn={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0217",target:"_blank",rel:"noopener noreferrer"},Vn={style:{"text-align":"left"}},Rn=n("code",null,"数组",-1),Fn=n("code",null,"哈希表",-1),Yn=n("code",null,"排序",-1),Pn={style:{"text-align":"left"}},Un=n("td",{style:{"text-align":"center"}},"219",-1),Kn={style:{"text-align":"left"}},Xn={href:"https://leetcode.com/problems/contains-duplicate-ii",target:"_blank",rel:"noopener noreferrer"},$n={style:{"text-align":"center"}},Gn={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0219",target:"_blank",rel:"noopener noreferrer"},Qn={style:{"text-align":"left"}},Wn=n("code",null,"数组",-1),Zn=n("code",null,"哈希表",-1),ns=n("code",null,"滑动窗口",-1),ss={style:{"text-align":"left"}},as=n("td",{style:{"text-align":"center"}},"220",-1),ts={style:{"text-align":"left"}},es={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},os=n("td",{style:{"text-align":"center"}},null,-1),cs={style:{"text-align":"left"}},ls=n("code",null,"数组",-1),ps=n("code",null,"桶排序",-1),is=n("code",null,"有序集合",-1),us=n("code",null,"2+",-1),rs={style:{"text-align":"left"}},ds=n("td",{style:{"text-align":"center"}},"1941",-1),ks={style:{"text-align":"left"}},ms={href:"https://leetcode.com/problems/check-if-all-characters-have-equal-number-of-occurrences",target:"_blank",rel:"noopener noreferrer"},hs=n("td",{style:{"text-align":"center"}},null,-1),bs={style:{"text-align":"left"}},_s=n("code",null,"哈希表",-1),vs=n("code",null,"字符串",-1),ys=n("code",null,"计数",-1),fs={style:{"text-align":"left"}},gs=n("td",{style:{"text-align":"center"}},"136",-1),ws={style:{"text-align":"left"}},xs={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},Ms={style:{"text-align":"center"}},js={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0136",target:"_blank",rel:"noopener noreferrer"},Ss={style:{"text-align":"left"}},Hs=n("code",null,"位运算",-1),Es=n("code",null,"数组",-1),Ts={style:{"text-align":"left"}},qs=n("td",{style:{"text-align":"center"}},"383",-1),Os={style:{"text-align":"left"}},Ns={href:"https://leetcode.com/problems/ransom-note",target:"_blank",rel:"noopener noreferrer"},As={style:{"text-align":"center"}},Ls={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0383",target:"_blank",rel:"noopener noreferrer"},zs={style:{"text-align":"left"}},Js=n("code",null,"哈希表",-1),Is=n("code",null,"字符串",-1),Cs=n("code",null,"计数",-1),Ds={style:{"text-align":"left"}},Bs=n("td",{style:{"text-align":"center"}},"349",-1),Vs={style:{"text-align":"left"}},Rs={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},Fs=n("td",{style:{"text-align":"center"}},null,-1),Ys={style:{"text-align":"left"}},Ps=n("code",null,"数组",-1),Us=n("code",null,"哈希表",-1),Ks=n("code",null,"双指针",-1),Xs=n("code",null,"2+",-1),$s={style:{"text-align":"left"}},Gs=n("td",{style:{"text-align":"center"}},"350",-1),Qs={style:{"text-align":"left"}},Ws={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},Zs=n("td",{style:{"text-align":"center"}},null,-1),na={style:{"text-align":"left"}},sa=n("code",null,"数组",-1),aa=n("code",null,"哈希表",-1),ta=n("code",null,"双指针",-1),ea=n("code",null,"2+",-1),oa={style:{"text-align":"left"}},ca=n("td",{style:{"text-align":"center"}},"36",-1),la={style:{"text-align":"left"}},pa={href:"https://leetcode.com/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"},ia={style:{"text-align":"center"}},ua={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0036",target:"_blank",rel:"noopener noreferrer"},ra={style:{"text-align":"left"}},da=n("code",null,"数组",-1),ka=n("code",null,"哈希表",-1),ma=n("code",null,"矩阵",-1),ha={style:{"text-align":"left"}},ba=n("td",{style:{"text-align":"center"}},"1",-1),_a={style:{"text-align":"left"}},va={href:"https://leetcode.com/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},ya={style:{"text-align":"center"}},fa={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0001",target:"_blank",rel:"noopener noreferrer"},ga={style:{"text-align":"left"}},wa=n("code",null,"数组",-1),xa=n("code",null,"哈希表",-1),Ma={style:{"text-align":"left"}},ja=n("td",{style:{"text-align":"center"}},"15",-1),Sa={style:{"text-align":"left"}},Ha={href:"https://leetcode.com/problems/3sum",target:"_blank",rel:"noopener noreferrer"},Ea={style:{"text-align":"center"}},Ta={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0015",target:"_blank",rel:"noopener noreferrer"},qa={style:{"text-align":"left"}},Oa=n("code",null,"数组",-1),Na=n("code",null,"双指针",-1),Aa=n("code",null,"排序",-1),La={style:{"text-align":"left"}},za=n("td",{style:{"text-align":"center"}},"18",-1),Ja={style:{"text-align":"left"}},Ia={href:"https://leetcode.com/problems/4sum",target:"_blank",rel:"noopener noreferrer"},Ca={style:{"text-align":"center"}},Da={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0018",target:"_blank",rel:"noopener noreferrer"},Ba={style:{"text-align":"left"}},Va=n("code",null,"数组",-1),Ra=n("code",null,"双指针",-1),Fa=n("code",null,"排序",-1),Ya={style:{"text-align":"left"}},Pa=n("td",{style:{"text-align":"center"}},"454",-1),Ua={style:{"text-align":"left"}},Ka={href:"https://leetcode.com/problems/4sum-ii",target:"_blank",rel:"noopener noreferrer"},Xa=n("td",{style:{"text-align":"center"}},null,-1),$a={style:{"text-align":"left"}},Ga=n("code",null,"数组",-1),Qa=n("code",null,"哈希表",-1),Wa={style:{"text-align":"left"}},Za=n("td",{style:{"text-align":"center"}},"41",-1),nt={style:{"text-align":"left"}},st={href:"https://leetcode.com/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},at={style:{"text-align":"center"}},tt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0041",target:"_blank",rel:"noopener noreferrer"},et={style:{"text-align":"left"}},ot=n("code",null,"数组",-1),ct=n("code",null,"哈希表",-1),lt={style:{"text-align":"left"}},pt=n("td",{style:{"text-align":"center"}},"128",-1),it={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},rt={style:{"text-align":"center"}},dt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0128",target:"_blank",rel:"noopener noreferrer"},kt={style:{"text-align":"left"}},mt=n("code",null,"并查集",-1),ht=n("code",null,"数组",-1),bt=n("code",null,"哈希表",-1),_t={style:{"text-align":"left"}},vt=n("td",{style:{"text-align":"center"}},"202",-1),yt={style:{"text-align":"left"}},ft={href:"https://leetcode.com/problems/happy-number",target:"_blank",rel:"noopener noreferrer"},gt={style:{"text-align":"center"}},wt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0202",target:"_blank",rel:"noopener noreferrer"},xt={style:{"text-align":"left"}},Mt=n("code",null,"哈希表",-1),jt=n("code",null,"数学",-1),St=n("code",null,"双指针",-1),Ht={style:{"text-align":"left"}},Et=n("td",{style:{"text-align":"center"}},"242",-1),Tt={style:{"text-align":"left"}},qt={href:"https://leetcode.com/problems/valid-anagram",target:"_blank",rel:"noopener noreferrer"},Ot={style:{"text-align":"center"}},Nt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0242",target:"_blank",rel:"noopener noreferrer"},At={style:{"text-align":"left"}},Lt=n("code",null,"哈希表",-1),zt=n("code",null,"字符串",-1),Jt=n("code",null,"排序",-1),It={style:{"text-align":"left"}},Ct=n("td",{style:{"text-align":"center"}},"205",-1),Dt={style:{"text-align":"left"}},Bt={href:"https://leetcode.com/problems/isomorphic-strings",target:"_blank",rel:"noopener noreferrer"},Vt={style:{"text-align":"center"}},Rt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0205",target:"_blank",rel:"noopener noreferrer"},Ft={style:{"text-align":"left"}},Yt=n("code",null,"哈希表",-1),Pt=n("code",null,"字符串",-1),Ut={style:{"text-align":"left"}},Kt=n("td",{style:{"text-align":"center"}},"442",-1),Xt={style:{"text-align":"left"}},$t={href:"https://leetcode.com/problems/find-all-duplicates-in-an-array",target:"_blank",rel:"noopener noreferrer"},Gt={style:{"text-align":"center"}},Qt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0442",target:"_blank",rel:"noopener noreferrer"},Wt={style:{"text-align":"left"}},Zt=n("code",null,"数组",-1),ne=n("code",null,"哈希表",-1),se={style:{"text-align":"left"}},ae=n("td",{style:{"text-align":"center"}},"剑指 Offer 61",-1),te={style:{"text-align":"left"}},ee={href:"https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof",target:"_blank",rel:"noopener noreferrer"},oe={style:{"text-align":"center"}},ce={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/jz_offer_61_1",target:"_blank",rel:"noopener noreferrer"},le={style:{"text-align":"left"}},pe=n("code",null,"数组",-1),ie=n("code",null,"排序",-1),ue={style:{"text-align":"left"}},re=n("td",{style:{"text-align":"center"}},"268",-1),de={style:{"text-align":"left"}},ke={href:"https://leetcode.com/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},me={style:{"text-align":"center"}},he={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0268",target:"_blank",rel:"noopener noreferrer"},be={style:{"text-align":"left"}},_e=n("code",null,"位运算",-1),ve=n("code",null,"数组",-1),ye=n("code",null,"哈希表",-1),fe=n("code",null,"3+",-1),ge={style:{"text-align":"left"}},we=n("td",{style:{"text-align":"center"}},"剑指 Offer 03",-1),xe={style:{"text-align":"left"}},Me={href:"https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"},je={style:{"text-align":"center"}},Se={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/jz_offer_03_1",target:"_blank",rel:"noopener noreferrer"},He={style:{"text-align":"left"}},Ee=n("code",null,"数组",-1),Te=n("code",null,"哈希表",-1),qe=n("code",null,"排序",-1),Oe={style:{"text-align":"left"}},Ne=n("td",{style:{"text-align":"center"}},"451",-1),Ae={style:{"text-align":"left"}},Le={href:"https://leetcode.com/problems/sort-characters-by-frequency",target:"_blank",rel:"noopener noreferrer"},ze={style:{"text-align":"center"}},Je={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0451",target:"_blank",rel:"noopener noreferrer"},Ie={style:{"text-align":"left"}},Ce=n("code",null,"哈希表",-1),De=n("code",null,"字符串",-1),Be=n("code",null,"桶排序",-1),Ve=n("code",null,"3+",-1),Re={style:{"text-align":"left"}},Fe=n("td",{style:{"text-align":"center"}},"49",-1),Ye={style:{"text-align":"left"}},Pe={href:"https://leetcode.com/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},Ue={style:{"text-align":"center"}},Ke={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0049",target:"_blank",rel:"noopener noreferrer"},Xe={style:{"text-align":"left"}},$e=n("code",null,"数组",-1),Ge=n("code",null,"哈希表",-1),Qe=n("code",null,"字符串",-1),We=n("code",null,"1+",-1),Ze={style:{"text-align":"left"}},no=n("td",{style:{"text-align":"center"}},"599",-1),so={style:{"text-align":"left"}},ao={href:"https://leetcode.com/problems/minimum-index-sum-of-two-lists",target:"_blank",rel:"noopener noreferrer"},to=n("td",{style:{"text-align":"center"}},null,-1),eo={style:{"text-align":"left"}},oo=n("code",null,"数组",-1),co=n("code",null,"哈希表",-1),lo=n("code",null,"字符串",-1),po={style:{"text-align":"left"}},io=n("td",{style:{"text-align":"center"}},"387",-1),uo={style:{"text-align":"left"}},ro={href:"https://leetcode.com/problems/first-unique-character-in-a-string",target:"_blank",rel:"noopener noreferrer"},ko=n("td",{style:{"text-align":"center"}},null,-1),mo={style:{"text-align":"left"}},ho=n("code",null,"队列",-1),bo=n("code",null,"哈希表",-1),_o=n("code",null,"字符串",-1),vo=n("code",null,"1+",-1),yo={style:{"text-align":"left"}},fo=n("td",{style:{"text-align":"center"}},"447",-1),go={style:{"text-align":"left"}},wo={href:"https://leetcode.com/problems/number-of-boomerangs",target:"_blank",rel:"noopener noreferrer"},xo=n("td",{style:{"text-align":"center"}},null,-1),Mo={style:{"text-align":"left"}},jo=n("code",null,"数组",-1),So=n("code",null,"哈希表",-1),Ho=n("code",null,"数学",-1),Eo={style:{"text-align":"left"}},To=n("td",{style:{"text-align":"center"}},"149",-1),qo={style:{"text-align":"left"}},Oo={href:"https://leetcode.com/problems/max-points-on-a-line",target:"_blank",rel:"noopener noreferrer"},No={style:{"text-align":"center"}},Ao={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0149",target:"_blank",rel:"noopener noreferrer"},Lo={style:{"text-align":"left"}},zo=n("code",null,"几何",-1),Jo=n("code",null,"数组",-1),Io=n("code",null,"哈希表",-1),Co=n("code",null,"1+",-1),Do={style:{"text-align":"left"}},Bo=n("td",{style:{"text-align":"center"}},"359",-1),Vo={style:{"text-align":"left"}},Ro={href:"https://leetcode.com/problems/logger-rate-limiter",target:"_blank",rel:"noopener noreferrer"},Fo=n("td",{style:{"text-align":"center"}},null,-1),Yo={style:{"text-align":"left"}},Po=n("code",null,"设计",-1),Uo=n("code",null,"哈希表",-1),Ko=n("code",null,"数据流",-1),Xo={style:{"text-align":"left"}},$o=n("td",{style:{"text-align":"center"}},"811",-1),Go={style:{"text-align":"left"}},Qo={href:"https://leetcode.com/problems/subdomain-visit-count",target:"_blank",rel:"noopener noreferrer"},Wo=n("td",{style:{"text-align":"center"}},null,-1),Zo={style:{"text-align":"left"}},nc=n("code",null,"数组",-1),sc=n("code",null,"哈希表",-1),ac=n("code",null,"字符串",-1),tc=n("code",null,"1+",-1),ec={style:{"text-align":"left"}};function oc(cc,lc){const o=l("ExternalLinkIcon"),u=l("MdDemo"),e=l("RouterLink"),c=l("font");return k(),m("div",null,[_,n("p",null,[s("在真实的情况下，要想找到一个不同的"),v,s("对应的哈希值都不一样的哈希函数，几乎是不可能的。即便像业界著名的 "),n("a",y,[s("MD5"),a(o)]),s("、"),n("a",f,[s("SHA"),a(o)]),s("、"),n("a",g,[s("CRC"),a(o)]),s(" 等哈希算法，也无法完全避免这种 "),w,s("。")]),x,a(u,{title:"相关题目",id:"md-demo-97"},{default:t(()=>[n("h4",M,[j,s(" 📌 "),n("a",S,[s("705. 设计哈希集合 - LeetCode"),a(o)])]),H,E,T,q,O,N,A,L,z,J,I,C,D,B,V,R,F]),code:t(()=>[Y]),_:1}),P,a(u,{title:"相关题目",id:"md-demo-195"},{default:t(()=>[n("h4",U,[K,s(" 📌 "),n("a",X,[s("706. 设计哈希映射 - LeetCode"),a(o)])]),$,G,Q,W,Z,nn,sn,an,tn,en,on,cn,ln,pn]),code:t(()=>[un]),_:1}),rn,p(" START TABLE "),p(" Please keep comment here to allow auto update "),p(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),dn,p(" prettier-ignore "),n("table",null,[kn,n("tbody",null,[n("tr",null,[mn,n("td",hn,[n("a",bn,[s("设计哈希集合"),a(o)])]),n("td",_n,[n("a",vn,[s("[✓]"),a(o)])]),n("td",yn,[a(e,{to:"/leetcode/outline/tag/design.html"},{default:t(()=>[fn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[gn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[wn]),_:1}),s(),xn]),n("td",Mn,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[jn,n("td",Sn,[n("a",Hn,[s("设计哈希映射"),a(o)])]),n("td",En,[n("a",Tn,[s("[✓]"),a(o)])]),n("td",qn,[a(e,{to:"/leetcode/outline/tag/design.html"},{default:t(()=>[On]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Nn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[An]),_:1}),s(),Ln]),n("td",zn,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Jn,n("td",In,[n("a",Cn,[s("存在重复元素"),a(o)])]),n("td",Dn,[n("a",Bn,[s("[✓]"),a(o)])]),n("td",Vn,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Rn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Fn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sorting.html"},{default:t(()=>[Yn]),_:1})]),n("td",Pn,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Un,n("td",Kn,[n("a",Xn,[s("存在重复元素 II"),a(o)])]),n("td",$n,[n("a",Gn,[s("[✓]"),a(o)])]),n("td",Qn,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Wn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Zn]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sliding-window.html"},{default:t(()=>[ns]),_:1})]),n("td",ss,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[as,n("td",ts,[n("a",es,[s("存在重复元素 III"),a(o)])]),os,n("td",cs,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[ls]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:t(()=>[ps]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/ordered-set.html"},{default:t(()=>[is]),_:1}),s(),us]),n("td",rs,[a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1})])]),n("tr",null,[ds,n("td",ks,[n("a",ms,[s("检查是否所有字符出现次数相同"),a(o)])]),hs,n("td",bs,[a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[_s]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[vs]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/counting.html"},{default:t(()=>[ys]),_:1})]),n("td",fs,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[gs,n("td",ws,[n("a",xs,[s("只出现一次的数字"),a(o)])]),n("td",Ms,[n("a",js,[s("[✓]"),a(o)])]),n("td",Ss,[a(e,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:t(()=>[Hs]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Es]),_:1})]),n("td",Ts,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[qs,n("td",Os,[n("a",Ns,[s("赎金信"),a(o)])]),n("td",As,[n("a",Ls,[s("[✓]"),a(o)])]),n("td",zs,[a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Js]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[Is]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/counting.html"},{default:t(()=>[Cs]),_:1})]),n("td",Ds,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Bs,n("td",Vs,[n("a",Rs,[s("两个数组的交集"),a(o)])]),Fs,n("td",Ys,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Ps]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Us]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/two-pointers.html"},{default:t(()=>[Ks]),_:1}),s(),Xs]),n("td",$s,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Gs,n("td",Qs,[n("a",Ws,[s("两个数组的交集 II"),a(o)])]),Zs,n("td",na,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[sa]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[aa]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/two-pointers.html"},{default:t(()=>[ta]),_:1}),s(),ea]),n("td",oa,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[ca,n("td",la,[n("a",pa,[s("有效的数独"),a(o)])]),n("td",ia,[n("a",ua,[s("[✓]"),a(o)])]),n("td",ra,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[da]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[ka]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/matrix.html"},{default:t(()=>[ma]),_:1})]),n("td",ha,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[ba,n("td",_a,[n("a",va,[s("两数之和"),a(o)])]),n("td",ya,[n("a",fa,[s("[✓]"),a(o)])]),n("td",ga,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[wa]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[xa]),_:1})]),n("td",Ma,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[ja,n("td",Sa,[n("a",Ha,[s("三数之和"),a(o)])]),n("td",Ea,[n("a",Ta,[s("[✓]"),a(o)])]),n("td",qa,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Oa]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/two-pointers.html"},{default:t(()=>[Na]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sorting.html"},{default:t(()=>[Aa]),_:1})]),n("td",La,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[za,n("td",Ja,[n("a",Ia,[s("四数之和"),a(o)])]),n("td",Ca,[n("a",Da,[s("[✓]"),a(o)])]),n("td",Ba,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Va]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/two-pointers.html"},{default:t(()=>[Ra]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sorting.html"},{default:t(()=>[Fa]),_:1})]),n("td",Ya,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Pa,n("td",Ua,[n("a",Ka,[s("四数相加 II"),a(o)])]),Xa,n("td",$a,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Ga]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Qa]),_:1})]),n("td",Wa,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Za,n("td",nt,[n("a",st,[s("缺失的第一个正数"),a(o)])]),n("td",at,[n("a",tt,[s("[✓]"),a(o)])]),n("td",et,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[ot]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[ct]),_:1})]),n("td",lt,[a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1})])]),n("tr",null,[pt,n("td",it,[n("a",ut,[s("最长连续序列"),a(o)])]),n("td",rt,[n("a",dt,[s("[✓]"),a(o)])]),n("td",kt,[a(e,{to:"/leetcode/outline/tag/union-find.html"},{default:t(()=>[mt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[ht]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[bt]),_:1})]),n("td",_t,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[vt,n("td",yt,[n("a",ft,[s("快乐数"),a(o)])]),n("td",gt,[n("a",wt,[s("[✓]"),a(o)])]),n("td",xt,[a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Mt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/math.html"},{default:t(()=>[jt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/two-pointers.html"},{default:t(()=>[St]),_:1})]),n("td",Ht,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Et,n("td",Tt,[n("a",qt,[s("有效的字母异位词"),a(o)])]),n("td",Ot,[n("a",Nt,[s("[✓]"),a(o)])]),n("td",At,[a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Lt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[zt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sorting.html"},{default:t(()=>[Jt]),_:1})]),n("td",It,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Ct,n("td",Dt,[n("a",Bt,[s("同构字符串"),a(o)])]),n("td",Vt,[n("a",Rt,[s("[✓]"),a(o)])]),n("td",Ft,[a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Yt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[Pt]),_:1})]),n("td",Ut,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Kt,n("td",Xt,[n("a",$t,[s("数组中重复的数据"),a(o)])]),n("td",Gt,[n("a",Qt,[s("[✓]"),a(o)])]),n("td",Wt,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Zt]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[ne]),_:1})]),n("td",se,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[ae,n("td",te,[n("a",ee,[s("扑克牌中的顺子"),a(o)])]),n("td",oe,[n("a",ce,[s("[✓]"),a(o)])]),n("td",le,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[pe]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sorting.html"},{default:t(()=>[ie]),_:1})]),n("td",ue,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[re,n("td",de,[n("a",ke,[s("丢失的数字"),a(o)])]),n("td",me,[n("a",he,[s("[✓]"),a(o)])]),n("td",be,[a(e,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:t(()=>[_e]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[ve]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[ye]),_:1}),s(),fe]),n("td",ge,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[we,n("td",xe,[n("a",Me,[s("数组中重复的数字"),a(o)])]),n("td",je,[n("a",Se,[s("[✓]"),a(o)])]),n("td",He,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Ee]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Te]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/sorting.html"},{default:t(()=>[qe]),_:1})]),n("td",Oe,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[Ne,n("td",Ae,[n("a",Le,[s("根据字符出现频率排序"),a(o)])]),n("td",ze,[n("a",Je,[s("[✓]"),a(o)])]),n("td",Ie,[a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Ce]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[De]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:t(()=>[Be]),_:1}),s(),Ve]),n("td",Re,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[Fe,n("td",Ye,[n("a",Pe,[s("字母异位词分组"),a(o)])]),n("td",Ue,[n("a",Ke,[s("[✓]"),a(o)])]),n("td",Xe,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[$e]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Ge]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[Qe]),_:1}),s(),We]),n("td",Ze,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[no,n("td",so,[n("a",ao,[s("两个列表的最小索引总和"),a(o)])]),to,n("td",eo,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[oo]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[co]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[lo]),_:1})]),n("td",po,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[io,n("td",uo,[n("a",ro,[s("字符串中的第一个唯一字符"),a(o)])]),ko,n("td",mo,[a(e,{to:"/leetcode/outline/tag/queue.html"},{default:t(()=>[ho]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[bo]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[_o]),_:1}),s(),vo]),n("td",yo,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[fo,n("td",go,[n("a",wo,[s("回旋镖的数量"),a(o)])]),xo,n("td",Mo,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[jo]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[So]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/math.html"},{default:t(()=>[Ho]),_:1})]),n("td",Eo,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[To,n("td",qo,[n("a",Oo,[s("直线上最多的点数"),a(o)])]),n("td",No,[n("a",Ao,[s("[✓]"),a(o)])]),n("td",Lo,[a(e,{to:"/leetcode/outline/tag/geometry.html"},{default:t(()=>[zo]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[Jo]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Io]),_:1}),s(),Co]),n("td",Do,[a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1})])]),n("tr",null,[Bo,n("td",Vo,[n("a",Ro,[s("日志速率限制器"),a(o)])]),Fo,n("td",Yo,[a(e,{to:"/leetcode/outline/tag/design.html"},{default:t(()=>[Po]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[Uo]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/data-stream.html"},{default:t(()=>[Ko]),_:1})]),n("td",Xo,[a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1})])]),n("tr",null,[$o,n("td",Go,[n("a",Qo,[s("子域名访问计数"),a(o)])]),Wo,n("td",Zo,[a(e,{to:"/leetcode/outline/tag/array.html"},{default:t(()=>[nc]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/hash-table.html"},{default:t(()=>[sc]),_:1}),s(),a(e,{to:"/leetcode/outline/tag/string.html"},{default:t(()=>[ac]),_:1}),s(),tc]),n("td",ec,[a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])])])])])}const uc=d(b,[["render",oc],["__file","hash_table.html.vue"]]);export{uc as default};
