import{_ as c,r as p,o as i,c as l,a as n,b as s,d as a,w as u,e}from"./app-mvY9N9Pc.js";const r="/leetcode-js/assets/react-13-BFJv-3es.png",d="/leetcode-js/assets/react-12-EMRSXrKY.png",k="/leetcode-js/assets/react-14-P-ylB5iJ.png",v={},f=n("h1",{id:"_15-实现-useeffect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-实现-useeffect","aria-hidden":"true"},"#"),s(" 15. 实现 useEffect")],-1),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"摘要",-1),y=n("ul",null,[n("li",null,"定义数据结构"),n("li",null,"实现 useEffect"),n("li",null,"实现工作流程")],-1),g={href:"https://github.com/2xiao/my-react/tree/v1.15",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"git tag v1.15",-1),h=e(`<p><code>useEffect</code> 是 React Hooks 中的一个关键函数，用于在函数式组件中执行副作用操作。副作用指的是组件之外的操作，例如数据获取、订阅事件、手动操作 DOM 等。<code>useEffect</code> 可以在组件的渲染过程中执行这些操作，并且可以控制何时执行以及是否需要清理。</p><p><code>useEffect</code> 函数的基本语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 副作用操作 creact 函数</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// destroy 函数</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一个参数是一个回调函数，它包含需要执行的副作用代码（create 函数）；</li><li>回调函数可以返回一个清理函数（destroy 函数），用于清理副作用（比如取消订阅、清除定时器等）；</li><li>第二个参数是一个数组，用于指定依赖项。当这些依赖项发生变化时，将重新运行回调函数；如果省略第二个参数，则默认每次渲染都会运行回调函数。</li></ul><h2 id="_1-定义数据结构" tabindex="-1"><a class="header-anchor" href="#_1-定义数据结构" aria-hidden="true">#</a> 1. 定义数据结构</h2><p>我们定义一个 <code>Effect</code> 接口，用该接口描述 <code>useEffect</code> 函数的数据结构，其中：</p><ul><li><code>tag</code>：表示副作用类型的标记，React 中好几种不同的副作用，如 <code>Passive</code>、<code>Layout</code> 等；</li><li><code>create</code>：表示在组件渲染完成后执行的副作用函数，是一个无参数无返回值的函数；</li><li><code>destroy</code>：表示在组件被销毁前执行的清理函数，也是一个无参数无返回值的函数；</li><li><code>deps</code>：包含此副作用函数依赖的值，这些值的变化将触发副作用函数的重新执行，是一个数组；</li><li><code>next</code>：是一个指向下一个副作用的指针，这样可以将多个副作用链接在一起，方便查找遍历。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Effect</span> <span class="token punctuation">{</span>
	tag<span class="token operator">:</span> EffectTags<span class="token punctuation">;</span>
	create<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
	destroy<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
	deps<span class="token operator">:</span> EffectDeps<span class="token punctuation">;</span>
	next<span class="token operator">:</span> Effect <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">EffectCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">EffectDeps</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),w=n("code",null,"memoizedState",-1),x=n("code",null,"next",-1),P=n("code",null,"memoizedState",-1),_=e('<p>而我们刚才定义的 <code>Effect</code> 数据就是一种保存在 <code>hook.memoizedState</code> 中的 Hook 数据。</p><p>我们注意到 <code>Effect</code> 数据结构中也有一个 <code>next</code> 指针，它指向下一个副作用的 <code>hook.memoizedState</code>，这样就将所有的副作用连接起来，形成了一个副作用链表。</p><p>后续在执行副作用回调函数时，就不用遍历 Hooks 链表，在里面找 effect 类型的 Hook，而只需直接遍历副作用链表即可。</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接着，在新建的 <code>hookEffectTags.ts</code> 文件中定义副作用类型(<code>Effect.tag</code>)，其中：</p><ul><li><code>Passive</code>：代表 <code>useEffect</code> 的副作用类型；</li><li><code>Layout</code>：代表另一种 Hook <code>useLayoutEffect</code> 的副作用类型；</li><li><code>HookHasEffect</code>：表示本次更新中需要触发 effect 的回调函数；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/hookEffectTags.ts</span>
<span class="token comment">// 保存在 Effect.tag 中的 tags</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EffectTags</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token comment">// Fiber 节点本次更新存在副作用</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> HookHasEffect <span class="token operator">=</span> <span class="token number">0b0001</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> Passive <span class="token operator">=</span> <span class="token number">0b0010</span><span class="token punctuation">;</span> <span class="token comment">// useEffect</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Layout <span class="token operator">=</span> <span class="token number">0b0100</span><span class="token punctuation">;</span> <span class="token comment">// useLayoutEffect</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>fiberFlags.ts</code> 文件中新增更新标记 flags，其中：</p><ul><li><code>PassiveEffect</code>：代表 Fiber 节点本次更新存在副作用；</li><li><code>PassiveMask</code>：代表需要执行 <code>useEffect</code> 回调函数的时机，分别是：依赖变化时，或函数组件卸载时；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberFlags.ts</span>
<span class="token comment">// Fiber 节点本次更新存在副作用</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> PassiveEffect <span class="token operator">=</span> <span class="token number">0b0010000</span><span class="token punctuation">;</span>
<span class="token comment">// 执行 useEffect 回调函数的时机：依赖变化时，或函数组件卸载时</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> PassiveMask <span class="token operator">=</span> PassiveEffect <span class="token operator">|</span> ChildDeletion<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EffectTags</code> 和 <code>Flags</code> 两种二进制位掩码的关系如下图所示：</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>对于 FiberNode 的 Hooks 链表中的 effect 来说： <ul><li>用<code>Passive</code> 和 <code>useEffect</code> 代表不同类型的 effect；</li><li>用 <code>HookHasEffect</code> 代表本次更新中需要触发 Effect 的回调函数；</li></ul></li><li>对于一个 FiberNode 来说： <ul><li>若 Hooks 链表中的 effect 有 <code>Passive | HookHasEffect</code> 两个标识，<code>FiberNode.flags</code> 才会新增 <code>PassiveEffect</code>字段，代表本次更新中存在副作用；</li><li>否则，若 Hooks 链表中的 effect 只有 <code>Passive</code> 而没有 <code>HookHasEffect</code> 标识，则本次更新不执行回调函数，没有副作用；</li></ul></li></ul><h2 id="_2-实现-useeffect" tabindex="-1"><a class="header-anchor" href="#_2-实现-useeffect" aria-hidden="true">#</a> 2. 实现 useEffect</h2><p>和实现 <code>useState</code> 一样，我们也需要根据不同的上下文环境，实现不同的 <code>useEffect</code>：</p><ul><li>在组件挂载 mount 阶段的 Hooks 集合 <code>HooksDispatcherOnMount</code> 中实现 <code>mountEffect</code>;</li><li>在组件更新 update 阶段的 Hooks 集合 <code>HooksDispatcherOnUpdate</code> 中实现 <code>updateEffect</code>;</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">const</span> HooksDispatcherOnMount<span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token punctuation">{</span>
	useState<span class="token operator">:</span> mountState<span class="token punctuation">,</span>
	useEffect<span class="token operator">:</span> mountEffect
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> HooksDispatcherOnUpdate<span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token punctuation">{</span>
	useState<span class="token operator">:</span> updateState<span class="token punctuation">,</span>
	useEffect<span class="token operator">:</span> updateEffect
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也需要在 <code>Dispatcher</code> 中增加 <code>useEffect</code> 字段：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react/src/currentDispatcher.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">{</span>
	useState<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function-variable function">useEffect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span> deps<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在 <code>react</code> 包中导出 <code>useEffect</code> 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useEffect<span class="token operator">:</span> Dispatcher<span class="token punctuation">[</span><span class="token string">&#39;useEffect&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>creact<span class="token punctuation">,</span> deps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> dispatcher <span class="token operator">=</span> <span class="token function">resolveDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> dispatcher<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span>creact<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-实现-mounteffect" tabindex="-1"><a class="header-anchor" href="#_1-实现-mounteffect" aria-hidden="true">#</a> 1. 实现 mountEffect</h3><p><code>mountEffect</code> 函数接受两个参数：</p><ul><li><code>create</code>：表示在组件挂载阶段或更新阶段后执行的副作用函数，它是一个无参数无返回值的函数。</li><li><code>deps</code>：表示副作用函数所依赖的值的集合，当这些值发生变化时，副作用函数将重新执行，是一个数组。</li></ul><p><code>useEffect</code> 的回调函数会在组件挂载时或者依赖变化时执行，因此在 <code>mountEffect</code> 函数中，我们需要给当前 FiberNode 增加一个 <code>PassiveEffect</code> 更新标记。</p><p>接着我们要创建一个新的 Effect 对象，并将其添加到当前正在处理的 Hook 上，Effect 对象的 tag 为 <code>Passive | HookHasEffect</code>，代表本次更新中需要触发 <code>useEffect</code> 的回调函数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">function</span> <span class="token function">mountEffect</span><span class="token punctuation">(</span>create<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span> deps<span class="token operator">:</span> EffectDeps <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 当前正在工作的 useEffect</span>
	<span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> nextDeps <span class="token operator">=</span> deps <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> deps<span class="token punctuation">;</span>

	<span class="token punctuation">(</span>currentlyRenderingFiber <span class="token keyword">as</span> FiberNode<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">|=</span> PassiveEffect<span class="token punctuation">;</span>
	hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token function">pushEffect</span><span class="token punctuation">(</span>
		Passive <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span>
		create<span class="token punctuation">,</span>
		<span class="token keyword">undefined</span><span class="token punctuation">,</span>
		nextDeps
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pushEffect</code> 函数的作用是将 <code>useEffect</code> 副作用按照执行顺序构建成一个副作用链表，并将链表保存在节点的 <code>updateQueue</code> 属性上。</p><ul><li>首先，创建一个新的 <code>Effect</code> 对象，其属性包括了副作用的类型（<code>tag</code>）、副作用函数（<code>create</code> 和 <code>destroy</code>）、依赖项（<code>deps</code>）以及下一个副作用节点的引用（<code>next</code>）；</li><li>然后，获取当前正在渲染的 Fiber 节点，并从中获取更新队列（<code>updateQueue</code>）；</li><li>为 <code>updateQueue</code> 增加了一个 <code>lastEffect</code> 字段，用于储存构建的副作用链表；</li><li>如果当前 Fiber 节点没有更新队列，说明这是首次渲染该组件，因此需要创建一个新的更新队列，并将新的副作用设置为链表的唯一节点；</li><li>如果当前 Fiber 节点已经有更新队列，则将新的副作用节点添加到链表的尾部，并将其 <code>next</code> 指向链表的头部，形成一条环状链表，方便更新和查找。</li><li>最后返回创建的副作用节点。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">function</span> <span class="token function">pushEffect</span><span class="token punctuation">(</span>
	tag<span class="token operator">:</span> EffectTags<span class="token punctuation">,</span>
	create<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
	destroy<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
	deps<span class="token operator">:</span> EffectDeps
<span class="token punctuation">)</span><span class="token operator">:</span> Effect <span class="token punctuation">{</span>
	<span class="token keyword">const</span> effect<span class="token operator">:</span> Effect <span class="token operator">=</span> <span class="token punctuation">{</span>
		tag<span class="token punctuation">,</span>
		create<span class="token punctuation">,</span>
		destroy<span class="token punctuation">,</span>
		deps<span class="token punctuation">,</span>
		next<span class="token operator">:</span> <span class="token keyword">null</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> fiber <span class="token operator">=</span> currentlyRenderingFiber <span class="token keyword">as</span> FiberNode<span class="token punctuation">;</span>
	<span class="token keyword">const</span> updateQueue <span class="token operator">=</span> fiber<span class="token punctuation">.</span>updateQueue <span class="token keyword">as</span> FCUpdateQueue<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> newUpdateQueue <span class="token operator">=</span> <span class="token function">creactFCUpdateQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		effect<span class="token punctuation">.</span>next <span class="token operator">=</span> effect<span class="token punctuation">;</span>
		newUpdateQueue<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
		fiber<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> newUpdateQueue<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> lastEffect <span class="token operator">=</span> updateQueue<span class="token punctuation">.</span>lastEffect<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>lastEffect <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			effect<span class="token punctuation">.</span>next <span class="token operator">=</span> effect<span class="token punctuation">;</span>
			updateQueue<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> firstEffect <span class="token operator">=</span> lastEffect<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			lastEffect<span class="token punctuation">.</span>next <span class="token operator">=</span> effect<span class="token punctuation">;</span>
			effect<span class="token punctuation">.</span>next <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>
			updateQueue<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> effect<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义函数组件的 FCUpdateQueue 数据结构</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FCUpdateQueue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">UpdateQueue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
	lastEffect<span class="token operator">:</span> Effect <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-实现-updateeffect" tabindex="-1"><a class="header-anchor" href="#_2-实现-updateeffect" aria-hidden="true">#</a> 2. 实现 updateEffect</h3><p><code>updateEffect</code> 和 <code>mountEffect</code> 的实现原理类似，不同的地方是：</p><ul><li>在组件更新阶段，需要增加判断，只有依赖变化时，才标记回调函数执行；</li><li>在组件更新阶段，在新的副作用函数执行之前，需要清理之前的副作用；</li></ul><p>具体来说，当组件重新渲染时，首先会检查 <code>useEffect</code> 的依赖项是否发生了变化：</p><ul><li>如果依赖项没有变化，将不会执行新的副作用函数，而是继续使用之前创建的副作用。在这种情况下，为了确保旧的副作用函数能够被正确地清理，需要将之前的副作用的清理函数（即 <code>prevEffect.destroy</code>）传递给新创建的副作用函数；</li><li>如果依赖项发生了变化，会销毁之前的副作用函数并创建新的副作用函数。在这种情况下，需要确保旧的副作用函数能够被正确地清理，然后再创建新的副作用函数。因此，也需要将旧的副作用函数的清理函数（即 <code>prevEffect.destroy</code>）传递给新创建的副作用函数，以便在创建新的副作用函数之前执行清理操作。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiberHooks.ts</span>
<span class="token keyword">function</span> <span class="token function">updateEffect</span><span class="token punctuation">(</span>create<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span> deps<span class="token operator">:</span> EffectDeps <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 当前正在工作的 useEffect</span>
	<span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> nextDeps <span class="token operator">=</span> deps <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token punctuation">(</span>deps <span class="token keyword">as</span> EffectDeps<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> destroy<span class="token operator">:</span> EffectCallback <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>currentHook <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> prevEffect <span class="token operator">=</span> currentHook<span class="token punctuation">.</span>memoizedState <span class="token keyword">as</span> Effect<span class="token punctuation">;</span>
		destroy <span class="token operator">=</span> prevEffect<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nextDeps <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 浅比较依赖</span>
			<span class="token keyword">const</span> prevDeps <span class="token operator">=</span> prevEffect<span class="token punctuation">.</span>deps<span class="token punctuation">;</span>
			<span class="token comment">// 浅比较相等，依赖没有变化</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areHookInputsEqual</span><span class="token punctuation">(</span>nextDeps<span class="token punctuation">,</span> prevDeps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token function">pushEffect</span><span class="token punctuation">(</span>Passive<span class="token punctuation">,</span> create<span class="token punctuation">,</span> destroy<span class="token punctuation">,</span> nextDeps<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 浅比较不相等，依赖变化了</span>
			<span class="token punctuation">(</span>currentlyRenderingFiber <span class="token keyword">as</span> FiberNode<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">|=</span> PassiveEffect<span class="token punctuation">;</span>
			hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token function">pushEffect</span><span class="token punctuation">(</span>
				Passive <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span>
				create<span class="token punctuation">,</span>
				destroy<span class="token punctuation">,</span>
				nextDeps
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">areHookInputsEqual</span><span class="token punctuation">(</span>
	nextDeps<span class="token operator">:</span> EffectDeps<span class="token punctuation">,</span>
	prevDeps<span class="token operator">:</span> EffectDeps
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>nextDeps <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> prevDeps <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextDeps<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> prevDeps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">is</span><span class="token punctuation">(</span>nextDeps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> prevDeps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-实现工作流程" tabindex="-1"><a class="header-anchor" href="#_3-实现工作流程" aria-hidden="true">#</a> 3. 实现工作流程</h2><p>接着我们实现 <code>useEffect</code> 的工作流程，将 <code>useEffect</code> 加入已有的更新流程中。</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-调度副作用" tabindex="-1"><a class="header-anchor" href="#_1-调度副作用" aria-hidden="true">#</a> 1. 调度副作用</h3>',40),H={href:"https://github.com/facebook/react/tree/main/packages/scheduler",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i <span class="token parameter variable">-w</span> scheduler
<span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span> @types/scheduler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 commitRoot 函数中，使用 Scheduler 来调度副作用，使得回调函数在 <code>setTimeout</code> 中以 NormalPriority 优先级被调度执行。</p><ul><li>使用 <code>rootDoesHasPassiveEffects</code> 标志位来表示是否正在调度副作用，避免重复调度；</li><li>通过检查 <code>finishedWork</code> 中的标志位（<code>flags</code> 和 <code>subtreeFlags</code>），判断 Fiber 树中是否存在副作用；</li><li>如果存在副作用，那么将 <code>rootDoesHasPassiveEffects</code> 设置为 <code>true</code>，表示根节点存在副作用；</li><li>接着调用 <code>scheduleCallback</code> 函数来调度执行副作用。副作用的执行被安排在下一个事件循环中，以确保在当前任务执行完成后执行副作用。副作用的调度优先级是 <code>NormalPriority</code>，表示一般的正常优先级；</li><li>在回调函数中，执行 <code>flushPassiveEffects</code> 函数来执行副作用。这个函数会执行根节点中挂起的副作用；</li><li>最后重置 <code>rootDoesHasPassiveEffects</code> 为 <code>false</code>，并再次确保根节点被调度；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/workLoop.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
	unstable_scheduleCallback <span class="token keyword">as</span> scheduleCallback<span class="token punctuation">,</span>
	unstable_NormalPriority <span class="token keyword">as</span> NormalPriority
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;scheduler&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> rootDoesHasPassiveEffects<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token operator">:</span> FiberRootNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> flags<span class="token punctuation">,</span> subtreeFlags <span class="token punctuation">}</span> <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>

	<span class="token comment">// 判断 Fiber 树是否存在副作用</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		<span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> PassiveMask<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags <span class="token operator">||</span>
		<span class="token punctuation">(</span>subtreeFlags <span class="token operator">&amp;</span> PassiveMask<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootDoesHasPassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			rootDoesHasPassiveEffects <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token comment">// 调度副作用</span>
			<span class="token comment">// 回调函数在 setTimeout 中以 NormalPriority 优先级被调度执行</span>
			<span class="token function">scheduleCallback</span><span class="token punctuation">(</span>NormalPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token comment">// 执行副作用</span>
				<span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>pendingPassiveEffects<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	rootDoesHasPassiveEffects <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-收集回调" tabindex="-1"><a class="header-anchor" href="#_2-收集回调" aria-hidden="true">#</a> 2. 收集回调</h3><p>我们需要收集两类回调：</p><ul><li>unmount 时执行的 destroy 函数；</li><li>update 时执行的 create 函数；</li></ul><p>将这个收集到的回调保存在 root 节点上，为 <code>FiberRootNode</code> 增加一个 <code>pendingPassiveEffects</code> 字段用来存放，该字段里有一个 <code>unmount</code> 数组，保存着收集到的 destroy 函数；和一个 <code>update</code> 数组，保存着收集到的 create 函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/fiber.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Effect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fiberHooks&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FiberRootNode</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	pendingPassiveEffects<span class="token operator">:</span> PendingPassiveEffects<span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>container<span class="token operator">:</span> Container<span class="token punctuation">,</span> hostRootFiber<span class="token operator">:</span> FiberNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>pendingPassiveEffects <span class="token operator">=</span> <span class="token punctuation">{</span>
			unmount<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			update<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PendingPassiveEffects</span> <span class="token punctuation">{</span>
	unmount<span class="token operator">:</span> Effect<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	update<span class="token operator">:</span> Effect<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>收集 <code>useEffect</code> 回调函数的时机在 Commit 阶段的两个关键时刻：</p><ol><li><p>在 <code>commitMutationEffectsOnFiber</code> 函数中，处理 Fiber 节点的更新 flags 时：</p><ul><li>当一个 Fiber 节点被更新时，可能会触发新的副作用或清理旧的副作用，因此需要在节点更新时收集；</li><li>首先会检查该节点的更新标志位（flags），如果节点的标志位中包含了 <code>PassiveEffect</code>，则意味着该节点上存在需要处理的副作用；</li><li>此时收集的回调函数将保存在 <code>pendingPassiveEffects.update</code> 中；</li></ul></li><li><p>在 <code>commitDeletion</code> 函数中，删除 Fiber 节点及其关联子树时：</p><ul><li>当一个 Fiber 节点被删除时，需要清理该节点及其子树的相关资源，包括执行副作用的清理操作，特别是在函数组件中的 <code>useEffect</code> 副作用；</li><li>为了保证组件被正确地卸载并清理相关资源，需要在节点被删除时收集；</li><li>此时收集的回调函数将保存在 <code>pendingPassiveEffects.unmount</code> 中；</li></ul></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/commitWork.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitMutationEffectsOnFiber</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	finishedWork<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	root<span class="token operator">:</span> FiberRootNode
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> flags <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
	<span class="token comment">// ...</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> PassiveEffect<span class="token punctuation">)</span> <span class="token operator">!==</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 收集回调</span>
		<span class="token function">commitPassiveEffect</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		finishedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>PassiveEffect<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 删除节点及其子树</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitDeletion</span> <span class="token operator">=</span> <span class="token punctuation">(</span>childToDelete<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span> root<span class="token operator">:</span> FiberRootNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token comment">// 递归遍历子树</span>
	<span class="token function">commitNestedUnmounts</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">,</span> <span class="token punctuation">(</span>unmountFiber<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>unmountFiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> FunctionComponent<span class="token operator">:</span>
				<span class="token function">commitPassiveEffect</span><span class="token punctuation">(</span>unmountFiber<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token string">&#39;unmount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>收集回调的工作由 <code>commitPassiveEffect</code> 函数负责，它将当前 Fiber 节点对应类型的副作用回调函数收集到根节点的 <code>pendingPassiveEffects</code>，以便稍后在适当的时机执行这些副作用。</p><p>下面是 <code>commitPassiveEffect</code> 函数的实现原理：</p><ul><li>首先，函数会判断当前 Fiber 节点的类型是否是函数组件（<code>FunctionComponent</code>）。如果不是函数组件，则直接返回，因为只有函数组件才会有 <code>useEffect</code> 副作用；</li><li>如果是函数组件，函数会进一步检查当前节点的标志位，只有当节点的标志位中包含 <code>PassiveEffect</code> 标志位时，才会处理副作用；</li><li>获取当前 Fiber 节点的副作用链表 <code>updateQueue.lastEffect</code>，并将其推入根节点 <code>pendingPassiveEffects</code> 相应类型的数组中。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/commitWork.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitPassiveEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	fiber<span class="token operator">:</span> FiberNode<span class="token punctuation">,</span>
	root<span class="token operator">:</span> FiberRootNode<span class="token punctuation">,</span>
	type<span class="token operator">:</span> <span class="token keyword">keyof</span> PendingPassiveEffects
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		fiber<span class="token punctuation">.</span>tag <span class="token operator">!==</span> FunctionComponent <span class="token operator">||</span>
		<span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">&#39;update&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> PassiveEffect<span class="token punctuation">)</span> <span class="token operator">==</span> NoFlags<span class="token punctuation">)</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> updateQueue <span class="token operator">=</span> fiber<span class="token punctuation">.</span>updateQueue <span class="token keyword">as</span> FCUpdateQueue<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue<span class="token punctuation">.</span>lastEffect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> __DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;commitPassiveEffect: updateQueue.lastEffect is null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			root<span class="token punctuation">.</span>pendingPassiveEffects<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>updateQueue<span class="token punctuation">.</span>lastEffect <span class="token keyword">as</span> Effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-执行副作用" tabindex="-1"><a class="header-anchor" href="#_3-执行副作用" aria-hidden="true">#</a> 3. 执行副作用</h3><p>最后，我们来实现被 <code>scheduleCallback</code> 调度执行的 flushPassiveEffects 函数，它负责按照特定顺序，依次执行之前收集到的所有副作用回调函数，依次为：</p><p><code>flushPassiveEffects</code> 函数的主要作用是执行收集到的所有副作用回调函数，并按照特定顺序依次执行这些回调函数。具体来说，它会执行以下几个步骤：</p><ol><li><p><strong>触发所有 unmount 中的 destroy 回调：</strong> 首先，遍历 <code>pendingPassiveEffects.unmount</code> 数组中的每个 destroy 回调函数，逐个执行并清理与之相关的资源，这些回调函数通常是在组件卸载时触发的清理函数。</p></li><li><p><strong>触发所有上次更新的 destroy 回调：</strong> 然后，遍历 <code>pendingPassiveEffects.update</code> 数组中的每个 destroy 回调函数，执行上次更新时产生的清理函数。</p></li><li><p><strong>触发所有这次更新的 create 回调：</strong> 接着，再次遍历 <code>pendingPassiveEffects.update</code> 数组中的每个 create 回调函数，执行这次更新时产生的副作用函数。</p></li><li><p><strong>执行 useEffect 过程中可能触发新的更新：</strong> 最后，由于在执行副作用函数的过程中可能触发新的更新，因此需要再次调用 <code>flushSyncCallback</code> 函数处理这些更新的更新流程，确保所有更新得到正确的执行和调度。</p></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/workLoop.ts</span>
<span class="token keyword">function</span> <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span>pendingPassiveEffects<span class="token operator">:</span> PendingPassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 先触发所有 unmount destroy</span>
	pendingPassiveEffects<span class="token punctuation">.</span>unmount<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">commitHookEffectListUnmount</span><span class="token punctuation">(</span>Passive<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pendingPassiveEffects<span class="token punctuation">.</span>unmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 再触发所有上次更新的 destroy</span>
	pendingPassiveEffects<span class="token punctuation">.</span>update<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">commitHookEffectListDestory</span><span class="token punctuation">(</span>Passive <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 再触发所有这次更新的 create</span>
	pendingPassiveEffects<span class="token punctuation">.</span>update<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">commitHookEffectListCreate</span><span class="token punctuation">(</span>Passive <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pendingPassiveEffects<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 执行 useEffect 过程中可能触发新的更新</span>
	<span class="token comment">// 再次调用 flushSyncCallback 处理这些更新的更新流程</span>
	<span class="token function">flushSyncCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>commitHookEffectListUnmount</code>、<code>commitHookEffectListDestory</code>、<code>commitHookEffectListCreate</code> 的作用都是依次遍历环状副作用链表，并执行其回调函数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react-reconciler/src/commitWork.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">commitHookEffectList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
	tags<span class="token operator">:</span> EffectTags<span class="token punctuation">,</span>
	lastEffect<span class="token operator">:</span> Effect<span class="token punctuation">,</span>
	<span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>effect<span class="token operator">:</span> Effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> effect <span class="token operator">=</span> lastEffect<span class="token punctuation">.</span>next <span class="token keyword">as</span> Effect<span class="token punctuation">;</span>

	<span class="token keyword">do</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effect<span class="token punctuation">.</span>tag <span class="token operator">&amp;</span> tags<span class="token punctuation">)</span> <span class="token operator">===</span> tags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">callback</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		effect <span class="token operator">=</span> effect<span class="token punctuation">.</span>next <span class="token keyword">as</span> Effect<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> lastEffect<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 组件卸载时，触发所有 unmount destroy</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitHookEffectListUnmount</span><span class="token punctuation">(</span>
	tags<span class="token operator">:</span> EffectTags<span class="token punctuation">,</span>
	lastEffect<span class="token operator">:</span> Effect
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">commitHookEffectList</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> lastEffect<span class="token punctuation">,</span> <span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> destroy <span class="token operator">=</span> effect<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> destroy <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		effect<span class="token punctuation">.</span>tag <span class="token operator">&amp;=</span> <span class="token operator">~</span>HookHasEffect<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 组件卸载时，触发所有上次更新的 destroy</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitHookEffectListDestory</span><span class="token punctuation">(</span>
	tags<span class="token operator">:</span> EffectTags<span class="token punctuation">,</span>
	lastEffect<span class="token operator">:</span> Effect
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">commitHookEffectList</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> lastEffect<span class="token punctuation">,</span> <span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> destroy <span class="token operator">=</span> effect<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> destroy <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 组件卸载时，触发所有这次更新的 create</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitHookEffectListCreate</span><span class="token punctuation">(</span>
	tags<span class="token operator">:</span> EffectTags<span class="token punctuation">,</span>
	lastEffect<span class="token operator">:</span> Effect
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">commitHookEffectList</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> lastEffect<span class="token punctuation">,</span> <span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> create <span class="token operator">=</span> effect<span class="token punctuation">.</span>create<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> create <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			effect<span class="token punctuation">.</span>destroy <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就实现了 <code>useEffect</code>，并将这个 Hook 加入了更新流程中。</p>`,24),D=n("code",null,"git tag v1.15",-1),N={href:"https://github.com/2xiao/my-react/tree/v1.15",target:"_blank",rel:"noopener noreferrer"};function C(S,Q){const t=p("ExternalLinkIcon"),o=p("RouterLink");return i(),l("div",null,[f,n("div",m,[b,y,n("p",null,[s("相关代码可在 "),n("a",g,[E,a(t)]),s(" 查看")])]),h,n("p",null,[s("在 "),a(o,{to:"/react/8.html"},{default:u(()=>[s("第 8 节")]),_:1}),s(" 中我们学到，在 FiberNode 节点的 "),w,s(" 字段中保存着待执行的 Hooks 链表；链表中的每个 Hook 通过 "),x,s(" 指针连接在一起，而每个 Hook 也有一个 "),P,s(" 字段，指向了对应的 Hook 数据。")]),_,n("p",null,[s("调度副作用需要使用调度器 "),n("a",H,[s("Scheduler"),a(t)]),s("，调度器也是 React 项目下的模块，我们先不实现它，直接安装官方实现版本来使用：")]),F,n("p",null,[s("相关代码可在 "),D,s(" 查看，地址："),n("a",N,[s("https://github.com/2xiao/my-react/tree/v1.15"),a(t)])])])}const R=c(v,[["render",C],["__file","15.html.vue"]]);export{R as default};
