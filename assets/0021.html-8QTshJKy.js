import{_ as c,r as i,o as d,c as r,a as t,b as n,d as e,w as s,f as p,e as u}from"./app-5VBZs9Uu.js";const _={},h={id:"_21-合并两个有序链表",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_21-合并两个有序链表","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"递归",-1),g=t("code",null,"链表",-1),b={href:"https://leetcode.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p><p>Merge the two lists into one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p><p>Return <em>the head of the merged linked list</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: list1 = [1,2,4], list2 = [1,3,4]</p><p>Output: [1,1,2,3,4,4]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: list1 = [], list2 = []</p><p>Output: []</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: list1 = [], list2 = [0]</p><p>Output: [0]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>合并 2 个有序链表</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>利用归并排序的思想，具体步骤如下：</p><ul><li>使用哑节点 <code>newHead</code> 构造一个头节点，并使用 <code>prev</code> 指向 <code>newHead</code> 用于遍历；</li><li>然后判断 <code>list1</code> 和 <code>list2</code> 头节点的值，将较小的头节点加入到合并后的链表中，并向后移动该链表的头节点指针；</li><li>重复上一步操作，直到两个链表中出现链表为空的情况；</li><li>将剩余链表链接到合并后的链表中；</li><li>返回合并后有序链表的头节点 <code>newHead.next</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">list1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">list2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">list1<span class="token punctuation">,</span> list2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> prev <span class="token operator">=</span> newHead<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>list1 <span class="token operator">&amp;&amp;</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev<span class="token punctuation">.</span>next <span class="token operator">=</span> list1<span class="token punctuation">;</span>
			list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			prev<span class="token punctuation">.</span>next <span class="token operator">=</span> list2<span class="token punctuation">;</span>
			list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	prev<span class="token punctuation">.</span>next <span class="token operator">=</span> list1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> list1 <span class="token operator">:</span> list2<span class="token punctuation">;</span>
	<span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),x=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),w=t("td",{style:{"text-align":"center"}},"23",-1),j={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},N={style:{"text-align":"left"}},E=t("code",null,"链表",-1),H=t("code",null,"分治",-1),I=t("code",null,"堆（优先队列）",-1),C=t("code",null,"1+",-1),M={style:{"text-align":"left"}},V=t("td",{style:{"text-align":"center"}},"88",-1),B={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},R={style:{"text-align":"left"}},z=t("code",null,"数组",-1),K=t("code",null,"双指针",-1),S=t("code",null,"排序",-1),Y={style:{"text-align":"left"}},A=t("td",{style:{"text-align":"center"}},"148",-1),D={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"center"}},J={style:{"text-align":"left"}},P=t("code",null,"链表",-1),Q=t("code",null,"双指针",-1),U=t("code",null,"分治",-1),W=t("code",null,"2+",-1),X={style:{"text-align":"left"}},Z=t("td",{style:{"text-align":"center"}},"244",-1),$={style:{"text-align":"left"}},tt={href:"https://leetcode.com/problems/shortest-word-distance-ii",target:"_blank",rel:"noopener noreferrer"},et=t("td",{style:{"text-align":"center"}},null,-1),nt={style:{"text-align":"left"}},st=t("code",null,"设计",-1),ot=t("code",null,"数组",-1),at=t("code",null,"哈希表",-1),lt=t("code",null,"2+",-1),it={style:{"text-align":"left"}},ct=t("td",{style:{"text-align":"center"}},"1634",-1),dt={style:{"text-align":"left"}},rt={href:"https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists",target:"_blank",rel:"noopener noreferrer"},pt=t("td",{style:{"text-align":"center"}},null,-1),ut={style:{"text-align":"left"}},_t=t("code",null,"链表",-1),ht=t("code",null,"数学",-1),mt=t("code",null,"双指针",-1),kt={style:{"text-align":"left"}},ft=t("td",{style:{"text-align":"center"}},"1940",-1),gt={style:{"text-align":"left"}},bt={href:"https://leetcode.com/problems/longest-common-subsequence-between-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},vt=t("td",{style:{"text-align":"center"}},null,-1),yt={style:{"text-align":"left"}},xt=t("code",null,"数组",-1),wt=t("code",null,"哈希表",-1),jt=t("code",null,"计数",-1),qt={style:{"text-align":"left"}},Lt=t("td",{style:{"text-align":"center"}},"2570",-1),Nt={style:{"text-align":"left"}},Et={href:"https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values",target:"_blank",rel:"noopener noreferrer"},Ht=t("td",{style:{"text-align":"center"}},null,-1),It={style:{"text-align":"left"}},Ct=t("code",null,"数组",-1),Mt=t("code",null,"哈希表",-1),Vt=t("code",null,"双指针",-1),Bt={style:{"text-align":"left"}};function Tt(Ot,Rt){const a=i("ExternalLinkIcon"),l=i("font"),o=i("RouterLink");return d(),r("div",null,[t("h1",h,[m,n(),t("a",k,[n("21. 合并两个有序链表"),e(a)])]),t("p",null,[n("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(o,{to:"/leetcode-js/outline/tag/recursion.html"},{default:s(()=>[f]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:s(()=>[g]),_:1}),n("  🔗 "),t("a",b,[v,e(a)])]),y,p(" prettier-ignore "),t("table",null,[x,t("tbody",null,[t("tr",null,[w,t("td",j,[t("a",q,[n("合并 K 个升序链表"),e(a)])]),t("td",L,[e(o,{to:"/leetcode-js/problem/0023.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",N,[e(o,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:s(()=>[E]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:s(()=>[H]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/heap-priority-queue.html"},{default:s(()=>[I]),_:1}),n(),C]),t("td",M,[e(l,{color:"#ff334b"},{default:s(()=>[n("Hard")]),_:1})])]),t("tr",null,[V,t("td",B,[t("a",T,[n("合并两个有序数组"),e(a)])]),t("td",O,[e(o,{to:"/leetcode-js/problem/0088.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",R,[e(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[z]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[K]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/sorting.html"},{default:s(()=>[S]),_:1})]),t("td",Y,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[A,t("td",D,[t("a",F,[n("排序链表"),e(a)])]),t("td",G,[e(o,{to:"/leetcode-js/problem/0148.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",J,[e(o,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:s(()=>[P]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[Q]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:s(()=>[U]),_:1}),n(),W]),t("td",X,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Z,t("td",$,[t("a",tt,[n("最短单词距离 II"),e(a)])]),et,t("td",nt,[e(o,{to:"/leetcode-js/outline/tag/design.html"},{default:s(()=>[st]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[ot]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[at]),_:1}),n(),lt]),t("td",it,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[ct,t("td",dt,[t("a",rt,[n("求两个多项式链表的和"),e(a)])]),pt,t("td",ut,[e(o,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:s(()=>[_t]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/math.html"},{default:s(()=>[ht]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[mt]),_:1})]),t("td",kt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[ft,t("td",gt,[t("a",bt,[n("排序数组之间的最长公共子序列"),e(a)])]),vt,t("td",yt,[e(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[xt]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[wt]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/counting.html"},{default:s(()=>[jt]),_:1})]),t("td",qt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Lt,t("td",Nt,[t("a",Et,[n("合并两个二维数组 - 求和法"),e(a)])]),Ht,t("td",It,[e(o,{to:"/leetcode-js/outline/tag/array.html"},{default:s(()=>[Ct]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:s(()=>[Mt]),_:1}),n(),e(o,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:s(()=>[Vt]),_:1})]),t("td",Bt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const Kt=c(_,[["render",Tt],["__file","0021.html.vue"]]);export{Kt as default};
