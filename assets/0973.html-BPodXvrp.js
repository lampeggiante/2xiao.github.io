import{_ as l,r as c,o as i,c as u,a as n,b as a,d as s,w as t,f as r,e as d}from"./app-qrCIIj1V.js";const k={},h={id:"_973-最接近原点的-k-个点",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_973-最接近原点的-k-个点","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/k-closest-points-to-origin",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"几何",-1),g=n("code",null,"数组",-1),b=n("code",null,"数学",-1),v=n("code",null,"分治",-1),y=n("code",null,"快速选择",-1),x=n("code",null,"排序",-1),w=n("code",null,"堆（优先队列）",-1),j={href:"https://leetcode.com/problems/k-closest-points-to-origin",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"LeetCode",-1),E=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of <code>points</code> where <code>points[i] = [xi, yi]</code> represents a point on the <strong>X-Y</strong> plane and an integer <code>k</code>, return the <code>k</code> closest points to the origin <code>(0, 0)</code>.</p><p>The distance between two points on the <strong>X-Y</strong> plane is the Euclidean distance (i.e., <code>√(x1 - x2)^2 + (y1 - y2)^2</code>).</p><p>You may return the answer in <strong>any order</strong>. The answer is <strong>guaranteed</strong> to be <strong>unique</strong> (except for the order that it is in).</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: points = [[1,3],[-2,2]], k = 1</p><p>Output: [[-2,2]]</p><p>Explanation:</p><p>The distance between (1, 3) and the origin is sqrt(10).</p><p>The distance between (-2, 2) and the origin is sqrt(8).</p><p>Since sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.</p><p>We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: points = [[3,3],[5,-1],[-2,4]], k = 2</p><p>Output: [[3,3],[-2,4]]</p><p>Explanation: The answer [[-2,4],[3,3]] would also be accepted.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= k &lt;= points.length &lt;= 10^4</code></li><li><code>-10^4 &lt;= xi, yi &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个数组 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 表示 <strong>X-Y</strong> 平面上的一个点，并且是一个整数 <code>k</code> ，返回离原点 <code>(0,0)</code> 最近的 <code>k</code> 个点。</p><p>这里，平面上两点之间的距离是 欧几里德距离（ <code>√(x1 - x2)2 + (y1 - y2)2</code> ）。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。除了点坐标的顺序之外，答案 <strong>确保</strong> 是 <strong>唯一</strong> 的。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题是 Top K 问题的变种，求的是最小的 <code>K</code> 个数，可以用大小为 <code>K</code> 的大顶堆来解决。</p><ol><li>遍历题目提供的 <code>points</code>，求出每个点到原点的距离 <code>dist</code>；</li><li>将点和距离 <code>[point, dist]</code> 添加到大顶堆中，拿 <code>dist</code> 与堆顶的元素对比: <ul><li>如果比堆顶元素小，就把堆顶元素删除，并且将这个元素插入到堆中；</li><li>如果比堆顶元素大，则不做处理；</li></ul></li><li>遍历完之后，返回大顶堆中的 <code>K</code> 个点。</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">points</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">kClosest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">points<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>point<span class="token punctuation">,</span> dist<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>point<span class="token punctuation">,</span> dist<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">heapifyUp</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>point<span class="token punctuation">,</span> dist<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">heapifyDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">heapifyUp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> parent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        i <span class="token operator">=</span> parent<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">heapifyDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heap<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> heap<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> heap<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> heap<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>heap<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">heapifyDown</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> point <span class="token keyword">of</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dist <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span>point<span class="token punctuation">,</span> dist<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> heap<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),K=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),M=n("td",{style:{"text-align":"center"}},"215",-1),T={style:{"text-align":"left"}},C={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},N={style:{"text-align":"left"}},V=n("code",null,"数组",-1),Y=n("code",null,"分治",-1),I=n("code",null,"快速选择",-1),X=n("code",null,"2+",-1),B={style:{"text-align":"left"}},D=n("td",{style:{"text-align":"center"}},"347",-1),O={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"center"}},U={style:{"text-align":"left"}},z=n("code",null,"数组",-1),G=n("code",null,"哈希表",-1),W=n("code",null,"分治",-1),A=n("code",null,"5+",-1),F={style:{"text-align":"left"}},H=n("td",{style:{"text-align":"center"}},"692",-1),J={style:{"text-align":"left"}},P={href:"https://leetcode.com/problems/top-k-frequent-words",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"字典树",-1),nn=n("code",null,"哈希表",-1),sn=n("code",null,"字符串",-1),an=n("code",null,"4+",-1),tn={style:{"text-align":"left"}},en=n("td",{style:{"text-align":"center"}},"1779",-1),on={style:{"text-align":"left"}},pn={href:"https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate",target:"_blank",rel:"noopener noreferrer"},cn=n("td",{style:{"text-align":"center"}},null,-1),ln={style:{"text-align":"left"}},un=n("code",null,"数组",-1),rn={style:{"text-align":"left"}},dn=n("td",{style:{"text-align":"center"}},"3111",-1),kn={style:{"text-align":"left"}},hn={href:"https://leetcode.com/problems/minimum-rectangles-to-cover-points",target:"_blank",rel:"noopener noreferrer"},_n=n("td",{style:{"text-align":"center"}},null,-1),mn={style:{"text-align":"left"}},fn=n("code",null,"贪心",-1),gn=n("code",null,"数组",-1),bn=n("code",null,"排序",-1),vn={style:{"text-align":"left"}},yn=n("td",{style:{"text-align":"center"}},"3275",-1),xn={style:{"text-align":"left"}},wn={href:"https://leetcode.com/problems/k-th-nearest-obstacle-queries",target:"_blank",rel:"noopener noreferrer"},jn=n("td",{style:{"text-align":"center"}},null,-1),qn={style:{"text-align":"left"}},En=n("code",null,"数组",-1),Kn=n("code",null,"堆（优先队列）",-1),Mn={style:{"text-align":"left"}};function Tn(Cn,Ln){const o=c("ExternalLinkIcon"),p=c("font"),e=c("RouterLink");return i(),u("div",null,[n("h1",h,[_,a(),n("a",m,[a("973. 最接近原点的 K 个点"),s(o)])]),n("p",null,[a("🟠 "),s(p,{color:"#ffb800"},{default:t(()=>[a("Medium")]),_:1}),a("  🔖  "),s(e,{to:"/leetcode-js/outline/tag/geometry.html"},{default:t(()=>[f]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[g]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/math.html"},{default:t(()=>[b]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:t(()=>[v]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/quickselect.html"},{default:t(()=>[y]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/sorting.html"},{default:t(()=>[x]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/heap-priority-queue.html"},{default:t(()=>[w]),_:1}),a("  🔗 "),n("a",j,[q,s(o)])]),E,r(" prettier-ignore "),n("table",null,[K,n("tbody",null,[n("tr",null,[M,n("td",T,[n("a",C,[a("数组中的第K个最大元素"),s(o)])]),n("td",L,[s(e,{to:"/leetcode-js/problem/0215.html"},{default:t(()=>[a("[✓]")]),_:1})]),n("td",N,[s(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[V]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:t(()=>[Y]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/quickselect.html"},{default:t(()=>[I]),_:1}),a(),X]),n("td",B,[s(p,{color:"#ffb800"},{default:t(()=>[a("Medium")]),_:1})])]),n("tr",null,[D,n("td",O,[n("a",R,[a("前 K 个高频元素"),s(o)])]),n("td",S,[s(e,{to:"/leetcode-js/problem/0347.html"},{default:t(()=>[a("[✓]")]),_:1})]),n("td",U,[s(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[z]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:t(()=>[G]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/divide-and-conquer.html"},{default:t(()=>[W]),_:1}),a(),A]),n("td",F,[s(p,{color:"#ffb800"},{default:t(()=>[a("Medium")]),_:1})])]),n("tr",null,[H,n("td",J,[n("a",P,[a("前K个高频单词"),s(o)])]),Q,n("td",Z,[s(e,{to:"/leetcode-js/outline/tag/trie.html"},{default:t(()=>[$]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:t(()=>[nn]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/string.html"},{default:t(()=>[sn]),_:1}),a(),an]),n("td",tn,[s(p,{color:"#ffb800"},{default:t(()=>[a("Medium")]),_:1})])]),n("tr",null,[en,n("td",on,[n("a",pn,[a("找到最近的有相同 X 或 Y 坐标的点"),s(o)])]),cn,n("td",ln,[s(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[un]),_:1})]),n("td",rn,[s(p,{color:"#15bd66"},{default:t(()=>[a("Easy")]),_:1})])]),n("tr",null,[dn,n("td",kn,[n("a",hn,[a("覆盖所有点的最少矩形数目"),s(o)])]),_n,n("td",mn,[s(e,{to:"/leetcode-js/outline/tag/greedy.html"},{default:t(()=>[fn]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[gn]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/sorting.html"},{default:t(()=>[bn]),_:1})]),n("td",vn,[s(p,{color:"#ffb800"},{default:t(()=>[a("Medium")]),_:1})])]),n("tr",null,[yn,n("td",xn,[n("a",wn,[a("第 K 近障碍物查询"),s(o)])]),jn,n("td",qn,[s(e,{to:"/leetcode-js/outline/tag/array.html"},{default:t(()=>[En]),_:1}),a(),s(e,{to:"/leetcode-js/outline/tag/heap-priority-queue.html"},{default:t(()=>[Kn]),_:1})]),n("td",Mn,[s(p,{color:"#ffb800"},{default:t(()=>[a("Medium")]),_:1})])])])])])}const Vn=l(k,[["render",Tn],["__file","0973.html.vue"]]);export{Vn as default};
