import{_ as p,r,o as i,c as d,a as e,b as n,d as t,w as s,f as u,e as c}from"./app-mvY9N9Pc.js";const _={},h={id:"_7-整数反转",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#_7-整数反转","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"数学",-1),g={href:"https://leetcode.com/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"LeetCode",-1),v=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2^31, 2^31 - 1]</code>, then return <code>0</code>.</p><p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p><p><strong>Example 1:</strong></p><blockquote><p>Input: x = 123</p><p>Output: 321</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: x = -123</p><p>Output: -321</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: x = 120</p><p>Output: 21</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为  <code>[−2^31,  2^31 − 1]</code>。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',14),x=e("li",null,[n("这一题只需要注意一点，反转以后的数字要求在"),e("code",null," [−2^31, 2^31 − 1]"),n("范围内，超过这个范围的数字都要输出 "),e("code",null,"0 "),n("。")],-1),y=c(`<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isNegative <span class="token operator">=</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  x <span class="token operator">*=</span> isNegative<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> temp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> temp <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> temp <span class="token operator">*</span> isNegative<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,3),w=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),E=e("td",{style:{"text-align":"center"}},"8",-1),N={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/string-to-integer-atoi",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},j={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0008",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"left"}},L=e("code",null,"字符串",-1),V={style:{"text-align":"left"}},M=e("td",{style:{"text-align":"center"}},"190",-1),B={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/reverse-bits",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},A={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0190",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"left"}},S=e("code",null,"位运算",-1),T=e("code",null,"分治",-1),z={style:{"text-align":"left"}},D=e("td",{style:{"text-align":"center"}},"2119",-1),F={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/a-number-after-a-double-reversal",target:"_blank",rel:"noopener noreferrer"},J=e("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},P=e("code",null,"数学",-1),Q={style:{"text-align":"left"}},U=e("td",{style:{"text-align":"center"}},"2442",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/count-number-of-distinct-integers-after-reverse-operations",target:"_blank",rel:"noopener noreferrer"},Y=e("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=e("code",null,"数组",-1),ee=e("code",null,"哈希表",-1),ne=e("code",null,"数学",-1),te=e("code",null,"1+",-1),se={style:{"text-align":"left"}};function ae(oe,le){const o=r("ExternalLinkIcon"),l=r("font"),a=r("RouterLink");return i(),d("div",null,[e("h1",h,[k,n(),e("a",m,[n("7. 整数反转"),t(o)])]),e("p",null,[n("🟠 "),t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),t(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[b]),_:1}),n("  🔗 "),e("a",g,[f,t(o)])]),v,e("ul",null,[e("li",null,[n("这一题是简单题，要求反转 10 进制数。类似的题目有 "),t(a,{to:"/leetcode/problem/0190.html"},{default:s(()=>[n("第 190 题")]),_:1}),n("。")]),x]),y,u(" prettier-ignore "),e("table",null,[w,e("tbody",null,[e("tr",null,[E,e("td",N,[e("a",q,[n("字符串转换整数 (atoi)"),t(o)])]),e("td",I,[e("a",j,[n("[✓]"),t(o)])]),e("td",C,[t(a,{to:"/leetcode/outline/tag/string.html"},{default:s(()=>[L]),_:1})]),e("td",V,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),e("tr",null,[M,e("td",B,[e("a",O,[n("颠倒二进制位"),t(o)])]),e("td",R,[e("a",A,[n("[✓]"),t(o)])]),e("td",G,[t(a,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:s(()=>[S]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:s(()=>[T]),_:1})]),e("td",z,[t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),e("tr",null,[D,e("td",F,[e("a",H,[n("反转两次的数字"),t(o)])]),J,e("td",K,[t(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[P]),_:1})]),e("td",Q,[t(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),e("tr",null,[U,e("td",W,[e("a",X,[n("反转之后不同整数的数目"),t(o)])]),Y,e("td",Z,[t(a,{to:"/leetcode/outline/tag/array.html"},{default:s(()=>[$]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/hash-table.html"},{default:s(()=>[ee]),_:1}),n(),t(a,{to:"/leetcode/outline/tag/math.html"},{default:s(()=>[ne]),_:1}),n(),te]),e("td",se,[t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])])])])])}const ce=p(_,[["render",ae],["__file","0007.html.vue"]]);export{ce as default};
