import{_ as p,r as c,o as i,c as r,a as t,b as s,d as n,w as e,f as d,e as u}from"./app-qrCIIj1V.js";const _={},h={id:"_125-验证回文串",tabindex:"-1"},k=t("a",{class:"header-anchor",href:"#_125-验证回文串","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"双指针",-1),g=t("code",null,"字符串",-1),b={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p><p>Given a string <code>s</code>, return <code>true</code> if it is a <strong>palindrome</strong> , or <code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;A man, a plan, a canal: Panama&quot;</p><p>Output: true</p><p>Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;race a car&quot;</p><p>Output: false</p><p>Explanation: &quot;raceacar&quot; is not a palindrome.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot; &quot;</p><p>Output: true</p><p>Explanation: s is an empty string &quot;&quot; after removing non-alphanumeric characters.</p><p>Since an empty string reads the same forward and backward, it is a palindrome.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 105</code></li><li><code>s</code> consists only of printable ASCII characters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果一个短语在将所有大写字母转换为小写字母并删除所有非字母数字字符后，向前和向后读取相同的内容，则该短语是回文。字母数字字符包括字母和数字。</p><p>判断所给的字符串是否是有效的回文串。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>简单题，使用对撞指针挨个判断，如果左右指针不相等则立即返回 false，如果顺利遍历结束则返回 true。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChar</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChar</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">isChar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,19),x=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),w=t("td",{style:{"text-align":"center"}},"234",-1),j={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},E={style:{"text-align":"center"}},C={style:{"text-align":"left"}},I=t("code",null,"栈",-1),L=t("code",null,"递归",-1),V=t("code",null,"链表",-1),N=t("code",null,"1+",-1),A={style:{"text-align":"left"}},B=t("td",{style:{"text-align":"center"}},"680",-1),M={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},S=t("td",{style:{"text-align":"center"}},null,-1),P={style:{"text-align":"left"}},R=t("code",null,"贪心",-1),z=t("code",null,"双指针",-1),G=t("code",null,"字符串",-1),T={style:{"text-align":"left"}},D=t("td",{style:{"text-align":"center"}},"2002",-1),F={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},J=t("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},Q=t("code",null,"位运算",-1),U=t("code",null,"字符串",-1),W=t("code",null,"动态规划",-1),X=t("code",null,"2+",-1),Y={style:{"text-align":"left"}},Z=t("td",{style:{"text-align":"center"}},"2108",-1),$={style:{"text-align":"left"}},tt={href:"https://leetcode.com/problems/find-first-palindromic-string-in-the-array",target:"_blank",rel:"noopener noreferrer"},nt=t("td",{style:{"text-align":"center"}},null,-1),st={style:{"text-align":"left"}},et=t("code",null,"数组",-1),at=t("code",null,"双指针",-1),ot=t("code",null,"字符串",-1),lt={style:{"text-align":"left"}},ct=t("td",{style:{"text-align":"center"}},"2330",-1),pt={style:{"text-align":"left"}},it={href:"https://leetcode.com/problems/valid-palindrome-iv",target:"_blank",rel:"noopener noreferrer"},rt=t("td",{style:{"text-align":"center"}},null,-1),dt={style:{"text-align":"left"}},ut=t("code",null,"双指针",-1),_t=t("code",null,"字符串",-1),ht={style:{"text-align":"left"}},kt=t("td",{style:{"text-align":"center"}},"3035",-1),mt={style:{"text-align":"left"}},ft={href:"https://leetcode.com/problems/maximum-palindromes-after-operations",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},null,-1),bt={style:{"text-align":"left"}},vt=t("code",null,"贪心",-1),yt=t("code",null,"数组",-1),xt=t("code",null,"哈希表",-1),wt=t("code",null,"3+",-1),jt={style:{"text-align":"left"}};function qt(Et,Ct){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[t("h1",h,[k,s(),t("a",m,[s("125. 验证回文串"),n(o)])]),t("p",null,[s("🟢 "),n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[f]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),t("a",b,[v,n(o)])]),y,d(" prettier-ignore "),t("table",null,[x,t("tbody",null,[t("tr",null,[w,t("td",j,[t("a",q,[s("回文链表"),n(o)])]),t("td",E,[n(a,{to:"/leetcode-js/problem/0234.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",C,[n(a,{to:"/leetcode-js/outline/tag/stack.html"},{default:e(()=>[I]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/recursion.html"},{default:e(()=>[L]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/linked-list.html"},{default:e(()=>[V]),_:1}),s(),N]),t("td",A,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),t("tr",null,[B,t("td",M,[t("a",O,[s("验证回文串 II"),n(o)])]),S,t("td",P,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[R]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[z]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[G]),_:1})]),t("td",T,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),t("tr",null,[D,t("td",F,[t("a",H,[s("两个回文子序列长度的最大乘积"),n(o)])]),J,t("td",K,[n(a,{to:"/leetcode-js/outline/tag/bit-manipulation.html"},{default:e(()=>[Q]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[U]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/dynamic-programming.html"},{default:e(()=>[W]),_:1}),s(),X]),t("td",Y,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Z,t("td",$,[t("a",tt,[s("找出数组中的第一个回文字符串"),n(o)])]),nt,t("td",st,[n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[et]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[at]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[ot]),_:1})]),t("td",lt,[n(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),t("tr",null,[ct,t("td",pt,[t("a",it,[s("验证回文串 IV"),n(o)])]),rt,t("td",dt,[n(a,{to:"/leetcode-js/outline/tag/two-pointers.html"},{default:e(()=>[ut]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/string.html"},{default:e(()=>[_t]),_:1})]),t("td",ht,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[kt,t("td",mt,[t("a",ft,[s("回文字符串的最大数量"),n(o)])]),gt,t("td",bt,[n(a,{to:"/leetcode-js/outline/tag/greedy.html"},{default:e(()=>[vt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/array.html"},{default:e(()=>[yt]),_:1}),s(),n(a,{to:"/leetcode-js/outline/tag/hash-table.html"},{default:e(()=>[xt]),_:1}),s(),wt]),t("td",jt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const Lt=p(_,[["render",qt],["__file","0125.html.vue"]]);export{Lt as default};
