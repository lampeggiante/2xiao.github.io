import{_ as p,r as c,o as d,c as _,a as t,b as e,d as n,w as s,f as h,e as k}from"./app-mvY9N9Pc.js";const f={},m={id:"_102-二叉树的层序遍历",tabindex:"-1"},b=t("a",{class:"header-anchor",href:"#_102-二叉树的层序遍历","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"树",-1),v=t("code",null,"广度优先搜索",-1),x=t("code",null,"二叉树",-1),w={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"LeetCode",-1),j=k('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes &#39; values</em>. (i.e., from left to right, level by level).</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,9,20,null,null,15,7]</p><p>Output: [[3],[9,20],[15,7]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = [1]</p><p>Output: [[1]]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>层序</strong> 遍历。（即逐层地，从左到右访问所有节点）。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-广度优先遍历-bfs" tabindex="-1"><a class="header-anchor" href="#思路一-广度优先遍历-bfs" aria-hidden="true">#</a> 思路一：广度优先遍历(BFS)</h3><ul><li>使用队列实现</li></ul><ol><li>首先将根节点放入队列中；</li><li>更新队列的长度 <code>len</code> ，遍历队列的前 <code>len</code> 个节点；</li><li>如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；</li><li>将队列的前 <code>len</code> 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；</li><li>重复步骤 2、3、4，直至队列为空；</li></ol><hr><h3 id="思路二-深度优先遍历-dfs" tabindex="-1"><a class="header-anchor" href="#思路二-深度优先遍历-dfs" aria-hidden="true">#</a> 思路二：深度优先遍历(DFS)</h3><ol><li>维护一个递归函数，参数为节点和该节点的深度</li><li>先将根节点与深度 0 传入递归函数</li><li>将节点放入 index 与深度对应的数组内</li><li>将节点的左子节点和右子节点分别传入递归函数，深度 +1</li><li>重复步骤 3、4，直至子节点为空</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',21),E=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token comment"},"// 思路一：广度优先遍历(BFS)"),e(`
`),t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("TreeNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"root"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"levelOrder"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" res "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("root "),t("span",{class:"token operator"},"=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" queue "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),e("root"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`

	`),t("span",{class:"token keyword"},"while"),e(),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"."),e("length"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"let"),e(" len "),t("span",{class:"token operator"},"="),e(" queue"),t("span",{class:"token punctuation"},"."),e("length"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token keyword"},"let"),e(" temp "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token keyword"},"for"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"let"),e(" i "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),e(" i "),t("span",{class:"token operator"},"<"),e(" len"),t("span",{class:"token punctuation"},";"),e(" i"),t("span",{class:"token operator"},"++"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
			`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},")"),e(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},")"),e(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			temp`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(`
		queue `),t("span",{class:"token operator"},"="),e(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"slice"),t("span",{class:"token punctuation"},"("),e("len"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("temp"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token punctuation"},"}"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),N=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token comment"},"// 思路二：深度优先遍历(DFS)"),e(`
`),t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("TreeNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"root"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"levelOrder"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" res "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"const"),e(),t("span",{class:"token function-variable function"},"traverse"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[e("node"),t("span",{class:"token punctuation"},","),e(" deep")]),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"=>"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("node "),t("span",{class:"token operator"},"=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token keyword"},"return"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("res"),t("span",{class:"token punctuation"},"."),e("length "),t("span",{class:"token operator"},"=="),e(" deep"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
			res`),t("span",{class:"token punctuation"},"["),e("deep"),t("span",{class:"token punctuation"},"]"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),e("node"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token keyword"},"else"),e(),t("span",{class:"token punctuation"},"{"),e(`
			res`),t("span",{class:"token punctuation"},"["),e("deep"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("node"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(`
		`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),e("node"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},","),e(" deep "),t("span",{class:"token operator"},"+"),e(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),e("node"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},","),e(" deep "),t("span",{class:"token operator"},"+"),e(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),e("root"),t("span",{class:"token punctuation"},","),e(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),S=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),F=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),B=t("td",{style:{"text-align":"center"}},"103",-1),C={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},T={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0103",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"left"}},O=t("code",null,"树",-1),V=t("code",null,"广度优先搜索",-1),A=t("code",null,"二叉树",-1),D={style:{"text-align":"left"}},z=t("td",{style:{"text-align":"center"}},"107",-1),R={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},H={style:{"text-align":"center"}},J={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0107",target:"_blank",rel:"noopener noreferrer"},K={style:{"text-align":"left"}},P=t("code",null,"树",-1),Q=t("code",null,"广度优先搜索",-1),U=t("code",null,"二叉树",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"111",-1),Y={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},$={style:{"text-align":"center"}},tt={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0111",target:"_blank",rel:"noopener noreferrer"},et={style:{"text-align":"left"}},nt=t("code",null,"树",-1),st=t("code",null,"深度优先搜索",-1),ot=t("code",null,"广度优先搜索",-1),at=t("code",null,"1+",-1),lt={style:{"text-align":"left"}},ct=t("td",{style:{"text-align":"center"}},"314",-1),it={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},rt=t("td",{style:{"text-align":"center"}},null,-1),pt={style:{"text-align":"left"}},dt=t("code",null,"树",-1),_t=t("code",null,"深度优先搜索",-1),ht=t("code",null,"广度优先搜索",-1),kt=t("code",null,"3+",-1),ft={style:{"text-align":"left"}},mt=t("td",{style:{"text-align":"center"}},"429",-1),bt={style:{"text-align":"left"}},gt={href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},yt=t("td",{style:{"text-align":"center"}},null,-1),vt={style:{"text-align":"left"}},xt=t("code",null,"树",-1),wt=t("code",null,"广度优先搜索",-1),qt={style:{"text-align":"left"}},jt=t("td",{style:{"text-align":"center"}},"637",-1),Et={style:{"text-align":"left"}},Nt={href:"https://leetcode.com/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},St={style:{"text-align":"center"}},Ft={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0637",target:"_blank",rel:"noopener noreferrer"},Bt={style:{"text-align":"left"}},Ct=t("code",null,"树",-1),It=t("code",null,"深度优先搜索",-1),Mt=t("code",null,"广度优先搜索",-1),Tt=t("code",null,"1+",-1),Lt={style:{"text-align":"left"}},Ot=t("td",{style:{"text-align":"center"}},"993",-1),Vt={style:{"text-align":"left"}},At={href:"https://leetcode.com/problems/cousins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Dt=t("td",{style:{"text-align":"center"}},null,-1),zt={style:{"text-align":"left"}},Rt=t("code",null,"树",-1),Gt=t("code",null,"深度优先搜索",-1),Ht=t("code",null,"广度优先搜索",-1),Jt=t("code",null,"1+",-1),Kt={style:{"text-align":"left"}},Pt=t("td",{style:{"text-align":"center"}},"2471",-1),Qt={style:{"text-align":"left"}},Ut={href:"https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level",target:"_blank",rel:"noopener noreferrer"},Wt=t("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Yt=t("code",null,"树",-1),Zt=t("code",null,"广度优先搜索",-1),$t=t("code",null,"二叉树",-1),te={style:{"text-align":"left"}},ee=t("td",{style:{"text-align":"center"}},"2493",-1),ne={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},oe=t("td",{style:{"text-align":"center"}},null,-1),ae={style:{"text-align":"left"}},le=t("code",null,"广度优先搜索",-1),ce=t("code",null,"并查集",-1),ie=t("code",null,"图",-1),ue={style:{"text-align":"left"}};function re(pe,de){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink"),r=c("CodeTabs");return d(),_("div",null,[t("h1",m,[b,e(),t("a",g,[e("102. 二叉树的层序遍历"),n(a)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[y]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[v]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[x]),_:1}),e("  🔗 "),t("a",w,[q,n(a)])]),j,n(r,{id:"143",data:[{id:"广度优先遍历(BFS)"},{id:"深度优先遍历(DFS)"}]},{title0:s(({value:i,isActive:u})=>[e("广度优先遍历(BFS)")]),title1:s(({value:i,isActive:u})=>[e("深度优先遍历(DFS)")]),tab0:s(({value:i,isActive:u})=>[E]),tab1:s(({value:i,isActive:u})=>[N]),_:1}),S,h(" prettier-ignore "),t("table",null,[F,t("tbody",null,[t("tr",null,[B,t("td",C,[t("a",I,[e("二叉树的锯齿形层序遍历"),n(a)])]),t("td",M,[t("a",T,[e("[✓]"),n(a)])]),t("td",L,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[O]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[V]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[A]),_:1})]),t("td",D,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[z,t("td",R,[t("a",G,[e("二叉树的层序遍历 II"),n(a)])]),t("td",H,[t("a",J,[e("[✓]"),n(a)])]),t("td",K,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[P]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[Q]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[U]),_:1})]),t("td",W,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[X,t("td",Y,[t("a",Z,[e("二叉树的最小深度"),n(a)])]),t("td",$,[t("a",tt,[e("[✓]"),n(a)])]),t("td",et,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[nt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[st]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[ot]),_:1}),e(),at]),t("td",lt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[ct,t("td",it,[t("a",ut,[e("二叉树的垂直遍历"),n(a)])]),rt,t("td",pt,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[dt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[_t]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[ht]),_:1}),e(),kt]),t("td",ft,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[mt,t("td",bt,[t("a",gt,[e("N 叉树的层序遍历"),n(a)])]),yt,t("td",vt,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[xt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[wt]),_:1})]),t("td",qt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[jt,t("td",Et,[t("a",Nt,[e("二叉树的层平均值"),n(a)])]),t("td",St,[t("a",Ft,[e("[✓]"),n(a)])]),t("td",Bt,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[Ct]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[It]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[Mt]),_:1}),e(),Tt]),t("td",Lt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Ot,t("td",Vt,[t("a",At,[e("二叉树的堂兄弟节点"),n(a)])]),Dt,t("td",zt,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[Rt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[Gt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[Ht]),_:1}),e(),Jt]),t("td",Kt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Pt,t("td",Qt,[t("a",Ut,[e("逐层排序二叉树所需的最少操作数目"),n(a)])]),Wt,t("td",Xt,[n(o,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[Yt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[Zt]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[$t]),_:1})]),t("td",te,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ee,t("td",ne,[t("a",se,[e("将节点分成尽可能多的组"),n(a)])]),oe,t("td",ae,[n(o,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[le]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/union-find.html"},{default:s(()=>[ce]),_:1}),e(),n(o,{to:"/leetcode/outline/tag/graph.html"},{default:s(()=>[ie]),_:1})]),t("td",ue,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])])])])])}const he=p(f,[["render",re],["__file","0102.html.vue"]]);export{he as default};
