import{_,r as c,o as i,c as a,a as t,d as e,w as l,b as o,f as u}from"./app-mvY9N9Pc.js";const h={},r=t("h1",{id:"迭代器",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#迭代器","aria-hidden":"true"},"#"),o(" 迭代器")],-1),g={class:"hint-container details"},f=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),p=t("code",null,"矩阵",-1),x=t("code",null,"链表",-1),b=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),M=t("code",null,"单调栈",-1),v=t("code",null,"队列",-1),w=t("code",null,"单调队列",-1),q=t("code",null,"堆（优先队列）",-1),I=t("code",null,"哈希表",-1),E=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),N=t("code",null,"二叉树",-1),V=t("code",null,"二叉搜索树",-1),B=t("code",null,"最小生成树",-1),C=t("code",null,"图",-1),R=t("code",null,"有序集合",-1),j=t("code",null,"拓扑排序",-1),O=t("code",null,"最短路",-1),T=t("code",null,"强连通分量",-1),Q=t("code",null,"欧拉回路",-1),A=t("code",null,"双连通分量",-1),D=t("code",null,"并查集",-1),F=t("code",null,"字典树",-1),G=t("code",null,"线段树",-1),H=t("code",null,"树状数组",-1),J=t("code",null,"后缀数组",-1),K=t("p",null,[t("strong",null,"算法")],-1),P=t("code",null,"枚举",-1),S=t("code",null,"递归",-1),U=t("code",null,"分治",-1),W=t("code",null,"回溯",-1),X=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),ot=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),dt=t("code",null,"记忆化搜索",-1),st=t("code",null,"深度优先搜索",-1),ct=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),it=t("code",null,"位运算",-1),at=t("code",null,"前缀和",-1),ut=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),rt=t("code",null,"状态压缩",-1),gt=t("code",null,"哈希函数",-1),ft=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),pt=t("code",null,"数学",-1),xt=t("code",null,"数论",-1),bt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Mt=t("code",null,"模拟",-1),vt=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),qt=t("code",null,"概率与统计",-1),It=t("code",null,"水塘抽样",-1),Et=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Nt=t("code",null,"数据流",-1),Vt=t("code",null,"脑筋急转弯",-1),Bt=t("code",null,"交互",-1),Ct=t("span",{class:"blue"},"迭代器",-1),Rt=t("code",null,"多线程",-1),jt=t("hr",null,null,-1),Ot=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Tt=t("td",{style:{"text-align":"center"}},"173",-1),Qt={style:{"text-align":"left"}},At={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Dt={style:{"text-align":"center"}},Ft={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0173",target:"_blank",rel:"noopener noreferrer"},Gt={style:{"text-align":"left"}},Ht=t("code",null,"栈",-1),Jt=t("code",null,"树",-1),Kt=t("code",null,"设计",-1),Pt=t("code",null,"3+",-1),St={style:{"text-align":"left"}},Ut=t("td",{style:{"text-align":"center"}},"251",-1),Wt={style:{"text-align":"left"}},Xt={href:"https://leetcode.com/problems/flatten-2d-vector",target:"_blank",rel:"noopener noreferrer"},Yt=t("td",{style:{"text-align":"center"}},null,-1),Zt={style:{"text-align":"left"}},$t=t("code",null,"设计",-1),te=t("code",null,"数组",-1),ee=t("code",null,"双指针",-1),oe=t("code",null,"1+",-1),le={style:{"text-align":"left"}},ne=t("td",{style:{"text-align":"center"}},"281",-1),de={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/zigzag-iterator",target:"_blank",rel:"noopener noreferrer"},ce=t("td",{style:{"text-align":"center"}},null,-1),_e={style:{"text-align":"left"}},ie=t("code",null,"设计",-1),ae=t("code",null,"队列",-1),ue=t("code",null,"数组",-1),he=t("code",null,"1+",-1),re={style:{"text-align":"left"}},ge=t("td",{style:{"text-align":"center"}},"284",-1),fe={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/peeking-iterator",target:"_blank",rel:"noopener noreferrer"},ye=t("td",{style:{"text-align":"center"}},null,-1),pe={style:{"text-align":"left"}},xe=t("code",null,"设计",-1),be=t("code",null,"数组",-1),ke=t("code",null,"迭代器",-1),Me={style:{"text-align":"left"}},ve=t("td",{style:{"text-align":"center"}},"341",-1),we={style:{"text-align":"left"}},qe={href:"https://leetcode.com/problems/flatten-nested-list-iterator",target:"_blank",rel:"noopener noreferrer"},Ie=t("td",{style:{"text-align":"center"}},null,-1),Ee={style:{"text-align":"left"}},Le=t("code",null,"栈",-1),ze=t("code",null,"树",-1),Ne=t("code",null,"深度优先搜索",-1),Ve=t("code",null,"3+",-1),Be={style:{"text-align":"left"}},Ce=t("td",{style:{"text-align":"center"}},"604",-1),Re={style:{"text-align":"left"}},je={href:"https://leetcode.com/problems/design-compressed-string-iterator",target:"_blank",rel:"noopener noreferrer"},Oe=t("td",{style:{"text-align":"center"}},null,-1),Te={style:{"text-align":"left"}},Qe=t("code",null,"设计",-1),Ae=t("code",null,"数组",-1),De=t("code",null,"字符串",-1),Fe=t("code",null,"1+",-1),Ge={style:{"text-align":"left"}},He=t("td",{style:{"text-align":"center"}},"900",-1),Je={style:{"text-align":"left"}},Ke={href:"https://leetcode.com/problems/rle-iterator",target:"_blank",rel:"noopener noreferrer"},Pe=t("td",{style:{"text-align":"center"}},null,-1),Se={style:{"text-align":"left"}},Ue=t("code",null,"设计",-1),We=t("code",null,"数组",-1),Xe=t("code",null,"计数",-1),Ye=t("code",null,"1+",-1),Ze={style:{"text-align":"left"}},$e=t("td",{style:{"text-align":"center"}},"1286",-1),to={style:{"text-align":"left"}},eo={href:"https://leetcode.com/problems/iterator-for-combination",target:"_blank",rel:"noopener noreferrer"},oo=t("td",{style:{"text-align":"center"}},null,-1),lo={style:{"text-align":"left"}},no=t("code",null,"设计",-1),so=t("code",null,"字符串",-1),co=t("code",null,"回溯",-1),_o=t("code",null,"1+",-1),io={style:{"text-align":"left"}},ao=t("td",{style:{"text-align":"center"}},"1586",-1),uo={style:{"text-align":"left"}},ho={href:"https://leetcode.com/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},ro=t("td",{style:{"text-align":"center"}},null,-1),go={style:{"text-align":"left"}},fo=t("code",null,"栈",-1),mo=t("code",null,"树",-1),yo=t("code",null,"设计",-1),po=t("code",null,"3+",-1),xo={style:{"text-align":"left"}},bo=t("td",{style:{"text-align":"center"}},"剑指 Offer II 55",-1),ko={style:{"text-align":"left"}},Mo={href:"https://leetcode.cn/problems/kTOapQ",target:"_blank",rel:"noopener noreferrer"},vo=t("td",{style:{"text-align":"center"}},null,-1),wo={style:{"text-align":"left"}},qo=t("code",null,"栈",-1),Io=t("code",null,"树",-1),Eo=t("code",null,"设计",-1),Lo=t("code",null,"3+",-1),zo={style:{"text-align":"left"}};function No(Vo,Bo){const n=c("RouterLink"),d=c("ExternalLinkIcon"),s=c("font");return i(),a("div",null,[r,t("details",g,[f,m,t("p",null,[e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/matrix.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/linked-list.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/doubly-linked-list.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/monotonic-stack.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/monotonic-queue.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/heap-priority-queue.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/hash-table.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string-matching.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-tree.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-search-tree.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/minimum-spanning-tree.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/graph.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/ordered-set.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/topological-sort.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/shortest-path.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/strongly-connected-component.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/eulerian-circuit.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/biconnected-component.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/union-find.html"},{default:l(()=>[D]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/trie.html"},{default:l(()=>[F]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/segment-tree.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-indexed-tree.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/suffix-array.html"},{default:l(()=>[J]),_:1})]),K,t("p",null,[e(n,{to:"/leetcode/outline/tag/enumeration.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/recursion.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/divide-and-conquer.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/backtracking.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/greedy.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/dynamic-programming.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/sorting.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/bucket-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/counting-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/radix-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/merge-sort.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/quickselect.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/binary-search.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/memoization.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/two-pointers.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/bit-manipulation.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/prefix-sum.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/counting.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/sliding-window.html"},{default:l(()=>[ht]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/bitmask.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/hash-function.html"},{default:l(()=>[gt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/rolling-hash.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/line-sweep.html"},{default:l(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/leetcode/outline/tag/math.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/number-theory.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/geometry.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/game-theory.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/simulation.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/combinatorics.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/randomized.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/probability-and-statistics.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/reservoir-sampling.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/rejection-sampling.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/database.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/data-stream.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/brainteaser.html"},{default:l(()=>[Vt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/interactive.html"},{default:l(()=>[Bt]),_:1}),o(),Ct,o(),e(n,{to:"/leetcode/outline/tag/concurrency.html"},{default:l(()=>[Rt]),_:1})])]),jt,u(" prettier-ignore "),t("table",null,[Ot,t("tbody",null,[t("tr",null,[Tt,t("td",Qt,[t("a",At,[o("二叉搜索树迭代器"),e(d)])]),t("td",Dt,[t("a",Ft,[o("[✓]"),e(d)])]),t("td",Gt,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[Jt]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Kt]),_:1}),o(),Pt]),t("td",St,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ut,t("td",Wt,[t("a",Xt,[o("展开二维向量"),e(d)])]),Yt,t("td",Zt,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[$t]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[te]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/two-pointers.html"},{default:l(()=>[ee]),_:1}),o(),oe]),t("td",le,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ne,t("td",de,[t("a",se,[o("锯齿迭代器"),e(d)])]),ce,t("td",_e,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[ie]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/queue.html"},{default:l(()=>[ae]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[ue]),_:1}),o(),he]),t("td",re,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ge,t("td",fe,[t("a",me,[o("窥视迭代器"),e(d)])]),ye,t("td",pe,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[xe]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[be]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/iterator.html"},{default:l(()=>[ke]),_:1})]),t("td",Me,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ve,t("td",we,[t("a",qe,[o("扁平化嵌套列表迭代器"),e(d)])]),Ie,t("td",Ee,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[Le]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[ze]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:l(()=>[Ne]),_:1}),o(),Ve]),t("td",Be,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ce,t("td",Re,[t("a",je,[o("迭代压缩字符串"),e(d)])]),Oe,t("td",Te,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Qe]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[Ae]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:l(()=>[De]),_:1}),o(),Fe]),t("td",Ge,[e(s,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[He,t("td",Je,[t("a",Ke,[o("RLE 迭代器"),e(d)])]),Pe,t("td",Se,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Ue]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/array.html"},{default:l(()=>[We]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/counting.html"},{default:l(()=>[Xe]),_:1}),o(),Ye]),t("td",Ze,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[$e,t("td",to,[t("a",eo,[o("字母组合迭代器"),e(d)])]),oo,t("td",lo,[e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[no]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/string.html"},{default:l(()=>[so]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/backtracking.html"},{default:l(()=>[co]),_:1}),o(),_o]),t("td",io,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ao,t("td",uo,[t("a",ho,[o("二叉搜索树迭代器 II"),e(d)])]),ro,t("td",go,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[fo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[mo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[yo]),_:1}),o(),po]),t("td",xo,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[bo,t("td",ko,[t("a",Mo,[o("二叉搜索树迭代器"),e(d)])]),vo,t("td",wo,[e(n,{to:"/leetcode/outline/tag/stack.html"},{default:l(()=>[qo]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/tree.html"},{default:l(()=>[Io]),_:1}),o(),e(n,{to:"/leetcode/outline/tag/design.html"},{default:l(()=>[Eo]),_:1}),o(),Lo]),t("td",zo,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])])])])])}const Ro=_(h,[["render",No],["__file","iterator.html.vue"]]);export{Ro as default};
