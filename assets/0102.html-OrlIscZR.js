import{_ as p,r as c,o as d,c as _,a as t,b as e,d as n,w as s,f as k,e as h}from"./app-GnK0vSxb.js";const f={},m={id:"_102-二叉树的层序遍历",tabindex:"-1"},b=t("a",{class:"header-anchor",href:"#_102-二叉树的层序遍历","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"树",-1),v=t("code",null,"广度优先搜索",-1),x=t("code",null,"二叉树",-1),w={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"LeetCode",-1),E=h('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes &#39; values</em>. (i.e., from left to right, level by level).</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,9,20,null,null,15,7]</p><p>Output: [[3],[9,20],[15,7]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = [1]</p><p>Output: [[1]]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>层序</strong> 遍历。（即逐层地，从左到右访问所有节点）。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-广度优先遍历-bfs" tabindex="-1"><a class="header-anchor" href="#思路一-广度优先遍历-bfs" aria-hidden="true">#</a> 思路一：广度优先遍历(BFS)</h3><ul><li>使用队列实现</li></ul><ol><li>首先将根节点放入队列中；</li><li>更新队列的长度 <code>len</code> ，遍历队列的前 <code>len</code> 个节点；</li><li>如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；</li><li>将队列的前 <code>len</code> 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；</li><li>重复步骤 2、3、4，直至队列为空；</li></ol><hr><h3 id="思路二-深度优先遍历-dfs" tabindex="-1"><a class="header-anchor" href="#思路二-深度优先遍历-dfs" aria-hidden="true">#</a> 思路二：深度优先遍历(DFS)</h3><ol><li>维护一个递归函数，参数为节点和该节点的深度</li><li>先将根节点与深度 0 传入递归函数</li><li>将节点放入 index 与深度对应的数组内</li><li>将节点的左子节点和右子节点分别传入递归函数，深度 +1</li><li>重复步骤 3、4，直至子节点为空</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',21),N=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token comment"},"// 思路一：广度优先遍历(BFS)"),e(`
`),t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("TreeNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"root"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"levelOrder"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" res "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("root "),t("span",{class:"token operator"},"=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" queue "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),e("root"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`

	`),t("span",{class:"token keyword"},"while"),e(),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"."),e("length"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"let"),e(" len "),t("span",{class:"token operator"},"="),e(" queue"),t("span",{class:"token punctuation"},"."),e("length"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token keyword"},"let"),e(" temp "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token keyword"},"for"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"let"),e(" i "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),e(" i "),t("span",{class:"token operator"},"<"),e(" len"),t("span",{class:"token punctuation"},";"),e(" i"),t("span",{class:"token operator"},"++"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
			`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},")"),e(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},")"),e(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			temp`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("queue"),t("span",{class:"token punctuation"},"["),e("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(`
		queue `),t("span",{class:"token operator"},"="),e(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"slice"),t("span",{class:"token punctuation"},"("),e("len"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("temp"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token punctuation"},"}"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),S=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token comment"},"// 思路二：深度优先遍历(DFS)"),e(`
`),t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("TreeNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"root"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"levelOrder"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" res "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"const"),e(),t("span",{class:"token function-variable function"},"traverse"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[e("node"),t("span",{class:"token punctuation"},","),e(" deep")]),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"=>"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("node "),t("span",{class:"token operator"},"=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token keyword"},"return"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("res"),t("span",{class:"token punctuation"},"."),e("length "),t("span",{class:"token operator"},"=="),e(" deep"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
			res`),t("span",{class:"token punctuation"},"["),e("deep"),t("span",{class:"token punctuation"},"]"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),e("node"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token keyword"},"else"),e(),t("span",{class:"token punctuation"},"{"),e(`
			res`),t("span",{class:"token punctuation"},"["),e("deep"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("node"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(`
		`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),e("node"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},","),e(" deep "),t("span",{class:"token operator"},"+"),e(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),e("node"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},","),e(" deep "),t("span",{class:"token operator"},"+"),e(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),e("root"),t("span",{class:"token punctuation"},","),e(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),F=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),j=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),B=t("td",{style:{"text-align":"center"}},"103",-1),C={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},T={style:{"text-align":"left"}},L=t("code",null,"树",-1),O=t("code",null,"广度优先搜索",-1),V=t("code",null,"二叉树",-1),A={style:{"text-align":"left"}},D=t("td",{style:{"text-align":"center"}},"107",-1),z={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"center"}},H={style:{"text-align":"left"}},J=t("code",null,"树",-1),K=t("code",null,"广度优先搜索",-1),P=t("code",null,"二叉树",-1),Q={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"center"}},"111",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Y={style:{"text-align":"center"}},Z={style:{"text-align":"left"}},$=t("code",null,"树",-1),tt=t("code",null,"深度优先搜索",-1),et=t("code",null,"广度优先搜索",-1),nt=t("code",null,"1+",-1),st={style:{"text-align":"left"}},at=t("td",{style:{"text-align":"center"}},"314",-1),ot={style:{"text-align":"left"}},lt={href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},ct=t("td",{style:{"text-align":"center"}},null,-1),it={style:{"text-align":"left"}},ut=t("code",null,"树",-1),rt=t("code",null,"深度优先搜索",-1),pt=t("code",null,"广度优先搜索",-1),dt=t("code",null,"3+",-1),_t={style:{"text-align":"left"}},kt=t("td",{style:{"text-align":"center"}},"429",-1),ht={style:{"text-align":"left"}},ft={href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},mt=t("td",{style:{"text-align":"center"}},null,-1),bt={style:{"text-align":"left"}},gt=t("code",null,"树",-1),yt=t("code",null,"广度优先搜索",-1),vt={style:{"text-align":"left"}},xt=t("td",{style:{"text-align":"center"}},"637",-1),wt={style:{"text-align":"left"}},qt={href:"https://leetcode.com/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Et={style:{"text-align":"center"}},Nt={style:{"text-align":"left"}},St=t("code",null,"树",-1),Ft=t("code",null,"深度优先搜索",-1),jt=t("code",null,"广度优先搜索",-1),Bt=t("code",null,"1+",-1),Ct={style:{"text-align":"left"}},It=t("td",{style:{"text-align":"center"}},"993",-1),Mt={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/cousins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Lt=t("td",{style:{"text-align":"center"}},null,-1),Ot={style:{"text-align":"left"}},Vt=t("code",null,"树",-1),At=t("code",null,"深度优先搜索",-1),Dt=t("code",null,"广度优先搜索",-1),zt=t("code",null,"1+",-1),Rt={style:{"text-align":"left"}},Gt=t("td",{style:{"text-align":"center"}},"2471",-1),Ht={style:{"text-align":"left"}},Jt={href:"https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level",target:"_blank",rel:"noopener noreferrer"},Kt=t("td",{style:{"text-align":"center"}},null,-1),Pt={style:{"text-align":"left"}},Qt=t("code",null,"树",-1),Ut=t("code",null,"广度优先搜索",-1),Wt=t("code",null,"二叉树",-1),Xt={style:{"text-align":"left"}},Yt=t("td",{style:{"text-align":"center"}},"2493",-1),Zt={style:{"text-align":"left"}},$t={href:"https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},te=t("td",{style:{"text-align":"center"}},null,-1),ee={style:{"text-align":"left"}},ne=t("code",null,"广度优先搜索",-1),se=t("code",null,"并查集",-1),ae=t("code",null,"图",-1),oe={style:{"text-align":"left"}};function le(ce,ie){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink"),r=c("CodeTabs");return d(),_("div",null,[t("h1",m,[b,e(),t("a",g,[e("102. 二叉树的层序遍历"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[y]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[v]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[x]),_:1}),e("  🔗 "),t("a",w,[q,n(o)])]),E,n(r,{id:"143",data:[{id:"广度优先遍历(BFS)"},{id:"深度优先遍历(DFS)"}]},{title0:s(({value:i,isActive:u})=>[e("广度优先遍历(BFS)")]),title1:s(({value:i,isActive:u})=>[e("深度优先遍历(DFS)")]),tab0:s(({value:i,isActive:u})=>[N]),tab1:s(({value:i,isActive:u})=>[S]),_:1}),F,k(" prettier-ignore "),t("table",null,[j,t("tbody",null,[t("tr",null,[B,t("td",C,[t("a",I,[e("二叉树的锯齿形层序遍历"),n(o)])]),t("td",M,[n(a,{to:"/leetcode/problem/0103.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",T,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[L]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[O]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[V]),_:1})]),t("td",A,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[D,t("td",z,[t("a",R,[e("二叉树的层序遍历 II"),n(o)])]),t("td",G,[n(a,{to:"/leetcode/problem/0107.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",H,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[J]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[K]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[P]),_:1})]),t("td",Q,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[U,t("td",W,[t("a",X,[e("二叉树的最小深度"),n(o)])]),t("td",Y,[n(a,{to:"/leetcode/problem/0111.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Z,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[$]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[tt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[et]),_:1}),e(),nt]),t("td",st,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[at,t("td",ot,[t("a",lt,[e("二叉树的垂直遍历"),n(o)])]),ct,t("td",it,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[ut]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[pt]),_:1}),e(),dt]),t("td",_t,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[kt,t("td",ht,[t("a",ft,[e("N 叉树的层序遍历"),n(o)])]),mt,t("td",bt,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[gt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[yt]),_:1})]),t("td",vt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[xt,t("td",wt,[t("a",qt,[e("二叉树的层平均值"),n(o)])]),t("td",Et,[n(a,{to:"/leetcode/problem/0637.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Nt,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[Ft]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[jt]),_:1}),e(),Bt]),t("td",Ct,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[It,t("td",Mt,[t("a",Tt,[e("二叉树的堂兄弟节点"),n(o)])]),Lt,t("td",Ot,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[Vt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/depth-first-search.html"},{default:s(()=>[At]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[Dt]),_:1}),e(),zt]),t("td",Rt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Gt,t("td",Ht,[t("a",Jt,[e("逐层排序二叉树所需的最少操作数目"),n(o)])]),Kt,t("td",Pt,[n(a,{to:"/leetcode/outline/tag/tree.html"},{default:s(()=>[Qt]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[Ut]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/binary-tree.html"},{default:s(()=>[Wt]),_:1})]),t("td",Xt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Yt,t("td",Zt,[t("a",$t,[e("将节点分成尽可能多的组"),n(o)])]),te,t("td",ee,[n(a,{to:"/leetcode/outline/tag/breadth-first-search.html"},{default:s(()=>[ne]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/union-find.html"},{default:s(()=>[se]),_:1}),e(),n(a,{to:"/leetcode/outline/tag/graph.html"},{default:s(()=>[ae]),_:1})]),t("td",oe,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])])])])])}const re=p(f,[["render",le],["__file","0102.html.vue"]]);export{re as default};
