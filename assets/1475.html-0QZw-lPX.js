import{_ as l,r as o,o as r,c as u,a as s,b as n,d as a,w as e,e as c}from"./app-mvY9N9Pc.js";const d={},k={id:"_1475-商品折扣后的最终价格",tabindex:"-1"},h=s("a",{class:"header-anchor",href:"#_1475-商品折扣后的最终价格","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"栈",-1),_=s("code",null,"数组",-1),b=s("code",null,"单调栈",-1),f={href:"https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"LeetCode",-1),y=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of the <code>ith</code> item in a shop.</p><p>There is a special discount for items in the shop. If you buy the <code>ith</code> item, then you will receive a discount equivalent to <code>prices[j]</code> where <code>j</code> is the minimum index such that <code>j &gt; i</code> and <code>prices[j] &lt;= prices[i]</code>. Otherwise, you will not receive any discount at all.</p><p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the final price you will pay for the <code>ith</code> item of the shop, considering the special discount.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: prices = [8,4,6,2,3]</p><p>Output: [4,2,4,2,3]</p><p>Explanation:</p><p>For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.</p><p>For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.</p><p>For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.</p><p>For items 3 and 4 you will not receive any discount at all.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: prices = [1,2,3,4,5]</p><p>Output: [1,2,3,4,5]</p><p>Explanation: In this case, for all items, you will not receive any discount at all.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: prices = [10,1,1,6]</p><p>Output: [9,0,1,6]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 500</code></li><li><code>1 &lt;= prices[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个数组 <code>prices</code> ，其中 <code>prices[i]</code> 是商店里第 <code>i</code> 件商品的价格。</p><p>商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 <code>prices[j] </code>相等的折扣，其中 <code>j</code> 是满足 <code>j &gt; </code>i 且 <code>prices[j] &lt;= prices[i]</code> 的 最小下标 ，如果没有满足条件的 <code>j</code> ，你将没有任何折扣。</p><p>请你返回一个数组，数组中第 <code>i</code> 个元素是折扣后你购买商品 <code>i</code> 最终需要支付的价格。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',17),g=c(`<p>倒序遍历 <code>prices</code> ，并用单调栈中维护当前位置右边的更小的元素列表，从栈底到栈顶的元素是单调递增的。</p><p>当遍历第 <code>i</code> 个元素 <code>prices[i]</code> 时：</p><ul><li>如果当前栈顶的元素大于 <code>prices[i]</code>，则将栈顶元素出栈，直到栈顶的元素小于等于 <code>prices[i]</code>，栈顶的元素即为右边第一个小于 <code>prices[i]</code> 的元素；</li><li>如果当前栈顶的元素小于等于 <code>prices[i]</code>，此时可以知道当前栈顶元素即为 <code>i</code> 的右边第一个小于等于 <code>prices[i]</code> 的元素，此时第 <code>i</code> 个物品折后的价格为 <code>prices[i]</code> 与栈顶的元素的差。</li><li>如果当前栈中的元素为空，则此时折扣为 <code>0</code>，商品的价格为原价 <code>prices[i]</code>；</li><li>将 <code>prices[i]</code> 压入栈中，保证 <code>prices[i]</code> 为当前栈中的最大值；</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">prices</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">finalPrices</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>
			stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function x(j,q){const p=o("ExternalLinkIcon"),i=o("font"),t=o("RouterLink");return r(),u("div",null,[s("h1",k,[h,n(),s("a",m,[n("1475. 商品折扣后的最终价格"),a(p)])]),s("p",null,[n("🟢 "),a(i,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1}),n("  🔖  "),a(t,{to:"/leetcode/outline/tag/stack.html"},{default:e(()=>[v]),_:1}),n(),a(t,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[_]),_:1}),n(),a(t,{to:"/leetcode/outline/tag/monotonic-stack.html"},{default:e(()=>[b]),_:1}),n("  🔗 "),s("a",f,[w,a(p)])]),y,s("p",null,[n("本题与 "),a(t,{to:"/leetcode/problem/0496.html"},{default:e(()=>[n("第 496 题")]),_:1}),n(" 思路一样，都可以使用单调栈。")]),g])}const I=l(d,[["render",x],["__file","1475.html.vue"]]);export{I as default};
