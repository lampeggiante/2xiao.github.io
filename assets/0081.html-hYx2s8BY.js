import{_ as i,r as p,o as r,c as d,a as n,b as s,d as a,w as e,f as u,e as l}from"./app-mvY9N9Pc.js";const k={},m={id:"_81-搜索旋转排序数组-ii",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_81-搜索旋转排序数组-ii","aria-hidden":"true"},"#",-1),b={href:"https://leetcode.com/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"数组",-1),_=n("code",null,"二分查找",-1),f={href:"https://leetcode.com/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),y=l('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with <strong>distinct</strong> values).</p><p>Before being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> ( <strong>0-indexed</strong> ). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p><p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <code>true</code> <em>if</em><code>target</code> <em>is in</em><code>nums</code> <em>, or</em><code>false</code> <em>if it is not in</em><code>nums</code> <em>.</em></p><p>You must decrease the overall operation steps as much as possible.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [2,5,6,0,0,1,2], target = 0</p><p>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,5,6,0,0,1,2], target = 3</p><p>Output: false</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> is guaranteed to be rotated at some pivot.</li><li><code>-10^4 &lt;= target &lt;= 10^4</code></li></ul>',11),w=n("strong",null,"Follow up:",-1),x={href:"/problems/search-in-rotated-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"nums",-1),C=n("strong",null,"duplicates",-1),E=l(`<h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>已知存在一个按非降序排列的整数数组 <code>nums</code> ，数组中的值不必互不相同。</p><p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 旋转 ，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 从 <code>0</code> 开始 计数）。例如， <code>[0,1,2,4,4,4,5,6,6,7]</code> 在下标 <code>5</code> 处经旋转后可能变为 <code>[4,5,6,6,7,0,1,2,4,4]</code> 。</p><p>给你 旋转后 的数组 <code>nums</code> 和一个整数 <code>target</code> ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p>你必须尽可能减少整个操作步骤。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用修改版的二分查找算法来解决这个问题。</p><p>可以定义两个指针 <code>left</code> 和 <code>right</code>，分别指向数组的起始和结束位置。在每一步查找中，计算中间位置 <code>mid</code>。如果 <code>nums[mid]</code> 等于目标值，那么直接返回 <code>true</code>。</p><p>然后，需要处理数组被旋转的情况。在正常的有序数组中，左半部分的元素总是小于等于右半部分的元素。如果 <code>nums[left] &lt;= nums[mid]</code>，说明左半部分是有序的。在这种情况下，可以判断目标值是否在左半部分，如果是，则将 <code>right</code> 指针移到 <code>mid - 1</code> 处；否则，将 <code>left</code> 指针移到 <code>mid + 1</code> 处。</p><p>反之，如果 <code>nums[left] &gt; nums[mid]</code>，说明右半部分是有序的。在这种情况下，可以判断目标值是否在右半部分，如果是，则将 <code>left</code> 指针移到 <code>mid + 1</code> 处；否则，将 <code>right</code> 指针移到 <code>mid - 1</code> 处。</p><p>通过不断缩小搜索范围，最终可以找到目标值或者确定不存在。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,14),L=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),N=n("td",{style:{"text-align":"center"}},"33",-1),V={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},B={href:"https://2xiao.github.io/leetcode-js/leetcode/problem/0033",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"left"}},R=n("code",null,"数组",-1),S=n("code",null,"二分查找",-1),T={style:{"text-align":"left"}};function F(O,A){const t=p("ExternalLinkIcon"),c=p("font"),o=p("RouterLink");return r(),d("div",null,[n("h1",m,[h,s(),n("a",b,[s("81. 搜索旋转排序数组 II"),a(t)])]),n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),a(o,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[g]),_:1}),s(),a(o,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[_]),_:1}),s("  🔗 "),n("a",f,[v,a(t)])]),y,n("p",null,[w,s(" This problem is similar to "),n("a",x,[s("Search in Rotated Sorted Array"),a(t)]),s(", but "),I,s(" may contain "),C,s(". Would this affect the runtime complexity? How and why?")]),E,u(" prettier-ignore "),n("table",null,[L,n("tbody",null,[n("tr",null,[N,n("td",V,[n("a",j,[s("搜索旋转排序数组"),a(t)])]),n("td",q,[n("a",B,[s("[✓]"),a(t)])]),n("td",M,[a(o,{to:"/leetcode/outline/tag/array.html"},{default:e(()=>[R]),_:1}),s(),a(o,{to:"/leetcode/outline/tag/binary-search.html"},{default:e(()=>[S]),_:1})]),n("td",T,[a(c,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const H=i(k,[["render",F],["__file","0081.html.vue"]]);export{H as default};
